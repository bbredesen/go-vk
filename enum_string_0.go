// Code generated by "stringer -output=enum_string_0.go -type=AccessFlagBits,AttachmentDescriptionFlagBits,AttachmentLoadOp,AttachmentStoreOp,BlendFactor,BlendOp,BorderColor,BufferCreateFlagBits,BufferUsageFlagBits,ChromaLocation,ColorComponentFlagBits,ColorSpaceKHR,CommandBufferLevel,CommandBufferResetFlagBits,CommandBufferUsageFlagBits,CommandPoolCreateFlagBits,CommandPoolResetFlagBits,CompareOp,ComponentSwizzle,CompositeAlphaFlagBitsKHR,CullModeFlagBits,DependencyFlagBits,DescriptorPoolCreateFlagBits,DescriptorType,DescriptorUpdateTemplateType,DynamicState,ExternalFenceFeatureFlagBits,ExternalFenceHandleTypeFlagBits,ExternalMemoryFeatureFlagBits,ExternalMemoryHandleTypeFlagBits,ExternalSemaphoreFeatureFlagBits"; DO NOT EDIT.

package vk

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ACCESS_INDIRECT_COMMAND_READ_BIT-1]
}

const _AccessFlagBits_name = "ACCESS_INDIRECT_COMMAND_READ_BIT"

var _AccessFlagBits_index = [...]uint8{0, 32}

func (i AccessFlagBits) String() string {
	i -= 1
	if i >= AccessFlagBits(len(_AccessFlagBits_index)-1) {
		return "AccessFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _AccessFlagBits_name[_AccessFlagBits_index[i]:_AccessFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT-1]
}

const _AttachmentDescriptionFlagBits_name = "ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT"

var _AttachmentDescriptionFlagBits_index = [...]uint8{0, 36}

func (i AttachmentDescriptionFlagBits) String() string {
	i -= 1
	if i >= AttachmentDescriptionFlagBits(len(_AttachmentDescriptionFlagBits_index)-1) {
		return "AttachmentDescriptionFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _AttachmentDescriptionFlagBits_name[_AttachmentDescriptionFlagBits_index[i]:_AttachmentDescriptionFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ATTACHMENT_LOAD_OP_LOAD-0]
}

const _AttachmentLoadOp_name = "ATTACHMENT_LOAD_OP_LOAD"

var _AttachmentLoadOp_index = [...]uint8{0, 23}

func (i AttachmentLoadOp) String() string {
	if i < 0 || i >= AttachmentLoadOp(len(_AttachmentLoadOp_index)-1) {
		return "AttachmentLoadOp(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _AttachmentLoadOp_name[_AttachmentLoadOp_index[i]:_AttachmentLoadOp_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ATTACHMENT_STORE_OP_STORE-0]
}

const _AttachmentStoreOp_name = "ATTACHMENT_STORE_OP_STORE"

var _AttachmentStoreOp_index = [...]uint8{0, 25}

func (i AttachmentStoreOp) String() string {
	if i < 0 || i >= AttachmentStoreOp(len(_AttachmentStoreOp_index)-1) {
		return "AttachmentStoreOp(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _AttachmentStoreOp_name[_AttachmentStoreOp_index[i]:_AttachmentStoreOp_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BLEND_FACTOR_ZERO-0]
}

const _BlendFactor_name = "BLEND_FACTOR_ZERO"

var _BlendFactor_index = [...]uint8{0, 17}

func (i BlendFactor) String() string {
	if i < 0 || i >= BlendFactor(len(_BlendFactor_index)-1) {
		return "BlendFactor(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _BlendFactor_name[_BlendFactor_index[i]:_BlendFactor_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BLEND_OP_ADD-0]
}

const _BlendOp_name = "BLEND_OP_ADD"

var _BlendOp_index = [...]uint8{0, 12}

func (i BlendOp) String() string {
	if i < 0 || i >= BlendOp(len(_BlendOp_index)-1) {
		return "BlendOp(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _BlendOp_name[_BlendOp_index[i]:_BlendOp_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BORDER_COLOR_FLOAT_TRANSPARENT_BLACK-0]
}

const _BorderColor_name = "BORDER_COLOR_FLOAT_TRANSPARENT_BLACK"

var _BorderColor_index = [...]uint8{0, 36}

func (i BorderColor) String() string {
	if i < 0 || i >= BorderColor(len(_BorderColor_index)-1) {
		return "BorderColor(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _BorderColor_name[_BorderColor_index[i]:_BorderColor_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BUFFER_CREATE_SPARSE_BINDING_BIT-1]
}

const _BufferCreateFlagBits_name = "BUFFER_CREATE_SPARSE_BINDING_BIT"

var _BufferCreateFlagBits_index = [...]uint8{0, 32}

func (i BufferCreateFlagBits) String() string {
	i -= 1
	if i >= BufferCreateFlagBits(len(_BufferCreateFlagBits_index)-1) {
		return "BufferCreateFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _BufferCreateFlagBits_name[_BufferCreateFlagBits_index[i]:_BufferCreateFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BUFFER_USAGE_TRANSFER_SRC_BIT-1]
}

const _BufferUsageFlagBits_name = "BUFFER_USAGE_TRANSFER_SRC_BIT"

var _BufferUsageFlagBits_index = [...]uint8{0, 29}

func (i BufferUsageFlagBits) String() string {
	i -= 1
	if i >= BufferUsageFlagBits(len(_BufferUsageFlagBits_index)-1) {
		return "BufferUsageFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _BufferUsageFlagBits_name[_BufferUsageFlagBits_index[i]:_BufferUsageFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CHROMA_LOCATION_COSITED_EVEN-0]
}

const _ChromaLocation_name = "CHROMA_LOCATION_COSITED_EVEN"

var _ChromaLocation_index = [...]uint8{0, 28}

func (i ChromaLocation) String() string {
	if i < 0 || i >= ChromaLocation(len(_ChromaLocation_index)-1) {
		return "ChromaLocation(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ChromaLocation_name[_ChromaLocation_index[i]:_ChromaLocation_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[COLOR_COMPONENT_R_BIT-1]
}

const _ColorComponentFlagBits_name = "COLOR_COMPONENT_R_BIT"

var _ColorComponentFlagBits_index = [...]uint8{0, 21}

func (i ColorComponentFlagBits) String() string {
	i -= 1
	if i >= ColorComponentFlagBits(len(_ColorComponentFlagBits_index)-1) {
		return "ColorComponentFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _ColorComponentFlagBits_name[_ColorComponentFlagBits_index[i]:_ColorComponentFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[COLOR_SPACE_SRGB_NONLINEAR_KHR-0]
}

const _ColorSpaceKHR_name = "COLOR_SPACE_SRGB_NONLINEAR_KHR"

var _ColorSpaceKHR_index = [...]uint8{0, 30}

func (i ColorSpaceKHR) String() string {
	if i < 0 || i >= ColorSpaceKHR(len(_ColorSpaceKHR_index)-1) {
		return "ColorSpaceKHR(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ColorSpaceKHR_name[_ColorSpaceKHR_index[i]:_ColorSpaceKHR_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[COMMAND_BUFFER_LEVEL_PRIMARY-0]
}

const _CommandBufferLevel_name = "COMMAND_BUFFER_LEVEL_PRIMARY"

var _CommandBufferLevel_index = [...]uint8{0, 28}

func (i CommandBufferLevel) String() string {
	if i < 0 || i >= CommandBufferLevel(len(_CommandBufferLevel_index)-1) {
		return "CommandBufferLevel(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _CommandBufferLevel_name[_CommandBufferLevel_index[i]:_CommandBufferLevel_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT-1]
}

const _CommandBufferResetFlagBits_name = "COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT"

var _CommandBufferResetFlagBits_index = [...]uint8{0, 42}

func (i CommandBufferResetFlagBits) String() string {
	i -= 1
	if i >= CommandBufferResetFlagBits(len(_CommandBufferResetFlagBits_index)-1) {
		return "CommandBufferResetFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _CommandBufferResetFlagBits_name[_CommandBufferResetFlagBits_index[i]:_CommandBufferResetFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT-1]
}

const _CommandBufferUsageFlagBits_name = "COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT"

var _CommandBufferUsageFlagBits_index = [...]uint8{0, 40}

func (i CommandBufferUsageFlagBits) String() string {
	i -= 1
	if i >= CommandBufferUsageFlagBits(len(_CommandBufferUsageFlagBits_index)-1) {
		return "CommandBufferUsageFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _CommandBufferUsageFlagBits_name[_CommandBufferUsageFlagBits_index[i]:_CommandBufferUsageFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[COMMAND_POOL_CREATE_TRANSIENT_BIT-1]
}

const _CommandPoolCreateFlagBits_name = "COMMAND_POOL_CREATE_TRANSIENT_BIT"

var _CommandPoolCreateFlagBits_index = [...]uint8{0, 33}

func (i CommandPoolCreateFlagBits) String() string {
	i -= 1
	if i >= CommandPoolCreateFlagBits(len(_CommandPoolCreateFlagBits_index)-1) {
		return "CommandPoolCreateFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _CommandPoolCreateFlagBits_name[_CommandPoolCreateFlagBits_index[i]:_CommandPoolCreateFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT-1]
}

const _CommandPoolResetFlagBits_name = "COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT"

var _CommandPoolResetFlagBits_index = [...]uint8{0, 40}

func (i CommandPoolResetFlagBits) String() string {
	i -= 1
	if i >= CommandPoolResetFlagBits(len(_CommandPoolResetFlagBits_index)-1) {
		return "CommandPoolResetFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _CommandPoolResetFlagBits_name[_CommandPoolResetFlagBits_index[i]:_CommandPoolResetFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[COMPARE_OP_NEVER-0]
}

const _CompareOp_name = "COMPARE_OP_NEVER"

var _CompareOp_index = [...]uint8{0, 16}

func (i CompareOp) String() string {
	if i < 0 || i >= CompareOp(len(_CompareOp_index)-1) {
		return "CompareOp(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _CompareOp_name[_CompareOp_index[i]:_CompareOp_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[COMPONENT_SWIZZLE_IDENTITY-0]
}

const _ComponentSwizzle_name = "COMPONENT_SWIZZLE_IDENTITY"

var _ComponentSwizzle_index = [...]uint8{0, 26}

func (i ComponentSwizzle) String() string {
	if i < 0 || i >= ComponentSwizzle(len(_ComponentSwizzle_index)-1) {
		return "ComponentSwizzle(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ComponentSwizzle_name[_ComponentSwizzle_index[i]:_ComponentSwizzle_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[COMPOSITE_ALPHA_OPAQUE_BIT_KHR-1]
}

const _CompositeAlphaFlagBitsKHR_name = "COMPOSITE_ALPHA_OPAQUE_BIT_KHR"

var _CompositeAlphaFlagBitsKHR_index = [...]uint8{0, 30}

func (i CompositeAlphaFlagBitsKHR) String() string {
	i -= 1
	if i >= CompositeAlphaFlagBitsKHR(len(_CompositeAlphaFlagBitsKHR_index)-1) {
		return "CompositeAlphaFlagBitsKHR(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _CompositeAlphaFlagBitsKHR_name[_CompositeAlphaFlagBitsKHR_index[i]:_CompositeAlphaFlagBitsKHR_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CULL_MODE_NONE-0]
}

const _CullModeFlagBits_name = "CULL_MODE_NONE"

var _CullModeFlagBits_index = [...]uint8{0, 14}

func (i CullModeFlagBits) String() string {
	if i >= CullModeFlagBits(len(_CullModeFlagBits_index)-1) {
		return "CullModeFlagBits(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _CullModeFlagBits_name[_CullModeFlagBits_index[i]:_CullModeFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DEPENDENCY_BY_REGION_BIT-1]
}

const _DependencyFlagBits_name = "DEPENDENCY_BY_REGION_BIT"

var _DependencyFlagBits_index = [...]uint8{0, 24}

func (i DependencyFlagBits) String() string {
	i -= 1
	if i >= DependencyFlagBits(len(_DependencyFlagBits_index)-1) {
		return "DependencyFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _DependencyFlagBits_name[_DependencyFlagBits_index[i]:_DependencyFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT-1]
}

const _DescriptorPoolCreateFlagBits_name = "DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT"

var _DescriptorPoolCreateFlagBits_index = [...]uint8{0, 46}

func (i DescriptorPoolCreateFlagBits) String() string {
	i -= 1
	if i >= DescriptorPoolCreateFlagBits(len(_DescriptorPoolCreateFlagBits_index)-1) {
		return "DescriptorPoolCreateFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _DescriptorPoolCreateFlagBits_name[_DescriptorPoolCreateFlagBits_index[i]:_DescriptorPoolCreateFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DESCRIPTOR_TYPE_SAMPLER-0]
}

const _DescriptorType_name = "DESCRIPTOR_TYPE_SAMPLER"

var _DescriptorType_index = [...]uint8{0, 23}

func (i DescriptorType) String() string {
	if i < 0 || i >= DescriptorType(len(_DescriptorType_index)-1) {
		return "DescriptorType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _DescriptorType_name[_DescriptorType_index[i]:_DescriptorType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET-0]
}

const _DescriptorUpdateTemplateType_name = "DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET"

var _DescriptorUpdateTemplateType_index = [...]uint8{0, 46}

func (i DescriptorUpdateTemplateType) String() string {
	if i < 0 || i >= DescriptorUpdateTemplateType(len(_DescriptorUpdateTemplateType_index)-1) {
		return "DescriptorUpdateTemplateType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _DescriptorUpdateTemplateType_name[_DescriptorUpdateTemplateType_index[i]:_DescriptorUpdateTemplateType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DYNAMIC_STATE_VIEWPORT-0]
}

const _DynamicState_name = "DYNAMIC_STATE_VIEWPORT"

var _DynamicState_index = [...]uint8{0, 22}

func (i DynamicState) String() string {
	if i < 0 || i >= DynamicState(len(_DynamicState_index)-1) {
		return "DynamicState(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _DynamicState_name[_DynamicState_index[i]:_DynamicState_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT-1]
}

const _ExternalFenceFeatureFlagBits_name = "EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT"

var _ExternalFenceFeatureFlagBits_index = [...]uint8{0, 37}

func (i ExternalFenceFeatureFlagBits) String() string {
	i -= 1
	if i >= ExternalFenceFeatureFlagBits(len(_ExternalFenceFeatureFlagBits_index)-1) {
		return "ExternalFenceFeatureFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _ExternalFenceFeatureFlagBits_name[_ExternalFenceFeatureFlagBits_index[i]:_ExternalFenceFeatureFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT-1]
}

const _ExternalFenceHandleTypeFlagBits_name = "EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT"

var _ExternalFenceHandleTypeFlagBits_index = [...]uint8{0, 40}

func (i ExternalFenceHandleTypeFlagBits) String() string {
	i -= 1
	if i >= ExternalFenceHandleTypeFlagBits(len(_ExternalFenceHandleTypeFlagBits_index)-1) {
		return "ExternalFenceHandleTypeFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _ExternalFenceHandleTypeFlagBits_name[_ExternalFenceHandleTypeFlagBits_index[i]:_ExternalFenceHandleTypeFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT-1]
}

const _ExternalMemoryFeatureFlagBits_name = "EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT"

var _ExternalMemoryFeatureFlagBits_index = [...]uint8{0, 42}

func (i ExternalMemoryFeatureFlagBits) String() string {
	i -= 1
	if i >= ExternalMemoryFeatureFlagBits(len(_ExternalMemoryFeatureFlagBits_index)-1) {
		return "ExternalMemoryFeatureFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _ExternalMemoryFeatureFlagBits_name[_ExternalMemoryFeatureFlagBits_index[i]:_ExternalMemoryFeatureFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT-1]
}

const _ExternalMemoryHandleTypeFlagBits_name = "EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT"

var _ExternalMemoryHandleTypeFlagBits_index = [...]uint8{0, 41}

func (i ExternalMemoryHandleTypeFlagBits) String() string {
	i -= 1
	if i >= ExternalMemoryHandleTypeFlagBits(len(_ExternalMemoryHandleTypeFlagBits_index)-1) {
		return "ExternalMemoryHandleTypeFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _ExternalMemoryHandleTypeFlagBits_name[_ExternalMemoryHandleTypeFlagBits_index[i]:_ExternalMemoryHandleTypeFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT-1]
}

const _ExternalSemaphoreFeatureFlagBits_name = "EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT"

var _ExternalSemaphoreFeatureFlagBits_index = [...]uint8{0, 41}

func (i ExternalSemaphoreFeatureFlagBits) String() string {
	i -= 1
	if i >= ExternalSemaphoreFeatureFlagBits(len(_ExternalSemaphoreFeatureFlagBits_index)-1) {
		return "ExternalSemaphoreFeatureFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _ExternalSemaphoreFeatureFlagBits_name[_ExternalSemaphoreFeatureFlagBits_index[i]:_ExternalSemaphoreFeatureFlagBits_index[i+1]]
}
