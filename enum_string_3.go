// Code generated by "stringer -output=enum_string_3.go -type=ImageCompressionFlagBitsEXT,ImageCreateFlagBits,ImageLayout,ImageTiling,ImageType,ImageUsageFlagBits,ImageViewCreateFlagBits,ImageViewType,IndexType,IndirectCommandsLayoutUsageFlagBitsNV,IndirectCommandsTokenTypeNV,IndirectStateFlagBitsNV,InstanceCreateFlagBits,InternalAllocationType,LineRasterizationModeEXT,LogicOp,MemoryAllocateFlagBits,MemoryDecompressionMethodFlagBitsNV,MemoryHeapFlagBits,MemoryOverallocationBehaviorAMD,MemoryPropertyFlagBits,MicromapCreateFlagBitsEXT,MicromapTypeEXT,ObjectType,OpacityMicromapFormatEXT,OpacityMicromapSpecialIndexEXT,OpticalFlowExecuteFlagBitsNV,OpticalFlowGridSizeFlagBitsNV,OpticalFlowPerformanceLevelNV,OpticalFlowSessionBindingPointNV,OpticalFlowSessionCreateFlagBitsNV"; DO NOT EDIT.

package vk

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[IMAGE_COMPRESSION_DEFAULT_EXT-0]
	_ = x[IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT-1]
	_ = x[IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT-2]
	_ = x[IMAGE_COMPRESSION_DISABLED_EXT-4]
}

const (
	_ImageCompressionFlagBitsEXT_name_0 = "IMAGE_COMPRESSION_DEFAULT_EXTIMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXTIMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT"
	_ImageCompressionFlagBitsEXT_name_1 = "IMAGE_COMPRESSION_DISABLED_EXT"
)

var (
	_ImageCompressionFlagBitsEXT_index_0 = [...]uint8{0, 29, 69, 110}
)

func (i ImageCompressionFlagBitsEXT) String() string {
	switch {
	case i <= 2:
		return _ImageCompressionFlagBitsEXT_name_0[_ImageCompressionFlagBitsEXT_index_0[i]:_ImageCompressionFlagBitsEXT_index_0[i+1]]
	case i == 4:
		return _ImageCompressionFlagBitsEXT_name_1
	default:
		return "ImageCompressionFlagBitsEXT(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[IMAGE_CREATE_SPARSE_BINDING_BIT-1]
	_ = x[IMAGE_CREATE_SPARSE_RESIDENCY_BIT-2]
	_ = x[IMAGE_CREATE_ALIAS_BIT-1024]
	_ = x[IMAGE_CREATE_PROTECTED_BIT-2048]
	_ = x[IMAGE_CREATE_SPARSE_ALIASED_BIT-4]
	_ = x[IMAGE_CREATE_MUTABLE_FORMAT_BIT-8]
	_ = x[IMAGE_CREATE_CUBE_COMPATIBLE_BIT-16]
	_ = x[IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT-32]
	_ = x[IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT-64]
	_ = x[IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT-128]
	_ = x[IMAGE_CREATE_EXTENDED_USAGE_BIT-256]
	_ = x[IMAGE_CREATE_DISJOINT_BIT-512]
	_ = x[IMAGE_CREATE_CORNER_SAMPLED_BIT_NV-1000050000]
	_ = x[IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT-1000143000]
	_ = x[IMAGE_CREATE_SUBSAMPLED_BIT_EXT-1000218000]
	_ = x[IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT-1000316000]
	_ = x[IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT-1000376000]
	_ = x[IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT-1000393000]
	_ = x[IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM-1000425000]
	_ = x[IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR-32]
	_ = x[IMAGE_CREATE_ALIAS_BIT_KHR-1024]
	_ = x[IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR-128]
	_ = x[IMAGE_CREATE_DISJOINT_BIT_KHR-512]
	_ = x[IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR-256]
	_ = x[IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR-64]
}

const _ImageCreateFlagBits_name = "IMAGE_CREATE_SPARSE_BINDING_BITIMAGE_CREATE_SPARSE_RESIDENCY_BITIMAGE_CREATE_SPARSE_ALIASED_BITIMAGE_CREATE_MUTABLE_FORMAT_BITIMAGE_CREATE_CUBE_COMPATIBLE_BITIMAGE_CREATE_2D_ARRAY_COMPATIBLE_BITIMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BITIMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BITIMAGE_CREATE_EXTENDED_USAGE_BITIMAGE_CREATE_DISJOINT_BITIMAGE_CREATE_ALIAS_BITIMAGE_CREATE_PROTECTED_BITIMAGE_CREATE_CORNER_SAMPLED_BIT_NVIMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXTIMAGE_CREATE_SUBSAMPLED_BIT_EXTIMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXTIMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXTIMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXTIMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM"

var _ImageCreateFlagBits_map = map[ImageCreateFlagBits]string{
	1:          _ImageCreateFlagBits_name[0:31],
	2:          _ImageCreateFlagBits_name[31:64],
	4:          _ImageCreateFlagBits_name[64:95],
	8:          _ImageCreateFlagBits_name[95:126],
	16:         _ImageCreateFlagBits_name[126:158],
	32:         _ImageCreateFlagBits_name[158:194],
	64:         _ImageCreateFlagBits_name[194:238],
	128:        _ImageCreateFlagBits_name[238:282],
	256:        _ImageCreateFlagBits_name[282:313],
	512:        _ImageCreateFlagBits_name[313:338],
	1024:       _ImageCreateFlagBits_name[338:360],
	2048:       _ImageCreateFlagBits_name[360:386],
	1000050000: _ImageCreateFlagBits_name[386:420],
	1000143000: _ImageCreateFlagBits_name[420:474],
	1000218000: _ImageCreateFlagBits_name[474:505],
	1000316000: _ImageCreateFlagBits_name[505:558],
	1000376000: _ImageCreateFlagBits_name[558:616],
	1000393000: _ImageCreateFlagBits_name[616:655],
	1000425000: _ImageCreateFlagBits_name[655:704],
}

func (i ImageCreateFlagBits) String() string {
	if str, ok := _ImageCreateFlagBits_map[i]; ok {
		return str
	}
	return "ImageCreateFlagBits(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[IMAGE_LAYOUT_UNDEFINED-0]
	_ = x[IMAGE_LAYOUT_GENERAL-1]
	_ = x[IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL-2]
	_ = x[IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL-3]
	_ = x[IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL-4]
	_ = x[IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL-5]
	_ = x[IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL-6]
	_ = x[IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL-7]
	_ = x[IMAGE_LAYOUT_PREINITIALIZED-8]
	_ = x[IMAGE_LAYOUT_PRESENT_SRC_KHR-1000001002]
	_ = x[IMAGE_LAYOUT_VIDEO_DECODE_DST_KHR-1000024000]
	_ = x[IMAGE_LAYOUT_VIDEO_DECODE_SRC_KHR-1000024001]
	_ = x[IMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR-1000024002]
	_ = x[IMAGE_LAYOUT_SHARED_PRESENT_KHR-1000111000]
	_ = x[IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL-1000117000]
	_ = x[IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL-1000117001]
	_ = x[IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT-1000218000]
	_ = x[IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR-1000226003]
	_ = x[IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL-1000241000]
	_ = x[IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL-1000241001]
	_ = x[IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL-1000241002]
	_ = x[IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL-1000241003]
	_ = x[IMAGE_LAYOUT_READ_ONLY_OPTIMAL-1000314000]
	_ = x[IMAGE_LAYOUT_ATTACHMENT_OPTIMAL-1000314001]
	_ = x[IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT-1000339000]
	_ = x[IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR-1000314001]
	_ = x[IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR-1000241000]
	_ = x[IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR-1000117001]
	_ = x[IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR-1000241001]
	_ = x[IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR-1000117000]
	_ = x[IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV-1000226003]
	_ = x[IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR-1000314000]
	_ = x[IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR-1000241002]
	_ = x[IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR-1000241003]
}

const (
	_ImageLayout_name_0 = "IMAGE_LAYOUT_UNDEFINEDIMAGE_LAYOUT_GENERALIMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMALIMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMALIMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMALIMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMALIMAGE_LAYOUT_TRANSFER_SRC_OPTIMALIMAGE_LAYOUT_TRANSFER_DST_OPTIMALIMAGE_LAYOUT_PREINITIALIZED"
	_ImageLayout_name_1 = "IMAGE_LAYOUT_PRESENT_SRC_KHR"
	_ImageLayout_name_2 = "IMAGE_LAYOUT_VIDEO_DECODE_DST_KHRIMAGE_LAYOUT_VIDEO_DECODE_SRC_KHRIMAGE_LAYOUT_VIDEO_DECODE_DPB_KHR"
	_ImageLayout_name_3 = "IMAGE_LAYOUT_SHARED_PRESENT_KHR"
	_ImageLayout_name_4 = "IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMALIMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL"
	_ImageLayout_name_5 = "IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT"
	_ImageLayout_name_6 = "IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR"
	_ImageLayout_name_7 = "IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMALIMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMALIMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMALIMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL"
	_ImageLayout_name_8 = "IMAGE_LAYOUT_READ_ONLY_OPTIMALIMAGE_LAYOUT_ATTACHMENT_OPTIMAL"
	_ImageLayout_name_9 = "IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT"
)

var (
	_ImageLayout_index_0 = [...]uint16{0, 22, 42, 79, 124, 168, 205, 238, 271, 298}
	_ImageLayout_index_2 = [...]uint8{0, 33, 66, 99}
	_ImageLayout_index_4 = [...]uint8{0, 55, 110}
	_ImageLayout_index_7 = [...]uint8{0, 37, 73, 112, 150}
	_ImageLayout_index_8 = [...]uint8{0, 30, 61}
)

func (i ImageLayout) String() string {
	switch {
	case 0 <= i && i <= 8:
		return _ImageLayout_name_0[_ImageLayout_index_0[i]:_ImageLayout_index_0[i+1]]
	case i == 1000001002:
		return _ImageLayout_name_1
	case 1000024000 <= i && i <= 1000024002:
		i -= 1000024000
		return _ImageLayout_name_2[_ImageLayout_index_2[i]:_ImageLayout_index_2[i+1]]
	case i == 1000111000:
		return _ImageLayout_name_3
	case 1000117000 <= i && i <= 1000117001:
		i -= 1000117000
		return _ImageLayout_name_4[_ImageLayout_index_4[i]:_ImageLayout_index_4[i+1]]
	case i == 1000218000:
		return _ImageLayout_name_5
	case i == 1000226003:
		return _ImageLayout_name_6
	case 1000241000 <= i && i <= 1000241003:
		i -= 1000241000
		return _ImageLayout_name_7[_ImageLayout_index_7[i]:_ImageLayout_index_7[i+1]]
	case 1000314000 <= i && i <= 1000314001:
		i -= 1000314000
		return _ImageLayout_name_8[_ImageLayout_index_8[i]:_ImageLayout_index_8[i+1]]
	case i == 1000339000:
		return _ImageLayout_name_9
	default:
		return "ImageLayout(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[IMAGE_TILING_OPTIMAL-0]
	_ = x[IMAGE_TILING_LINEAR-1]
	_ = x[IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT-1000158000]
}

const (
	_ImageTiling_name_0 = "IMAGE_TILING_OPTIMALIMAGE_TILING_LINEAR"
	_ImageTiling_name_1 = "IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT"
)

var (
	_ImageTiling_index_0 = [...]uint8{0, 20, 39}
)

func (i ImageTiling) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _ImageTiling_name_0[_ImageTiling_index_0[i]:_ImageTiling_index_0[i+1]]
	case i == 1000158000:
		return _ImageTiling_name_1
	default:
		return "ImageTiling(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[IMAGE_TYPE_1D-0]
	_ = x[IMAGE_TYPE_2D-1]
	_ = x[IMAGE_TYPE_3D-2]
}

const _ImageType_name = "IMAGE_TYPE_1DIMAGE_TYPE_2DIMAGE_TYPE_3D"

var _ImageType_index = [...]uint8{0, 13, 26, 39}

func (i ImageType) String() string {
	if i < 0 || i >= ImageType(len(_ImageType_index)-1) {
		return "ImageType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ImageType_name[_ImageType_index[i]:_ImageType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[IMAGE_USAGE_TRANSFER_SRC_BIT-1]
	_ = x[IMAGE_USAGE_TRANSFER_DST_BIT-2]
	_ = x[IMAGE_USAGE_SAMPLED_BIT-4]
	_ = x[IMAGE_USAGE_STORAGE_BIT-8]
	_ = x[IMAGE_USAGE_COLOR_ATTACHMENT_BIT-16]
	_ = x[IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT-32]
	_ = x[IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT-64]
	_ = x[IMAGE_USAGE_INPUT_ATTACHMENT_BIT-128]
	_ = x[IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR-1000024000]
	_ = x[IMAGE_USAGE_VIDEO_DECODE_SRC_BIT_KHR-1000024000]
	_ = x[IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR-1000024000]
	_ = x[IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT-1000218000]
	_ = x[IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR-1000226000]
	_ = x[IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT-1000339000]
	_ = x[IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI-1000370000]
	_ = x[IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM-1000440000]
	_ = x[IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM-1000440000]
	_ = x[IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV-1000226000]
}

const _ImageUsageFlagBits_name = "IMAGE_USAGE_TRANSFER_SRC_BITIMAGE_USAGE_TRANSFER_DST_BITIMAGE_USAGE_SAMPLED_BITIMAGE_USAGE_STORAGE_BITIMAGE_USAGE_COLOR_ATTACHMENT_BITIMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BITIMAGE_USAGE_TRANSIENT_ATTACHMENT_BITIMAGE_USAGE_INPUT_ATTACHMENT_BITIMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHRIMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXTIMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHRIMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXTIMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEIIMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM"

var _ImageUsageFlagBits_map = map[ImageUsageFlagBits]string{
	1:          _ImageUsageFlagBits_name[0:28],
	2:          _ImageUsageFlagBits_name[28:56],
	4:          _ImageUsageFlagBits_name[56:79],
	8:          _ImageUsageFlagBits_name[79:102],
	16:         _ImageUsageFlagBits_name[102:134],
	32:         _ImageUsageFlagBits_name[134:174],
	64:         _ImageUsageFlagBits_name[174:210],
	128:        _ImageUsageFlagBits_name[210:242],
	1000024000: _ImageUsageFlagBits_name[242:278],
	1000218000: _ImageUsageFlagBits_name[278:318],
	1000226000: _ImageUsageFlagBits_name[318:370],
	1000339000: _ImageUsageFlagBits_name[370:414],
	1000370000: _ImageUsageFlagBits_name[414:452],
	1000440000: _ImageUsageFlagBits_name[452:491],
}

func (i ImageUsageFlagBits) String() string {
	if str, ok := _ImageUsageFlagBits_map[i]; ok {
		return str
	}
	return "ImageUsageFlagBits(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT-1000218000]
	_ = x[IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT-1000316000]
	_ = x[IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT-1000332000]
}

const (
	_ImageViewCreateFlagBits_name_0 = "IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT"
	_ImageViewCreateFlagBits_name_1 = "IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT"
	_ImageViewCreateFlagBits_name_2 = "IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT"
)

func (i ImageViewCreateFlagBits) String() string {
	switch {
	case i == 1000218000:
		return _ImageViewCreateFlagBits_name_0
	case i == 1000316000:
		return _ImageViewCreateFlagBits_name_1
	case i == 1000332000:
		return _ImageViewCreateFlagBits_name_2
	default:
		return "ImageViewCreateFlagBits(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[IMAGE_VIEW_TYPE_1D-0]
	_ = x[IMAGE_VIEW_TYPE_2D-1]
	_ = x[IMAGE_VIEW_TYPE_3D-2]
	_ = x[IMAGE_VIEW_TYPE_CUBE-3]
	_ = x[IMAGE_VIEW_TYPE_1D_ARRAY-4]
	_ = x[IMAGE_VIEW_TYPE_2D_ARRAY-5]
	_ = x[IMAGE_VIEW_TYPE_CUBE_ARRAY-6]
}

const _ImageViewType_name = "IMAGE_VIEW_TYPE_1DIMAGE_VIEW_TYPE_2DIMAGE_VIEW_TYPE_3DIMAGE_VIEW_TYPE_CUBEIMAGE_VIEW_TYPE_1D_ARRAYIMAGE_VIEW_TYPE_2D_ARRAYIMAGE_VIEW_TYPE_CUBE_ARRAY"

var _ImageViewType_index = [...]uint8{0, 18, 36, 54, 74, 98, 122, 148}

func (i ImageViewType) String() string {
	if i < 0 || i >= ImageViewType(len(_ImageViewType_index)-1) {
		return "ImageViewType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ImageViewType_name[_ImageViewType_index[i]:_ImageViewType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[INDEX_TYPE_UINT16-0]
	_ = x[INDEX_TYPE_UINT32-1]
	_ = x[INDEX_TYPE_NONE_KHR-1000150000]
	_ = x[INDEX_TYPE_UINT8_EXT-1000265000]
	_ = x[INDEX_TYPE_NONE_NV-1000150000]
}

const (
	_IndexType_name_0 = "INDEX_TYPE_UINT16INDEX_TYPE_UINT32"
	_IndexType_name_1 = "INDEX_TYPE_NONE_KHR"
	_IndexType_name_2 = "INDEX_TYPE_UINT8_EXT"
)

var (
	_IndexType_index_0 = [...]uint8{0, 17, 34}
)

func (i IndexType) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _IndexType_name_0[_IndexType_index_0[i]:_IndexType_index_0[i+1]]
	case i == 1000150000:
		return _IndexType_name_1
	case i == 1000265000:
		return _IndexType_name_2
	default:
		return "IndexType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV-1]
	_ = x[INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV-2]
	_ = x[INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV-4]
}

const (
	_IndirectCommandsLayoutUsageFlagBitsNV_name_0 = "INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NVINDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV"
	_IndirectCommandsLayoutUsageFlagBitsNV_name_1 = "INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV"
)

var (
	_IndirectCommandsLayoutUsageFlagBitsNV_index_0 = [...]uint8{0, 57, 112}
)

func (i IndirectCommandsLayoutUsageFlagBitsNV) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _IndirectCommandsLayoutUsageFlagBitsNV_name_0[_IndirectCommandsLayoutUsageFlagBitsNV_index_0[i]:_IndirectCommandsLayoutUsageFlagBitsNV_index_0[i+1]]
	case i == 4:
		return _IndirectCommandsLayoutUsageFlagBitsNV_name_1
	default:
		return "IndirectCommandsLayoutUsageFlagBitsNV(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV-0]
	_ = x[INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV-1]
	_ = x[INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV-2]
	_ = x[INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV-3]
	_ = x[INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV-4]
	_ = x[INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV-5]
	_ = x[INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV-6]
	_ = x[INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV-7]
	_ = x[INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV-1000328000]
}

const (
	_IndirectCommandsTokenTypeNV_name_0 = "INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NVINDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NVINDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NVINDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NVINDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NVINDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NVINDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NVINDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV"
	_IndirectCommandsTokenTypeNV_name_1 = "INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_MESH_TASKS_NV"
)

var (
	_IndirectCommandsTokenTypeNV_index_0 = [...]uint16{0, 44, 87, 131, 176, 221, 265, 301, 343}
)

func (i IndirectCommandsTokenTypeNV) String() string {
	switch {
	case 0 <= i && i <= 7:
		return _IndirectCommandsTokenTypeNV_name_0[_IndirectCommandsTokenTypeNV_index_0[i]:_IndirectCommandsTokenTypeNV_index_0[i+1]]
	case i == 1000328000:
		return _IndirectCommandsTokenTypeNV_name_1
	default:
		return "IndirectCommandsTokenTypeNV(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV-1]
}

const _IndirectStateFlagBitsNV_name = "INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV"

var _IndirectStateFlagBitsNV_index = [...]uint8{0, 36}

func (i IndirectStateFlagBitsNV) String() string {
	i -= 1
	if i >= IndirectStateFlagBitsNV(len(_IndirectStateFlagBitsNV_index)-1) {
		return "IndirectStateFlagBitsNV(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _IndirectStateFlagBitsNV_name[_IndirectStateFlagBitsNV_index[i]:_IndirectStateFlagBitsNV_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR-1000394000]
}

const _InstanceCreateFlagBits_name = "INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR"

var _InstanceCreateFlagBits_index = [...]uint8{0, 45}

func (i InstanceCreateFlagBits) String() string {
	i -= 1000394000
	if i >= InstanceCreateFlagBits(len(_InstanceCreateFlagBits_index)-1) {
		return "InstanceCreateFlagBits(" + strconv.FormatInt(int64(i+1000394000), 10) + ")"
	}
	return _InstanceCreateFlagBits_name[_InstanceCreateFlagBits_index[i]:_InstanceCreateFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[INTERNAL_ALLOCATION_TYPE_EXECUTABLE-0]
}

const _InternalAllocationType_name = "INTERNAL_ALLOCATION_TYPE_EXECUTABLE"

var _InternalAllocationType_index = [...]uint8{0, 35}

func (i InternalAllocationType) String() string {
	if i < 0 || i >= InternalAllocationType(len(_InternalAllocationType_index)-1) {
		return "InternalAllocationType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _InternalAllocationType_name[_InternalAllocationType_index[i]:_InternalAllocationType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LINE_RASTERIZATION_MODE_DEFAULT_EXT-0]
	_ = x[LINE_RASTERIZATION_MODE_RECTANGULAR_EXT-1]
	_ = x[LINE_RASTERIZATION_MODE_BRESENHAM_EXT-2]
	_ = x[LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT-3]
}

const _LineRasterizationModeEXT_name = "LINE_RASTERIZATION_MODE_DEFAULT_EXTLINE_RASTERIZATION_MODE_RECTANGULAR_EXTLINE_RASTERIZATION_MODE_BRESENHAM_EXTLINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT"

var _LineRasterizationModeEXT_index = [...]uint8{0, 35, 74, 111, 157}

func (i LineRasterizationModeEXT) String() string {
	if i < 0 || i >= LineRasterizationModeEXT(len(_LineRasterizationModeEXT_index)-1) {
		return "LineRasterizationModeEXT(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _LineRasterizationModeEXT_name[_LineRasterizationModeEXT_index[i]:_LineRasterizationModeEXT_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LOGIC_OP_CLEAR-0]
	_ = x[LOGIC_OP_AND-1]
	_ = x[LOGIC_OP_AND_REVERSE-2]
	_ = x[LOGIC_OP_COPY-3]
	_ = x[LOGIC_OP_AND_INVERTED-4]
	_ = x[LOGIC_OP_NO_OP-5]
	_ = x[LOGIC_OP_XOR-6]
	_ = x[LOGIC_OP_OR-7]
	_ = x[LOGIC_OP_NOR-8]
	_ = x[LOGIC_OP_EQUIVALENT-9]
	_ = x[LOGIC_OP_INVERT-10]
	_ = x[LOGIC_OP_OR_REVERSE-11]
	_ = x[LOGIC_OP_COPY_INVERTED-12]
	_ = x[LOGIC_OP_OR_INVERTED-13]
	_ = x[LOGIC_OP_NAND-14]
	_ = x[LOGIC_OP_SET-15]
}

const _LogicOp_name = "LOGIC_OP_CLEARLOGIC_OP_ANDLOGIC_OP_AND_REVERSELOGIC_OP_COPYLOGIC_OP_AND_INVERTEDLOGIC_OP_NO_OPLOGIC_OP_XORLOGIC_OP_ORLOGIC_OP_NORLOGIC_OP_EQUIVALENTLOGIC_OP_INVERTLOGIC_OP_OR_REVERSELOGIC_OP_COPY_INVERTEDLOGIC_OP_OR_INVERTEDLOGIC_OP_NANDLOGIC_OP_SET"

var _LogicOp_index = [...]uint8{0, 14, 26, 46, 59, 80, 94, 106, 117, 129, 148, 163, 182, 204, 224, 237, 249}

func (i LogicOp) String() string {
	if i < 0 || i >= LogicOp(len(_LogicOp_index)-1) {
		return "LogicOp(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _LogicOp_name[_LogicOp_index[i]:_LogicOp_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MEMORY_ALLOCATE_DEVICE_MASK_BIT-1]
	_ = x[MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT-2]
	_ = x[MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT-4]
	_ = x[MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR-2]
	_ = x[MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR-4]
	_ = x[MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR-1]
}

const (
	_MemoryAllocateFlagBits_name_0 = "MEMORY_ALLOCATE_DEVICE_MASK_BITMEMORY_ALLOCATE_DEVICE_ADDRESS_BIT"
	_MemoryAllocateFlagBits_name_1 = "MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT"
)

var (
	_MemoryAllocateFlagBits_index_0 = [...]uint8{0, 31, 65}
)

func (i MemoryAllocateFlagBits) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _MemoryAllocateFlagBits_name_0[_MemoryAllocateFlagBits_index_0[i]:_MemoryAllocateFlagBits_index_0[i+1]]
	case i == 4:
		return _MemoryAllocateFlagBits_name_1
	default:
		return "MemoryAllocateFlagBits(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MEMORY_DECOMPRESSION_METHOD_GDEFLATE_1_0_BIT_NV-1]
}

const _MemoryDecompressionMethodFlagBitsNV_name = "MEMORY_DECOMPRESSION_METHOD_GDEFLATE_1_0_BIT_NV"

var _MemoryDecompressionMethodFlagBitsNV_index = [...]uint8{0, 47}

func (i MemoryDecompressionMethodFlagBitsNV) String() string {
	i -= 1
	if i >= MemoryDecompressionMethodFlagBitsNV(len(_MemoryDecompressionMethodFlagBitsNV_index)-1) {
		return "MemoryDecompressionMethodFlagBitsNV(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _MemoryDecompressionMethodFlagBitsNV_name[_MemoryDecompressionMethodFlagBitsNV_index[i]:_MemoryDecompressionMethodFlagBitsNV_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MEMORY_HEAP_DEVICE_LOCAL_BIT-1]
	_ = x[MEMORY_HEAP_MULTI_INSTANCE_BIT-2]
	_ = x[MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR-2]
}

const _MemoryHeapFlagBits_name = "MEMORY_HEAP_DEVICE_LOCAL_BITMEMORY_HEAP_MULTI_INSTANCE_BIT"

var _MemoryHeapFlagBits_index = [...]uint8{0, 28, 58}

func (i MemoryHeapFlagBits) String() string {
	i -= 1
	if i >= MemoryHeapFlagBits(len(_MemoryHeapFlagBits_index)-1) {
		return "MemoryHeapFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _MemoryHeapFlagBits_name[_MemoryHeapFlagBits_index[i]:_MemoryHeapFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD-0]
	_ = x[MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD-1]
	_ = x[MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD-2]
}

const _MemoryOverallocationBehaviorAMD_name = "MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMDMEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMDMEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD"

var _MemoryOverallocationBehaviorAMD_index = [...]uint8{0, 42, 84, 129}

func (i MemoryOverallocationBehaviorAMD) String() string {
	if i < 0 || i >= MemoryOverallocationBehaviorAMD(len(_MemoryOverallocationBehaviorAMD_index)-1) {
		return "MemoryOverallocationBehaviorAMD(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MemoryOverallocationBehaviorAMD_name[_MemoryOverallocationBehaviorAMD_index[i]:_MemoryOverallocationBehaviorAMD_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MEMORY_PROPERTY_DEVICE_LOCAL_BIT-1]
	_ = x[MEMORY_PROPERTY_HOST_VISIBLE_BIT-2]
	_ = x[MEMORY_PROPERTY_HOST_COHERENT_BIT-4]
	_ = x[MEMORY_PROPERTY_HOST_CACHED_BIT-8]
	_ = x[MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT-16]
	_ = x[MEMORY_PROPERTY_PROTECTED_BIT-32]
	_ = x[MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD-1000229000]
	_ = x[MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD-1000229000]
	_ = x[MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV-1000371000]
}

const (
	_MemoryPropertyFlagBits_name_0 = "MEMORY_PROPERTY_DEVICE_LOCAL_BITMEMORY_PROPERTY_HOST_VISIBLE_BIT"
	_MemoryPropertyFlagBits_name_1 = "MEMORY_PROPERTY_HOST_COHERENT_BIT"
	_MemoryPropertyFlagBits_name_2 = "MEMORY_PROPERTY_HOST_CACHED_BIT"
	_MemoryPropertyFlagBits_name_3 = "MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT"
	_MemoryPropertyFlagBits_name_4 = "MEMORY_PROPERTY_PROTECTED_BIT"
	_MemoryPropertyFlagBits_name_5 = "MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD"
	_MemoryPropertyFlagBits_name_6 = "MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV"
)

var (
	_MemoryPropertyFlagBits_index_0 = [...]uint8{0, 32, 64}
)

func (i MemoryPropertyFlagBits) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _MemoryPropertyFlagBits_name_0[_MemoryPropertyFlagBits_index_0[i]:_MemoryPropertyFlagBits_index_0[i+1]]
	case i == 4:
		return _MemoryPropertyFlagBits_name_1
	case i == 8:
		return _MemoryPropertyFlagBits_name_2
	case i == 16:
		return _MemoryPropertyFlagBits_name_3
	case i == 32:
		return _MemoryPropertyFlagBits_name_4
	case i == 1000229000:
		return _MemoryPropertyFlagBits_name_5
	case i == 1000371000:
		return _MemoryPropertyFlagBits_name_6
	default:
		return "MemoryPropertyFlagBits(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT-1]
}

const _MicromapCreateFlagBitsEXT_name = "MICROMAP_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT"

var _MicromapCreateFlagBitsEXT_index = [...]uint8{0, 53}

func (i MicromapCreateFlagBitsEXT) String() string {
	i -= 1
	if i >= MicromapCreateFlagBitsEXT(len(_MicromapCreateFlagBitsEXT_index)-1) {
		return "MicromapCreateFlagBitsEXT(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _MicromapCreateFlagBitsEXT_name[_MicromapCreateFlagBitsEXT_index[i]:_MicromapCreateFlagBitsEXT_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MICROMAP_TYPE_OPACITY_MICROMAP_EXT-0]
}

const _MicromapTypeEXT_name = "MICROMAP_TYPE_OPACITY_MICROMAP_EXT"

var _MicromapTypeEXT_index = [...]uint8{0, 34}

func (i MicromapTypeEXT) String() string {
	if i < 0 || i >= MicromapTypeEXT(len(_MicromapTypeEXT_index)-1) {
		return "MicromapTypeEXT(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MicromapTypeEXT_name[_MicromapTypeEXT_index[i]:_MicromapTypeEXT_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OBJECT_TYPE_UNKNOWN-0]
	_ = x[OBJECT_TYPE_INSTANCE-1]
	_ = x[OBJECT_TYPE_PHYSICAL_DEVICE-2]
	_ = x[OBJECT_TYPE_DEVICE-3]
	_ = x[OBJECT_TYPE_QUEUE-4]
	_ = x[OBJECT_TYPE_SEMAPHORE-5]
	_ = x[OBJECT_TYPE_COMMAND_BUFFER-6]
	_ = x[OBJECT_TYPE_FENCE-7]
	_ = x[OBJECT_TYPE_DEVICE_MEMORY-8]
	_ = x[OBJECT_TYPE_BUFFER-9]
	_ = x[OBJECT_TYPE_IMAGE-10]
	_ = x[OBJECT_TYPE_EVENT-11]
	_ = x[OBJECT_TYPE_QUERY_POOL-12]
	_ = x[OBJECT_TYPE_BUFFER_VIEW-13]
	_ = x[OBJECT_TYPE_IMAGE_VIEW-14]
	_ = x[OBJECT_TYPE_SHADER_MODULE-15]
	_ = x[OBJECT_TYPE_PIPELINE_CACHE-16]
	_ = x[OBJECT_TYPE_PIPELINE_LAYOUT-17]
	_ = x[OBJECT_TYPE_RENDER_PASS-18]
	_ = x[OBJECT_TYPE_PIPELINE-19]
	_ = x[OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT-20]
	_ = x[OBJECT_TYPE_SAMPLER-21]
	_ = x[OBJECT_TYPE_DESCRIPTOR_POOL-22]
	_ = x[OBJECT_TYPE_DESCRIPTOR_SET-23]
	_ = x[OBJECT_TYPE_FRAMEBUFFER-24]
	_ = x[OBJECT_TYPE_COMMAND_POOL-25]
	_ = x[OBJECT_TYPE_SURFACE_KHR-1000000000]
	_ = x[OBJECT_TYPE_SWAPCHAIN_KHR-1000001000]
	_ = x[OBJECT_TYPE_DISPLAY_KHR-1000002000]
	_ = x[OBJECT_TYPE_DISPLAY_MODE_KHR-1000002001]
	_ = x[OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT-1000011000]
	_ = x[OBJECT_TYPE_VIDEO_SESSION_KHR-1000023000]
	_ = x[OBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHR-1000023001]
	_ = x[OBJECT_TYPE_CU_MODULE_NVX-1000029000]
	_ = x[OBJECT_TYPE_CU_FUNCTION_NVX-1000029001]
	_ = x[OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE-1000085000]
	_ = x[OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT-1000128000]
	_ = x[OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR-1000150000]
	_ = x[OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION-1000156000]
	_ = x[OBJECT_TYPE_VALIDATION_CACHE_EXT-1000160000]
	_ = x[OBJECT_TYPE_ACCELERATION_STRUCTURE_NV-1000165000]
	_ = x[OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL-1000210000]
	_ = x[OBJECT_TYPE_DEFERRED_OPERATION_KHR-1000268000]
	_ = x[OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV-1000277000]
	_ = x[OBJECT_TYPE_PRIVATE_DATA_SLOT-1000295000]
	_ = x[OBJECT_TYPE_MICROMAP_EXT-1000396000]
	_ = x[OBJECT_TYPE_OPTICAL_FLOW_SESSION_NV-1000464000]
	_ = x[OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR-1000085000]
	_ = x[OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT-1000295000]
	_ = x[OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR-1000156000]
}

const _ObjectType_name = "OBJECT_TYPE_UNKNOWNOBJECT_TYPE_INSTANCEOBJECT_TYPE_PHYSICAL_DEVICEOBJECT_TYPE_DEVICEOBJECT_TYPE_QUEUEOBJECT_TYPE_SEMAPHOREOBJECT_TYPE_COMMAND_BUFFEROBJECT_TYPE_FENCEOBJECT_TYPE_DEVICE_MEMORYOBJECT_TYPE_BUFFEROBJECT_TYPE_IMAGEOBJECT_TYPE_EVENTOBJECT_TYPE_QUERY_POOLOBJECT_TYPE_BUFFER_VIEWOBJECT_TYPE_IMAGE_VIEWOBJECT_TYPE_SHADER_MODULEOBJECT_TYPE_PIPELINE_CACHEOBJECT_TYPE_PIPELINE_LAYOUTOBJECT_TYPE_RENDER_PASSOBJECT_TYPE_PIPELINEOBJECT_TYPE_DESCRIPTOR_SET_LAYOUTOBJECT_TYPE_SAMPLEROBJECT_TYPE_DESCRIPTOR_POOLOBJECT_TYPE_DESCRIPTOR_SETOBJECT_TYPE_FRAMEBUFFEROBJECT_TYPE_COMMAND_POOLOBJECT_TYPE_SURFACE_KHROBJECT_TYPE_SWAPCHAIN_KHROBJECT_TYPE_DISPLAY_KHROBJECT_TYPE_DISPLAY_MODE_KHROBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXTOBJECT_TYPE_VIDEO_SESSION_KHROBJECT_TYPE_VIDEO_SESSION_PARAMETERS_KHROBJECT_TYPE_CU_MODULE_NVXOBJECT_TYPE_CU_FUNCTION_NVXOBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATEOBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXTOBJECT_TYPE_ACCELERATION_STRUCTURE_KHROBJECT_TYPE_SAMPLER_YCBCR_CONVERSIONOBJECT_TYPE_VALIDATION_CACHE_EXTOBJECT_TYPE_ACCELERATION_STRUCTURE_NVOBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTELOBJECT_TYPE_DEFERRED_OPERATION_KHROBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NVOBJECT_TYPE_PRIVATE_DATA_SLOTOBJECT_TYPE_MICROMAP_EXTOBJECT_TYPE_OPTICAL_FLOW_SESSION_NV"

var _ObjectType_map = map[ObjectType]string{
	0:          _ObjectType_name[0:19],
	1:          _ObjectType_name[19:39],
	2:          _ObjectType_name[39:66],
	3:          _ObjectType_name[66:84],
	4:          _ObjectType_name[84:101],
	5:          _ObjectType_name[101:122],
	6:          _ObjectType_name[122:148],
	7:          _ObjectType_name[148:165],
	8:          _ObjectType_name[165:190],
	9:          _ObjectType_name[190:208],
	10:         _ObjectType_name[208:225],
	11:         _ObjectType_name[225:242],
	12:         _ObjectType_name[242:264],
	13:         _ObjectType_name[264:287],
	14:         _ObjectType_name[287:309],
	15:         _ObjectType_name[309:334],
	16:         _ObjectType_name[334:360],
	17:         _ObjectType_name[360:387],
	18:         _ObjectType_name[387:410],
	19:         _ObjectType_name[410:430],
	20:         _ObjectType_name[430:463],
	21:         _ObjectType_name[463:482],
	22:         _ObjectType_name[482:509],
	23:         _ObjectType_name[509:535],
	24:         _ObjectType_name[535:558],
	25:         _ObjectType_name[558:582],
	1000000000: _ObjectType_name[582:605],
	1000001000: _ObjectType_name[605:630],
	1000002000: _ObjectType_name[630:653],
	1000002001: _ObjectType_name[653:681],
	1000011000: _ObjectType_name[681:718],
	1000023000: _ObjectType_name[718:747],
	1000023001: _ObjectType_name[747:787],
	1000029000: _ObjectType_name[787:812],
	1000029001: _ObjectType_name[812:839],
	1000085000: _ObjectType_name[839:877],
	1000128000: _ObjectType_name[877:914],
	1000150000: _ObjectType_name[914:952],
	1000156000: _ObjectType_name[952:988],
	1000160000: _ObjectType_name[988:1020],
	1000165000: _ObjectType_name[1020:1057],
	1000210000: _ObjectType_name[1057:1100],
	1000268000: _ObjectType_name[1100:1134],
	1000277000: _ObjectType_name[1134:1173],
	1000295000: _ObjectType_name[1173:1202],
	1000396000: _ObjectType_name[1202:1226],
	1000464000: _ObjectType_name[1226:1261],
}

func (i ObjectType) String() string {
	if str, ok := _ObjectType_map[i]; ok {
		return str
	}
	return "ObjectType(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OPACITY_MICROMAP_FORMAT_2_STATE_EXT-1]
	_ = x[OPACITY_MICROMAP_FORMAT_4_STATE_EXT-2]
}

const _OpacityMicromapFormatEXT_name = "OPACITY_MICROMAP_FORMAT_2_STATE_EXTOPACITY_MICROMAP_FORMAT_4_STATE_EXT"

var _OpacityMicromapFormatEXT_index = [...]uint8{0, 35, 70}

func (i OpacityMicromapFormatEXT) String() string {
	i -= 1
	if i < 0 || i >= OpacityMicromapFormatEXT(len(_OpacityMicromapFormatEXT_index)-1) {
		return "OpacityMicromapFormatEXT(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _OpacityMicromapFormatEXT_name[_OpacityMicromapFormatEXT_index[i]:_OpacityMicromapFormatEXT_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT - -4]
	_ = x[OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT - -3]
	_ = x[OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT - -2]
	_ = x[OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT - -1]
}

const _OpacityMicromapSpecialIndexEXT_name = "OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXTOPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXTOPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXTOPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT"

var _OpacityMicromapSpecialIndexEXT_index = [...]uint8{0, 55, 115, 162, 214}

func (i OpacityMicromapSpecialIndexEXT) String() string {
	i -= -4
	if i < 0 || i >= OpacityMicromapSpecialIndexEXT(len(_OpacityMicromapSpecialIndexEXT_index)-1) {
		return "OpacityMicromapSpecialIndexEXT(" + strconv.FormatInt(int64(i+-4), 10) + ")"
	}
	return _OpacityMicromapSpecialIndexEXT_name[_OpacityMicromapSpecialIndexEXT_index[i]:_OpacityMicromapSpecialIndexEXT_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV-1]
}

const _OpticalFlowExecuteFlagBitsNV_name = "OPTICAL_FLOW_EXECUTE_DISABLE_TEMPORAL_HINTS_BIT_NV"

var _OpticalFlowExecuteFlagBitsNV_index = [...]uint8{0, 50}

func (i OpticalFlowExecuteFlagBitsNV) String() string {
	i -= 1
	if i >= OpticalFlowExecuteFlagBitsNV(len(_OpticalFlowExecuteFlagBitsNV_index)-1) {
		return "OpticalFlowExecuteFlagBitsNV(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _OpticalFlowExecuteFlagBitsNV_name[_OpticalFlowExecuteFlagBitsNV_index[i]:_OpticalFlowExecuteFlagBitsNV_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NV-0]
	_ = x[OPTICAL_FLOW_GRID_SIZE_1X1_BIT_NV-1]
	_ = x[OPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV-2]
	_ = x[OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV-4]
	_ = x[OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV-8]
}

const (
	_OpticalFlowGridSizeFlagBitsNV_name_0 = "OPTICAL_FLOW_GRID_SIZE_UNKNOWN_NVOPTICAL_FLOW_GRID_SIZE_1X1_BIT_NVOPTICAL_FLOW_GRID_SIZE_2X2_BIT_NV"
	_OpticalFlowGridSizeFlagBitsNV_name_1 = "OPTICAL_FLOW_GRID_SIZE_4X4_BIT_NV"
	_OpticalFlowGridSizeFlagBitsNV_name_2 = "OPTICAL_FLOW_GRID_SIZE_8X8_BIT_NV"
)

var (
	_OpticalFlowGridSizeFlagBitsNV_index_0 = [...]uint8{0, 33, 66, 99}
)

func (i OpticalFlowGridSizeFlagBitsNV) String() string {
	switch {
	case i <= 2:
		return _OpticalFlowGridSizeFlagBitsNV_name_0[_OpticalFlowGridSizeFlagBitsNV_index_0[i]:_OpticalFlowGridSizeFlagBitsNV_index_0[i+1]]
	case i == 4:
		return _OpticalFlowGridSizeFlagBitsNV_name_1
	case i == 8:
		return _OpticalFlowGridSizeFlagBitsNV_name_2
	default:
		return "OpticalFlowGridSizeFlagBitsNV(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV-0]
	_ = x[OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV-1]
	_ = x[OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV-2]
	_ = x[OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV-3]
}

const _OpticalFlowPerformanceLevelNV_name = "OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NVOPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NVOPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NVOPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV"

var _OpticalFlowPerformanceLevelNV_index = [...]uint8{0, 41, 79, 119, 157}

func (i OpticalFlowPerformanceLevelNV) String() string {
	if i < 0 || i >= OpticalFlowPerformanceLevelNV(len(_OpticalFlowPerformanceLevelNV_index)-1) {
		return "OpticalFlowPerformanceLevelNV(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _OpticalFlowPerformanceLevelNV_name[_OpticalFlowPerformanceLevelNV_index[i]:_OpticalFlowPerformanceLevelNV_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV-0]
	_ = x[OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV-1]
	_ = x[OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV-2]
	_ = x[OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV-3]
	_ = x[OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV-4]
	_ = x[OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV-5]
	_ = x[OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV-6]
	_ = x[OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV-7]
	_ = x[OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV-8]
}

const _OpticalFlowSessionBindingPointNV_name = "OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NVOPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NVOPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NVOPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NVOPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NVOPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NVOPTICAL_FLOW_SESSION_BINDING_POINT_COST_NVOPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NVOPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV"

var _OpticalFlowSessionBindingPointNV_index = [...]uint16{0, 45, 88, 135, 177, 226, 284, 326, 377, 426}

func (i OpticalFlowSessionBindingPointNV) String() string {
	if i < 0 || i >= OpticalFlowSessionBindingPointNV(len(_OpticalFlowSessionBindingPointNV_index)-1) {
		return "OpticalFlowSessionBindingPointNV(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _OpticalFlowSessionBindingPointNV_name[_OpticalFlowSessionBindingPointNV_index[i]:_OpticalFlowSessionBindingPointNV_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NV-1]
	_ = x[OPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV-2]
	_ = x[OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV-4]
	_ = x[OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV-8]
	_ = x[OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV-16]
}

const (
	_OpticalFlowSessionCreateFlagBitsNV_name_0 = "OPTICAL_FLOW_SESSION_CREATE_ENABLE_HINT_BIT_NVOPTICAL_FLOW_SESSION_CREATE_ENABLE_COST_BIT_NV"
	_OpticalFlowSessionCreateFlagBitsNV_name_1 = "OPTICAL_FLOW_SESSION_CREATE_ENABLE_GLOBAL_FLOW_BIT_NV"
	_OpticalFlowSessionCreateFlagBitsNV_name_2 = "OPTICAL_FLOW_SESSION_CREATE_ALLOW_REGIONS_BIT_NV"
	_OpticalFlowSessionCreateFlagBitsNV_name_3 = "OPTICAL_FLOW_SESSION_CREATE_BOTH_DIRECTIONS_BIT_NV"
)

var (
	_OpticalFlowSessionCreateFlagBitsNV_index_0 = [...]uint8{0, 46, 92}
)

func (i OpticalFlowSessionCreateFlagBitsNV) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _OpticalFlowSessionCreateFlagBitsNV_name_0[_OpticalFlowSessionCreateFlagBitsNV_index_0[i]:_OpticalFlowSessionCreateFlagBitsNV_index_0[i+1]]
	case i == 4:
		return _OpticalFlowSessionCreateFlagBitsNV_name_1
	case i == 8:
		return _OpticalFlowSessionCreateFlagBitsNV_name_2
	case i == 16:
		return _OpticalFlowSessionCreateFlagBitsNV_name_3
	default:
		return "OpticalFlowSessionCreateFlagBitsNV(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
