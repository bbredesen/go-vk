// Code generated by "stringer -output=enum_string_5.go -type=ProvokingVertexModeEXT,QueryControlFlagBits,QueryPipelineStatisticFlagBits,QueryPoolSamplingModeINTEL,QueryResultFlagBits,QueryResultStatusKHR,QueryType,QueueFlagBits,QueueGlobalPriorityKHR,RasterizationOrderAMD,RayTracingInvocationReorderModeNV,RayTracingShaderGroupTypeKHR,RenderPassCreateFlagBits,RenderingFlagBits,ResolveModeFlagBits,Result,SampleCountFlagBits,SamplerAddressMode,SamplerCreateFlagBits,SamplerMipmapMode,SamplerReductionMode,SamplerYcbcrModelConversion,SamplerYcbcrRange,ScopeNV,SemaphoreImportFlagBits,SemaphoreType,SemaphoreWaitFlagBits,ShaderFloatControlsIndependence,ShaderGroupShaderKHR,ShaderInfoTypeAMD,ShaderStageFlagBits"; DO NOT EDIT.

package vk

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT-0]
	_ = x[PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT-1]
}

const _ProvokingVertexModeEXT_name = "PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXTPROVOKING_VERTEX_MODE_LAST_VERTEX_EXT"

var _ProvokingVertexModeEXT_index = [...]uint8{0, 38, 75}

func (i ProvokingVertexModeEXT) String() string {
	if i < 0 || i >= ProvokingVertexModeEXT(len(_ProvokingVertexModeEXT_index)-1) {
		return "ProvokingVertexModeEXT(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ProvokingVertexModeEXT_name[_ProvokingVertexModeEXT_index[i]:_ProvokingVertexModeEXT_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[QUERY_CONTROL_PRECISE_BIT-1]
}

const _QueryControlFlagBits_name = "QUERY_CONTROL_PRECISE_BIT"

var _QueryControlFlagBits_index = [...]uint8{0, 25}

func (i QueryControlFlagBits) String() string {
	i -= 1
	if i >= QueryControlFlagBits(len(_QueryControlFlagBits_index)-1) {
		return "QueryControlFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _QueryControlFlagBits_name[_QueryControlFlagBits_index[i]:_QueryControlFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT-1]
	_ = x[QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT-2]
	_ = x[QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT-1024]
	_ = x[QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT-4]
	_ = x[QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT-8]
	_ = x[QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT-16]
	_ = x[QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT-32]
	_ = x[QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT-64]
	_ = x[QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT-128]
	_ = x[QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT-256]
	_ = x[QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT-512]
	_ = x[QUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXT-1000328000]
	_ = x[QUERY_PIPELINE_STATISTIC_TASK_SHADER_INVOCATIONS_BIT_EXT-1000328000]
	_ = x[QUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI-1000404000]
}

const _QueryPipelineStatisticFlagBits_name = "QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BITQUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BITQUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BITQUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BITQUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BITQUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BITQUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BITQUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BITQUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BITQUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BITQUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BITQUERY_PIPELINE_STATISTIC_MESH_SHADER_INVOCATIONS_BIT_EXTQUERY_PIPELINE_STATISTIC_CLUSTER_CULLING_SHADER_INVOCATIONS_BIT_HUAWEI"

var _QueryPipelineStatisticFlagBits_map = map[QueryPipelineStatisticFlagBits]string{
	1:          _QueryPipelineStatisticFlagBits_name[0:52],
	2:          _QueryPipelineStatisticFlagBits_name[52:106],
	4:          _QueryPipelineStatisticFlagBits_name[106:160],
	8:          _QueryPipelineStatisticFlagBits_name[160:216],
	16:         _QueryPipelineStatisticFlagBits_name[216:271],
	32:         _QueryPipelineStatisticFlagBits_name[271:320],
	64:         _QueryPipelineStatisticFlagBits_name[320:368],
	128:        _QueryPipelineStatisticFlagBits_name[368:424],
	256:        _QueryPipelineStatisticFlagBits_name[424:488],
	512:        _QueryPipelineStatisticFlagBits_name[488:559],
	1024:       _QueryPipelineStatisticFlagBits_name[559:614],
	1000328000: _QueryPipelineStatisticFlagBits_name[614:670],
	1000404000: _QueryPipelineStatisticFlagBits_name[670:740],
}

func (i QueryPipelineStatisticFlagBits) String() string {
	if str, ok := _QueryPipelineStatisticFlagBits_map[i]; ok {
		return str
	}
	return "QueryPipelineStatisticFlagBits(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL-0]
}

const _QueryPoolSamplingModeINTEL_name = "QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL"

var _QueryPoolSamplingModeINTEL_index = [...]uint8{0, 37}

func (i QueryPoolSamplingModeINTEL) String() string {
	if i < 0 || i >= QueryPoolSamplingModeINTEL(len(_QueryPoolSamplingModeINTEL_index)-1) {
		return "QueryPoolSamplingModeINTEL(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _QueryPoolSamplingModeINTEL_name[_QueryPoolSamplingModeINTEL_index[i]:_QueryPoolSamplingModeINTEL_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[QUERY_RESULT_64_BIT-1]
	_ = x[QUERY_RESULT_WAIT_BIT-2]
	_ = x[QUERY_RESULT_WITH_AVAILABILITY_BIT-4]
	_ = x[QUERY_RESULT_PARTIAL_BIT-8]
	_ = x[QUERY_RESULT_WITH_STATUS_BIT_KHR-1000023000]
}

const (
	_QueryResultFlagBits_name_0 = "QUERY_RESULT_64_BITQUERY_RESULT_WAIT_BIT"
	_QueryResultFlagBits_name_1 = "QUERY_RESULT_WITH_AVAILABILITY_BIT"
	_QueryResultFlagBits_name_2 = "QUERY_RESULT_PARTIAL_BIT"
	_QueryResultFlagBits_name_3 = "QUERY_RESULT_WITH_STATUS_BIT_KHR"
)

var (
	_QueryResultFlagBits_index_0 = [...]uint8{0, 19, 40}
)

func (i QueryResultFlagBits) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _QueryResultFlagBits_name_0[_QueryResultFlagBits_index_0[i]:_QueryResultFlagBits_index_0[i+1]]
	case i == 4:
		return _QueryResultFlagBits_name_1
	case i == 8:
		return _QueryResultFlagBits_name_2
	case i == 1000023000:
		return _QueryResultFlagBits_name_3
	default:
		return "QueryResultFlagBits(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[QUERY_RESULT_STATUS_ERROR_KHR - -1]
	_ = x[QUERY_RESULT_STATUS_NOT_READY_KHR-0]
	_ = x[QUERY_RESULT_STATUS_COMPLETE_KHR-1]
}

const _QueryResultStatusKHR_name = "QUERY_RESULT_STATUS_ERROR_KHRQUERY_RESULT_STATUS_NOT_READY_KHRQUERY_RESULT_STATUS_COMPLETE_KHR"

var _QueryResultStatusKHR_index = [...]uint8{0, 29, 62, 94}

func (i QueryResultStatusKHR) String() string {
	i -= -1
	if i < 0 || i >= QueryResultStatusKHR(len(_QueryResultStatusKHR_index)-1) {
		return "QueryResultStatusKHR(" + strconv.FormatInt(int64(i+-1), 10) + ")"
	}
	return _QueryResultStatusKHR_name[_QueryResultStatusKHR_index[i]:_QueryResultStatusKHR_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[QUERY_TYPE_OCCLUSION-0]
	_ = x[QUERY_TYPE_PIPELINE_STATISTICS-1]
	_ = x[QUERY_TYPE_TIMESTAMP-2]
	_ = x[QUERY_TYPE_RESULT_STATUS_ONLY_KHR-1000023000]
	_ = x[QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT-1000028004]
	_ = x[QUERY_TYPE_PERFORMANCE_QUERY_KHR-1000116000]
	_ = x[QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR-1000150000]
	_ = x[QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR-1000150001]
	_ = x[QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV-1000165000]
	_ = x[QUERY_TYPE_PERFORMANCE_QUERY_INTEL-1000210000]
	_ = x[QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT-1000328000]
	_ = x[QUERY_TYPE_PRIMITIVES_GENERATED_EXT-1000382000]
	_ = x[QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR-1000386000]
	_ = x[QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR-1000386001]
	_ = x[QUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXT-1000396000]
	_ = x[QUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT-1000396001]
}

const _QueryType_name = "QUERY_TYPE_OCCLUSIONQUERY_TYPE_PIPELINE_STATISTICSQUERY_TYPE_TIMESTAMPQUERY_TYPE_RESULT_STATUS_ONLY_KHRQUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXTQUERY_TYPE_PERFORMANCE_QUERY_KHRQUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHRQUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHRQUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NVQUERY_TYPE_PERFORMANCE_QUERY_INTELQUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXTQUERY_TYPE_PRIMITIVES_GENERATED_EXTQUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHRQUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHRQUERY_TYPE_MICROMAP_SERIALIZATION_SIZE_EXTQUERY_TYPE_MICROMAP_COMPACTED_SIZE_EXT"

var _QueryType_map = map[QueryType]string{
	0:          _QueryType_name[0:20],
	1:          _QueryType_name[20:50],
	2:          _QueryType_name[50:70],
	1000023000: _QueryType_name[70:103],
	1000028004: _QueryType_name[103:143],
	1000116000: _QueryType_name[143:175],
	1000150000: _QueryType_name[175:227],
	1000150001: _QueryType_name[227:283],
	1000165000: _QueryType_name[283:334],
	1000210000: _QueryType_name[334:368],
	1000328000: _QueryType_name[368:408],
	1000382000: _QueryType_name[408:443],
	1000386000: _QueryType_name[443:516],
	1000386001: _QueryType_name[516:558],
	1000396000: _QueryType_name[558:600],
	1000396001: _QueryType_name[600:638],
}

func (i QueryType) String() string {
	if str, ok := _QueryType_map[i]; ok {
		return str
	}
	return "QueryType(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[QUEUE_GRAPHICS_BIT-1]
	_ = x[QUEUE_COMPUTE_BIT-2]
	_ = x[QUEUE_TRANSFER_BIT-4]
	_ = x[QUEUE_SPARSE_BINDING_BIT-8]
	_ = x[QUEUE_PROTECTED_BIT-16]
	_ = x[QUEUE_VIDEO_DECODE_BIT_KHR-1000024000]
	_ = x[QUEUE_OPTICAL_FLOW_BIT_NV-1000464000]
}

const (
	_QueueFlagBits_name_0 = "QUEUE_GRAPHICS_BITQUEUE_COMPUTE_BIT"
	_QueueFlagBits_name_1 = "QUEUE_TRANSFER_BIT"
	_QueueFlagBits_name_2 = "QUEUE_SPARSE_BINDING_BIT"
	_QueueFlagBits_name_3 = "QUEUE_PROTECTED_BIT"
	_QueueFlagBits_name_4 = "QUEUE_VIDEO_DECODE_BIT_KHR"
	_QueueFlagBits_name_5 = "QUEUE_OPTICAL_FLOW_BIT_NV"
)

var (
	_QueueFlagBits_index_0 = [...]uint8{0, 18, 35}
)

func (i QueueFlagBits) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _QueueFlagBits_name_0[_QueueFlagBits_index_0[i]:_QueueFlagBits_index_0[i+1]]
	case i == 4:
		return _QueueFlagBits_name_1
	case i == 8:
		return _QueueFlagBits_name_2
	case i == 16:
		return _QueueFlagBits_name_3
	case i == 1000024000:
		return _QueueFlagBits_name_4
	case i == 1000464000:
		return _QueueFlagBits_name_5
	default:
		return "QueueFlagBits(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[QUEUE_GLOBAL_PRIORITY_LOW_KHR-128]
	_ = x[QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR-256]
	_ = x[QUEUE_GLOBAL_PRIORITY_HIGH_KHR-512]
	_ = x[QUEUE_GLOBAL_PRIORITY_REALTIME_KHR-1024]
	_ = x[QUEUE_GLOBAL_PRIORITY_HIGH_EXT-512]
	_ = x[QUEUE_GLOBAL_PRIORITY_LOW_EXT-128]
	_ = x[QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT-256]
	_ = x[QUEUE_GLOBAL_PRIORITY_REALTIME_EXT-1024]
}

const (
	_QueueGlobalPriorityKHR_name_0 = "QUEUE_GLOBAL_PRIORITY_LOW_KHR"
	_QueueGlobalPriorityKHR_name_1 = "QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR"
	_QueueGlobalPriorityKHR_name_2 = "QUEUE_GLOBAL_PRIORITY_HIGH_KHR"
	_QueueGlobalPriorityKHR_name_3 = "QUEUE_GLOBAL_PRIORITY_REALTIME_KHR"
)

func (i QueueGlobalPriorityKHR) String() string {
	switch {
	case i == 128:
		return _QueueGlobalPriorityKHR_name_0
	case i == 256:
		return _QueueGlobalPriorityKHR_name_1
	case i == 512:
		return _QueueGlobalPriorityKHR_name_2
	case i == 1024:
		return _QueueGlobalPriorityKHR_name_3
	default:
		return "QueueGlobalPriorityKHR(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[RASTERIZATION_ORDER_STRICT_AMD-0]
	_ = x[RASTERIZATION_ORDER_RELAXED_AMD-1]
}

const _RasterizationOrderAMD_name = "RASTERIZATION_ORDER_STRICT_AMDRASTERIZATION_ORDER_RELAXED_AMD"

var _RasterizationOrderAMD_index = [...]uint8{0, 30, 61}

func (i RasterizationOrderAMD) String() string {
	if i < 0 || i >= RasterizationOrderAMD(len(_RasterizationOrderAMD_index)-1) {
		return "RasterizationOrderAMD(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _RasterizationOrderAMD_name[_RasterizationOrderAMD_index[i]:_RasterizationOrderAMD_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV-0]
	_ = x[RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV-1]
}

const _RayTracingInvocationReorderModeNV_name = "RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NVRAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV"

var _RayTracingInvocationReorderModeNV_index = [...]uint8{0, 43, 89}

func (i RayTracingInvocationReorderModeNV) String() string {
	if i < 0 || i >= RayTracingInvocationReorderModeNV(len(_RayTracingInvocationReorderModeNV_index)-1) {
		return "RayTracingInvocationReorderModeNV(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _RayTracingInvocationReorderModeNV_name[_RayTracingInvocationReorderModeNV_index[i]:_RayTracingInvocationReorderModeNV_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR-0]
	_ = x[RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR-1]
	_ = x[RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR-2]
	_ = x[RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV-0]
	_ = x[RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV-2]
	_ = x[RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV-1]
}

const _RayTracingShaderGroupTypeKHR_name = "RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHRRAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHRRAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR"

var _RayTracingShaderGroupTypeKHR_index = [...]uint8{0, 41, 94, 148}

func (i RayTracingShaderGroupTypeKHR) String() string {
	if i < 0 || i >= RayTracingShaderGroupTypeKHR(len(_RayTracingShaderGroupTypeKHR_index)-1) {
		return "RayTracingShaderGroupTypeKHR(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _RayTracingShaderGroupTypeKHR_name[_RayTracingShaderGroupTypeKHR_index[i]:_RayTracingShaderGroupTypeKHR_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM-1000282000]
}

const _RenderPassCreateFlagBits_name = "RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM"

var _RenderPassCreateFlagBits_index = [...]uint8{0, 37}

func (i RenderPassCreateFlagBits) String() string {
	i -= 1000282000
	if i >= RenderPassCreateFlagBits(len(_RenderPassCreateFlagBits_index)-1) {
		return "RenderPassCreateFlagBits(" + strconv.FormatInt(int64(i+1000282000), 10) + ")"
	}
	return _RenderPassCreateFlagBits_name[_RenderPassCreateFlagBits_index[i]:_RenderPassCreateFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT-1]
	_ = x[RENDERING_SUSPENDING_BIT-2]
	_ = x[RENDERING_RESUMING_BIT-4]
	_ = x[RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT-1000465000]
	_ = x[RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR-1]
	_ = x[RENDERING_RESUMING_BIT_KHR-4]
	_ = x[RENDERING_SUSPENDING_BIT_KHR-2]
}

const (
	_RenderingFlagBits_name_0 = "RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BITRENDERING_SUSPENDING_BIT"
	_RenderingFlagBits_name_1 = "RENDERING_RESUMING_BIT"
	_RenderingFlagBits_name_2 = "RENDERING_ENABLE_LEGACY_DITHERING_BIT_EXT"
)

var (
	_RenderingFlagBits_index_0 = [...]uint8{0, 48, 72}
)

func (i RenderingFlagBits) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _RenderingFlagBits_name_0[_RenderingFlagBits_index_0[i]:_RenderingFlagBits_index_0[i+1]]
	case i == 4:
		return _RenderingFlagBits_name_1
	case i == 1000465000:
		return _RenderingFlagBits_name_2
	default:
		return "RenderingFlagBits(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[RESOLVE_MODE_NONE-0]
	_ = x[RESOLVE_MODE_SAMPLE_ZERO_BIT-1]
	_ = x[RESOLVE_MODE_AVERAGE_BIT-2]
	_ = x[RESOLVE_MODE_MIN_BIT-4]
	_ = x[RESOLVE_MODE_MAX_BIT-8]
	_ = x[RESOLVE_MODE_AVERAGE_BIT_KHR-2]
	_ = x[RESOLVE_MODE_MAX_BIT_KHR-8]
	_ = x[RESOLVE_MODE_MIN_BIT_KHR-4]
	_ = x[RESOLVE_MODE_NONE_KHR-0]
	_ = x[RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR-1]
}

const (
	_ResolveModeFlagBits_name_0 = "RESOLVE_MODE_NONERESOLVE_MODE_SAMPLE_ZERO_BITRESOLVE_MODE_AVERAGE_BIT"
	_ResolveModeFlagBits_name_1 = "RESOLVE_MODE_MIN_BIT"
	_ResolveModeFlagBits_name_2 = "RESOLVE_MODE_MAX_BIT"
)

var (
	_ResolveModeFlagBits_index_0 = [...]uint8{0, 17, 45, 69}
)

func (i ResolveModeFlagBits) String() string {
	switch {
	case i <= 2:
		return _ResolveModeFlagBits_name_0[_ResolveModeFlagBits_index_0[i]:_ResolveModeFlagBits_index_0[i+1]]
	case i == 4:
		return _ResolveModeFlagBits_name_1
	case i == 8:
		return _ResolveModeFlagBits_name_2
	default:
		return "ResolveModeFlagBits(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ERROR_COMPRESSION_EXHAUSTED_EXT - -1000338000]
	_ = x[ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS - -1000257000]
	_ = x[ERROR_NOT_PERMITTED_KHR - -1000188001]
	_ = x[ERROR_FRAGMENTATION - -1000161000]
	_ = x[ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT - -1000158000]
	_ = x[ERROR_INVALID_EXTERNAL_HANDLE - -1000072003]
	_ = x[ERROR_OUT_OF_POOL_MEMORY - -1000069000]
	_ = x[ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR - -1000023005]
	_ = x[ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR - -1000023004]
	_ = x[ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR - -1000023003]
	_ = x[ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR - -1000023002]
	_ = x[ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR - -1000023001]
	_ = x[ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR - -1000023000]
	_ = x[ERROR_INVALID_SHADER_NV - -1000012000]
	_ = x[ERROR_VALIDATION_FAILED - -1000011001]
	_ = x[ERROR_INCOMPATIBLE_DISPLAY_KHR - -1000003001]
	_ = x[ERROR_OUT_OF_DATE_KHR - -1000001004]
	_ = x[ERROR_NATIVE_WINDOW_IN_USE_KHR - -1000000001]
	_ = x[ERROR_SURFACE_LOST_KHR - -1000000000]
	_ = x[ERROR_UNKNOWN - -13]
	_ = x[ERROR_FRAGMENTED_POOL - -12]
	_ = x[ERROR_FORMAT_NOT_SUPPORTED - -11]
	_ = x[ERROR_TOO_MANY_OBJECTS - -10]
	_ = x[ERROR_INCOMPATIBLE_DRIVER - -9]
	_ = x[ERROR_FEATURE_NOT_PRESENT - -8]
	_ = x[ERROR_EXTENSION_NOT_PRESENT - -7]
	_ = x[ERROR_LAYER_NOT_PRESENT - -6]
	_ = x[ERROR_MEMORY_MAP_FAILED - -5]
	_ = x[ERROR_DEVICE_LOST - -4]
	_ = x[ERROR_INITIALIZATION_FAILED - -3]
	_ = x[ERROR_OUT_OF_DEVICE_MEMORY - -2]
	_ = x[ERROR_OUT_OF_HOST_MEMORY - -1]
	_ = x[NOT_READY-1]
	_ = x[TIMEOUT-2]
	_ = x[EVENT_SET-3]
	_ = x[EVENT_RESET-4]
	_ = x[INCOMPLETE-5]
	_ = x[SUBOPTIMAL_KHR-1000001003]
	_ = x[THREAD_IDLE_KHR-1000268000]
	_ = x[THREAD_DONE_KHR-1000268001]
	_ = x[OPERATION_DEFERRED_KHR-1000268002]
	_ = x[OPERATION_NOT_DEFERRED_KHR-1000268003]
	_ = x[PIPELINE_COMPILE_REQUIRED-1000297000]
	_ = x[ERROR_FRAGMENTATION_EXT - -1000161000]
	_ = x[ERROR_INVALID_EXTERNAL_HANDLE_KHR - -1000072003]
	_ = x[ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR - -1000257000]
	_ = x[ERROR_INVALID_DEVICE_ADDRESS_EXT - -1000257000]
	_ = x[ERROR_NOT_PERMITTED_EXT - -1000188001]
	_ = x[ERROR_OUT_OF_POOL_MEMORY_KHR - -1000069000]
	_ = x[ERROR_VALIDATION_FAILED_EXT - -1000011001]
	_ = x[PIPELINE_COMPILE_REQUIRED_EXT-1000297000]
	_ = x[ERROR_PIPELINE_COMPILE_REQUIRED_EXT-1000297000]
	_ = x[ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT - -1000255000]
}

const _Result_name = "ERROR_COMPRESSION_EXHAUSTED_EXTERROR_INVALID_OPAQUE_CAPTURE_ADDRESSERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXTERROR_NOT_PERMITTED_KHRERROR_FRAGMENTATIONERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXTERROR_INVALID_EXTERNAL_HANDLEERROR_OUT_OF_POOL_MEMORYERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHRERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHRERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHRERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHRERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHRERROR_IMAGE_USAGE_NOT_SUPPORTED_KHRERROR_INVALID_SHADER_NVERROR_VALIDATION_FAILEDERROR_INCOMPATIBLE_DISPLAY_KHRERROR_OUT_OF_DATE_KHRERROR_NATIVE_WINDOW_IN_USE_KHRERROR_SURFACE_LOST_KHRERROR_UNKNOWNERROR_FRAGMENTED_POOLERROR_FORMAT_NOT_SUPPORTEDERROR_TOO_MANY_OBJECTSERROR_INCOMPATIBLE_DRIVERERROR_FEATURE_NOT_PRESENTERROR_EXTENSION_NOT_PRESENTERROR_LAYER_NOT_PRESENTERROR_MEMORY_MAP_FAILEDERROR_DEVICE_LOSTERROR_INITIALIZATION_FAILEDERROR_OUT_OF_DEVICE_MEMORYERROR_OUT_OF_HOST_MEMORYNOT_READYTIMEOUTEVENT_SETEVENT_RESETINCOMPLETESUBOPTIMAL_KHRTHREAD_IDLE_KHRTHREAD_DONE_KHROPERATION_DEFERRED_KHROPERATION_NOT_DEFERRED_KHRPIPELINE_COMPILE_REQUIRED"

var _Result_map = map[Result]string{
	-1000338000: _Result_name[0:31],
	-1000257000: _Result_name[31:67],
	-1000255000: _Result_name[67:108],
	-1000188001: _Result_name[108:131],
	-1000161000: _Result_name[131:150],
	-1000158000: _Result_name[150:200],
	-1000072003: _Result_name[200:229],
	-1000069000: _Result_name[229:253],
	-1000023005: _Result_name[253:294],
	-1000023004: _Result_name[294:337],
	-1000023003: _Result_name[337:381],
	-1000023002: _Result_name[381:428],
	-1000023001: _Result_name[428:472],
	-1000023000: _Result_name[472:507],
	-1000012000: _Result_name[507:530],
	-1000011001: _Result_name[530:553],
	-1000003001: _Result_name[553:583],
	-1000001004: _Result_name[583:604],
	-1000000001: _Result_name[604:634],
	-1000000000: _Result_name[634:656],
	-13:         _Result_name[656:669],
	-12:         _Result_name[669:690],
	-11:         _Result_name[690:716],
	-10:         _Result_name[716:738],
	-9:          _Result_name[738:763],
	-8:          _Result_name[763:788],
	-7:          _Result_name[788:815],
	-6:          _Result_name[815:838],
	-5:          _Result_name[838:861],
	-4:          _Result_name[861:878],
	-3:          _Result_name[878:905],
	-2:          _Result_name[905:931],
	-1:          _Result_name[931:955],
	1:           _Result_name[955:964],
	2:           _Result_name[964:971],
	3:           _Result_name[971:980],
	4:           _Result_name[980:991],
	5:           _Result_name[991:1001],
	1000001003:  _Result_name[1001:1015],
	1000268000:  _Result_name[1015:1030],
	1000268001:  _Result_name[1030:1045],
	1000268002:  _Result_name[1045:1067],
	1000268003:  _Result_name[1067:1093],
	1000297000:  _Result_name[1093:1118],
}

func (i Result) String() string {
	if str, ok := _Result_map[i]; ok {
		return str
	}
	return "Result(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SAMPLE_COUNT_1_BIT-1]
	_ = x[SAMPLE_COUNT_2_BIT-2]
	_ = x[SAMPLE_COUNT_4_BIT-4]
	_ = x[SAMPLE_COUNT_8_BIT-8]
	_ = x[SAMPLE_COUNT_16_BIT-16]
	_ = x[SAMPLE_COUNT_32_BIT-32]
	_ = x[SAMPLE_COUNT_64_BIT-64]
}

const (
	_SampleCountFlagBits_name_0 = "SAMPLE_COUNT_1_BITSAMPLE_COUNT_2_BIT"
	_SampleCountFlagBits_name_1 = "SAMPLE_COUNT_4_BIT"
	_SampleCountFlagBits_name_2 = "SAMPLE_COUNT_8_BIT"
	_SampleCountFlagBits_name_3 = "SAMPLE_COUNT_16_BIT"
	_SampleCountFlagBits_name_4 = "SAMPLE_COUNT_32_BIT"
	_SampleCountFlagBits_name_5 = "SAMPLE_COUNT_64_BIT"
)

var (
	_SampleCountFlagBits_index_0 = [...]uint8{0, 18, 36}
)

func (i SampleCountFlagBits) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _SampleCountFlagBits_name_0[_SampleCountFlagBits_index_0[i]:_SampleCountFlagBits_index_0[i+1]]
	case i == 4:
		return _SampleCountFlagBits_name_1
	case i == 8:
		return _SampleCountFlagBits_name_2
	case i == 16:
		return _SampleCountFlagBits_name_3
	case i == 32:
		return _SampleCountFlagBits_name_4
	case i == 64:
		return _SampleCountFlagBits_name_5
	default:
		return "SampleCountFlagBits(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SAMPLER_ADDRESS_MODE_REPEAT-0]
	_ = x[SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT-1]
	_ = x[SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE-2]
	_ = x[SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER-3]
	_ = x[SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE-1000014000]
	_ = x[SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR-1000014000]
}

const (
	_SamplerAddressMode_name_0 = "SAMPLER_ADDRESS_MODE_REPEATSAMPLER_ADDRESS_MODE_MIRRORED_REPEATSAMPLER_ADDRESS_MODE_CLAMP_TO_EDGESAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER"
	_SamplerAddressMode_name_1 = "SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE"
)

var (
	_SamplerAddressMode_index_0 = [...]uint8{0, 27, 63, 97, 133}
)

func (i SamplerAddressMode) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _SamplerAddressMode_name_0[_SamplerAddressMode_index_0[i]:_SamplerAddressMode_index_0[i+1]]
	case i == 1000014000:
		return _SamplerAddressMode_name_1
	default:
		return "SamplerAddressMode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SAMPLER_CREATE_SUBSAMPLED_BIT_EXT-1000218000]
	_ = x[SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT-1000218000]
	_ = x[SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT-1000316000]
	_ = x[SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT-1000422000]
	_ = x[SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM-1000440000]
}

const (
	_SamplerCreateFlagBits_name_0 = "SAMPLER_CREATE_SUBSAMPLED_BIT_EXT"
	_SamplerCreateFlagBits_name_1 = "SAMPLER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT"
	_SamplerCreateFlagBits_name_2 = "SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT"
	_SamplerCreateFlagBits_name_3 = "SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM"
)

func (i SamplerCreateFlagBits) String() string {
	switch {
	case i == 1000218000:
		return _SamplerCreateFlagBits_name_0
	case i == 1000316000:
		return _SamplerCreateFlagBits_name_1
	case i == 1000422000:
		return _SamplerCreateFlagBits_name_2
	case i == 1000440000:
		return _SamplerCreateFlagBits_name_3
	default:
		return "SamplerCreateFlagBits(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SAMPLER_MIPMAP_MODE_NEAREST-0]
	_ = x[SAMPLER_MIPMAP_MODE_LINEAR-1]
}

const _SamplerMipmapMode_name = "SAMPLER_MIPMAP_MODE_NEARESTSAMPLER_MIPMAP_MODE_LINEAR"

var _SamplerMipmapMode_index = [...]uint8{0, 27, 53}

func (i SamplerMipmapMode) String() string {
	if i < 0 || i >= SamplerMipmapMode(len(_SamplerMipmapMode_index)-1) {
		return "SamplerMipmapMode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SamplerMipmapMode_name[_SamplerMipmapMode_index[i]:_SamplerMipmapMode_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE-0]
	_ = x[SAMPLER_REDUCTION_MODE_MIN-1]
	_ = x[SAMPLER_REDUCTION_MODE_MAX-2]
	_ = x[SAMPLER_REDUCTION_MODE_MAX_EXT-2]
	_ = x[SAMPLER_REDUCTION_MODE_MIN_EXT-1]
	_ = x[SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT-0]
}

const _SamplerReductionMode_name = "SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGESAMPLER_REDUCTION_MODE_MINSAMPLER_REDUCTION_MODE_MAX"

var _SamplerReductionMode_index = [...]uint8{0, 39, 65, 91}

func (i SamplerReductionMode) String() string {
	if i < 0 || i >= SamplerReductionMode(len(_SamplerReductionMode_index)-1) {
		return "SamplerReductionMode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SamplerReductionMode_name[_SamplerReductionMode_index[i]:_SamplerReductionMode_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY-0]
	_ = x[SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY-1]
	_ = x[SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709-2]
	_ = x[SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601-3]
	_ = x[SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020-4]
	_ = x[SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR-0]
	_ = x[SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR-4]
	_ = x[SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR-3]
	_ = x[SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR-2]
	_ = x[SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR-1]
}

const _SamplerYcbcrModelConversion_name = "SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITYSAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITYSAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020"

var _SamplerYcbcrModelConversion_index = [...]uint8{0, 43, 88, 128, 168, 209}

func (i SamplerYcbcrModelConversion) String() string {
	if i < 0 || i >= SamplerYcbcrModelConversion(len(_SamplerYcbcrModelConversion_index)-1) {
		return "SamplerYcbcrModelConversion(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SamplerYcbcrModelConversion_name[_SamplerYcbcrModelConversion_index[i]:_SamplerYcbcrModelConversion_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SAMPLER_YCBCR_RANGE_ITU_FULL-0]
	_ = x[SAMPLER_YCBCR_RANGE_ITU_NARROW-1]
	_ = x[SAMPLER_YCBCR_RANGE_ITU_FULL_KHR-0]
	_ = x[SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR-1]
}

const _SamplerYcbcrRange_name = "SAMPLER_YCBCR_RANGE_ITU_FULLSAMPLER_YCBCR_RANGE_ITU_NARROW"

var _SamplerYcbcrRange_index = [...]uint8{0, 28, 58}

func (i SamplerYcbcrRange) String() string {
	if i < 0 || i >= SamplerYcbcrRange(len(_SamplerYcbcrRange_index)-1) {
		return "SamplerYcbcrRange(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SamplerYcbcrRange_name[_SamplerYcbcrRange_index[i]:_SamplerYcbcrRange_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SCOPE_DEVICE_NV-1]
	_ = x[SCOPE_WORKGROUP_NV-2]
	_ = x[SCOPE_SUBGROUP_NV-3]
	_ = x[SCOPE_QUEUE_FAMILY_NV-5]
}

const (
	_ScopeNV_name_0 = "SCOPE_DEVICE_NVSCOPE_WORKGROUP_NVSCOPE_SUBGROUP_NV"
	_ScopeNV_name_1 = "SCOPE_QUEUE_FAMILY_NV"
)

var (
	_ScopeNV_index_0 = [...]uint8{0, 15, 33, 50}
)

func (i ScopeNV) String() string {
	switch {
	case 1 <= i && i <= 3:
		i -= 1
		return _ScopeNV_name_0[_ScopeNV_index_0[i]:_ScopeNV_index_0[i+1]]
	case i == 5:
		return _ScopeNV_name_1
	default:
		return "ScopeNV(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SEMAPHORE_IMPORT_TEMPORARY_BIT-1]
	_ = x[SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR-1]
}

const _SemaphoreImportFlagBits_name = "SEMAPHORE_IMPORT_TEMPORARY_BIT"

var _SemaphoreImportFlagBits_index = [...]uint8{0, 30}

func (i SemaphoreImportFlagBits) String() string {
	i -= 1
	if i >= SemaphoreImportFlagBits(len(_SemaphoreImportFlagBits_index)-1) {
		return "SemaphoreImportFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _SemaphoreImportFlagBits_name[_SemaphoreImportFlagBits_index[i]:_SemaphoreImportFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SEMAPHORE_TYPE_BINARY-0]
	_ = x[SEMAPHORE_TYPE_TIMELINE-1]
	_ = x[SEMAPHORE_TYPE_BINARY_KHR-0]
	_ = x[SEMAPHORE_TYPE_TIMELINE_KHR-1]
}

const _SemaphoreType_name = "SEMAPHORE_TYPE_BINARYSEMAPHORE_TYPE_TIMELINE"

var _SemaphoreType_index = [...]uint8{0, 21, 44}

func (i SemaphoreType) String() string {
	if i < 0 || i >= SemaphoreType(len(_SemaphoreType_index)-1) {
		return "SemaphoreType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SemaphoreType_name[_SemaphoreType_index[i]:_SemaphoreType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SEMAPHORE_WAIT_ANY_BIT-1]
	_ = x[SEMAPHORE_WAIT_ANY_BIT_KHR-1]
}

const _SemaphoreWaitFlagBits_name = "SEMAPHORE_WAIT_ANY_BIT"

var _SemaphoreWaitFlagBits_index = [...]uint8{0, 22}

func (i SemaphoreWaitFlagBits) String() string {
	i -= 1
	if i >= SemaphoreWaitFlagBits(len(_SemaphoreWaitFlagBits_index)-1) {
		return "SemaphoreWaitFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _SemaphoreWaitFlagBits_name[_SemaphoreWaitFlagBits_index[i]:_SemaphoreWaitFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY-0]
	_ = x[SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL-1]
	_ = x[SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE-2]
	_ = x[SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR-0]
	_ = x[SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR-1]
	_ = x[SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR-2]
}

const _ShaderFloatControlsIndependence_name = "SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLYSHADER_FLOAT_CONTROLS_INDEPENDENCE_ALLSHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE"

var _ShaderFloatControlsIndependence_index = [...]uint8{0, 46, 84, 123}

func (i ShaderFloatControlsIndependence) String() string {
	if i < 0 || i >= ShaderFloatControlsIndependence(len(_ShaderFloatControlsIndependence_index)-1) {
		return "ShaderFloatControlsIndependence(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ShaderFloatControlsIndependence_name[_ShaderFloatControlsIndependence_index[i]:_ShaderFloatControlsIndependence_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SHADER_GROUP_SHADER_GENERAL_KHR-0]
	_ = x[SHADER_GROUP_SHADER_CLOSEST_HIT_KHR-1]
	_ = x[SHADER_GROUP_SHADER_ANY_HIT_KHR-2]
	_ = x[SHADER_GROUP_SHADER_INTERSECTION_KHR-3]
}

const _ShaderGroupShaderKHR_name = "SHADER_GROUP_SHADER_GENERAL_KHRSHADER_GROUP_SHADER_CLOSEST_HIT_KHRSHADER_GROUP_SHADER_ANY_HIT_KHRSHADER_GROUP_SHADER_INTERSECTION_KHR"

var _ShaderGroupShaderKHR_index = [...]uint8{0, 31, 66, 97, 133}

func (i ShaderGroupShaderKHR) String() string {
	if i < 0 || i >= ShaderGroupShaderKHR(len(_ShaderGroupShaderKHR_index)-1) {
		return "ShaderGroupShaderKHR(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ShaderGroupShaderKHR_name[_ShaderGroupShaderKHR_index[i]:_ShaderGroupShaderKHR_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SHADER_INFO_TYPE_STATISTICS_AMD-0]
	_ = x[SHADER_INFO_TYPE_BINARY_AMD-1]
	_ = x[SHADER_INFO_TYPE_DISASSEMBLY_AMD-2]
}

const _ShaderInfoTypeAMD_name = "SHADER_INFO_TYPE_STATISTICS_AMDSHADER_INFO_TYPE_BINARY_AMDSHADER_INFO_TYPE_DISASSEMBLY_AMD"

var _ShaderInfoTypeAMD_index = [...]uint8{0, 31, 58, 90}

func (i ShaderInfoTypeAMD) String() string {
	if i < 0 || i >= ShaderInfoTypeAMD(len(_ShaderInfoTypeAMD_index)-1) {
		return "ShaderInfoTypeAMD(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ShaderInfoTypeAMD_name[_ShaderInfoTypeAMD_index[i]:_ShaderInfoTypeAMD_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SHADER_STAGE_ALL_GRAPHICS-31]
	_ = x[SHADER_STAGE_ALL-2147483647]
	_ = x[SHADER_STAGE_VERTEX_BIT-1]
	_ = x[SHADER_STAGE_TESSELLATION_CONTROL_BIT-2]
	_ = x[SHADER_STAGE_TESSELLATION_EVALUATION_BIT-4]
	_ = x[SHADER_STAGE_GEOMETRY_BIT-8]
	_ = x[SHADER_STAGE_FRAGMENT_BIT-16]
	_ = x[SHADER_STAGE_COMPUTE_BIT-32]
	_ = x[SHADER_STAGE_TASK_BIT_EXT-1000328000]
	_ = x[SHADER_STAGE_MESH_BIT_EXT-1000328000]
	_ = x[SHADER_STAGE_MISS_BIT_KHR-1000347000]
	_ = x[SHADER_STAGE_CLOSEST_HIT_BIT_KHR-1000347000]
	_ = x[SHADER_STAGE_RAYGEN_BIT_KHR-1000347000]
	_ = x[SHADER_STAGE_ANY_HIT_BIT_KHR-1000347000]
	_ = x[SHADER_STAGE_INTERSECTION_BIT_KHR-1000347000]
	_ = x[SHADER_STAGE_CALLABLE_BIT_KHR-1000347000]
	_ = x[SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI-1000369000]
	_ = x[SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI-1000404000]
	_ = x[SHADER_STAGE_ANY_HIT_BIT_NV-1000347000]
	_ = x[SHADER_STAGE_CALLABLE_BIT_NV-1000347000]
	_ = x[SHADER_STAGE_CLOSEST_HIT_BIT_NV-1000347000]
	_ = x[SHADER_STAGE_INTERSECTION_BIT_NV-1000347000]
	_ = x[SHADER_STAGE_MESH_BIT_NV-1000328000]
	_ = x[SHADER_STAGE_MISS_BIT_NV-1000347000]
	_ = x[SHADER_STAGE_RAYGEN_BIT_NV-1000347000]
	_ = x[SHADER_STAGE_TASK_BIT_NV-1000328000]
}

const (
	_ShaderStageFlagBits_name_0 = "SHADER_STAGE_VERTEX_BITSHADER_STAGE_TESSELLATION_CONTROL_BIT"
	_ShaderStageFlagBits_name_1 = "SHADER_STAGE_TESSELLATION_EVALUATION_BIT"
	_ShaderStageFlagBits_name_2 = "SHADER_STAGE_GEOMETRY_BIT"
	_ShaderStageFlagBits_name_3 = "SHADER_STAGE_FRAGMENT_BIT"
	_ShaderStageFlagBits_name_4 = "SHADER_STAGE_ALL_GRAPHICSSHADER_STAGE_COMPUTE_BIT"
	_ShaderStageFlagBits_name_5 = "SHADER_STAGE_TASK_BIT_EXT"
	_ShaderStageFlagBits_name_6 = "SHADER_STAGE_MISS_BIT_KHR"
	_ShaderStageFlagBits_name_7 = "SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI"
	_ShaderStageFlagBits_name_8 = "SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI"
	_ShaderStageFlagBits_name_9 = "SHADER_STAGE_ALL"
)

var (
	_ShaderStageFlagBits_index_0 = [...]uint8{0, 23, 60}
	_ShaderStageFlagBits_index_4 = [...]uint8{0, 25, 49}
)

func (i ShaderStageFlagBits) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _ShaderStageFlagBits_name_0[_ShaderStageFlagBits_index_0[i]:_ShaderStageFlagBits_index_0[i+1]]
	case i == 4:
		return _ShaderStageFlagBits_name_1
	case i == 8:
		return _ShaderStageFlagBits_name_2
	case i == 16:
		return _ShaderStageFlagBits_name_3
	case 31 <= i && i <= 32:
		i -= 31
		return _ShaderStageFlagBits_name_4[_ShaderStageFlagBits_index_4[i]:_ShaderStageFlagBits_index_4[i+1]]
	case i == 1000328000:
		return _ShaderStageFlagBits_name_5
	case i == 1000347000:
		return _ShaderStageFlagBits_name_6
	case i == 1000369000:
		return _ShaderStageFlagBits_name_7
	case i == 1000404000:
		return _ShaderStageFlagBits_name_8
	case i == 2147483647:
		return _ShaderStageFlagBits_name_9
	default:
		return "ShaderStageFlagBits(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
