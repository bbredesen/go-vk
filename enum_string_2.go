// Code generated by "stringer -output=enum_string_2.go -type=QueryPipelineStatisticFlagBits,QueryResultFlagBits,QueryType,QueueFlagBits,Result,SampleCountFlagBits,SamplerAddressMode,SamplerMipmapMode,SamplerYcbcrModelConversion,SamplerYcbcrRange,SemaphoreImportFlagBits,ShaderStageFlagBits,SharingMode,SparseImageFormatFlagBits,SparseMemoryBindFlagBits,StencilOp,StructureType,SubgroupFeatureFlagBits,SurfaceTransformFlagBitsKHR,SystemAllocationScope,TessellationDomainOrigin,VendorId,VertexInputRate"; DO NOT EDIT.

package vk

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT-1]
}

const _QueryPipelineStatisticFlagBits_name = "QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT"

var _QueryPipelineStatisticFlagBits_index = [...]uint8{0, 52}

func (i QueryPipelineStatisticFlagBits) String() string {
	i -= 1
	if i >= QueryPipelineStatisticFlagBits(len(_QueryPipelineStatisticFlagBits_index)-1) {
		return "QueryPipelineStatisticFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _QueryPipelineStatisticFlagBits_name[_QueryPipelineStatisticFlagBits_index[i]:_QueryPipelineStatisticFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[QUERY_RESULT_64_BIT-1]
}

const _QueryResultFlagBits_name = "QUERY_RESULT_64_BIT"

var _QueryResultFlagBits_index = [...]uint8{0, 19}

func (i QueryResultFlagBits) String() string {
	i -= 1
	if i >= QueryResultFlagBits(len(_QueryResultFlagBits_index)-1) {
		return "QueryResultFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _QueryResultFlagBits_name[_QueryResultFlagBits_index[i]:_QueryResultFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[QUERY_TYPE_OCCLUSION-0]
}

const _QueryType_name = "QUERY_TYPE_OCCLUSION"

var _QueryType_index = [...]uint8{0, 20}

func (i QueryType) String() string {
	if i < 0 || i >= QueryType(len(_QueryType_index)-1) {
		return "QueryType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _QueryType_name[_QueryType_index[i]:_QueryType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[QUEUE_GRAPHICS_BIT-1]
}

const _QueueFlagBits_name = "QUEUE_GRAPHICS_BIT"

var _QueueFlagBits_index = [...]uint8{0, 18}

func (i QueueFlagBits) String() string {
	i -= 1
	if i >= QueueFlagBits(len(_QueueFlagBits_index)-1) {
		return "QueueFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _QueueFlagBits_name[_QueueFlagBits_index[i]:_QueueFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ERROR_UNKNOWN - -13]
}

const _Result_name = "ERROR_UNKNOWN"

var _Result_index = [...]uint8{0, 13}

func (i Result) String() string {
	i -= -13
	if i < 0 || i >= Result(len(_Result_index)-1) {
		return "Result(" + strconv.FormatInt(int64(i+-13), 10) + ")"
	}
	return _Result_name[_Result_index[i]:_Result_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SAMPLE_COUNT_1_BIT-1]
}

const _SampleCountFlagBits_name = "SAMPLE_COUNT_1_BIT"

var _SampleCountFlagBits_index = [...]uint8{0, 18}

func (i SampleCountFlagBits) String() string {
	i -= 1
	if i >= SampleCountFlagBits(len(_SampleCountFlagBits_index)-1) {
		return "SampleCountFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _SampleCountFlagBits_name[_SampleCountFlagBits_index[i]:_SampleCountFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SAMPLER_ADDRESS_MODE_REPEAT-0]
}

const _SamplerAddressMode_name = "SAMPLER_ADDRESS_MODE_REPEAT"

var _SamplerAddressMode_index = [...]uint8{0, 27}

func (i SamplerAddressMode) String() string {
	if i < 0 || i >= SamplerAddressMode(len(_SamplerAddressMode_index)-1) {
		return "SamplerAddressMode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SamplerAddressMode_name[_SamplerAddressMode_index[i]:_SamplerAddressMode_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SAMPLER_MIPMAP_MODE_NEAREST-0]
}

const _SamplerMipmapMode_name = "SAMPLER_MIPMAP_MODE_NEAREST"

var _SamplerMipmapMode_index = [...]uint8{0, 27}

func (i SamplerMipmapMode) String() string {
	if i < 0 || i >= SamplerMipmapMode(len(_SamplerMipmapMode_index)-1) {
		return "SamplerMipmapMode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SamplerMipmapMode_name[_SamplerMipmapMode_index[i]:_SamplerMipmapMode_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY-0]
}

const _SamplerYcbcrModelConversion_name = "SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY"

var _SamplerYcbcrModelConversion_index = [...]uint8{0, 43}

func (i SamplerYcbcrModelConversion) String() string {
	if i < 0 || i >= SamplerYcbcrModelConversion(len(_SamplerYcbcrModelConversion_index)-1) {
		return "SamplerYcbcrModelConversion(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SamplerYcbcrModelConversion_name[_SamplerYcbcrModelConversion_index[i]:_SamplerYcbcrModelConversion_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SAMPLER_YCBCR_RANGE_ITU_FULL-0]
}

const _SamplerYcbcrRange_name = "SAMPLER_YCBCR_RANGE_ITU_FULL"

var _SamplerYcbcrRange_index = [...]uint8{0, 28}

func (i SamplerYcbcrRange) String() string {
	if i < 0 || i >= SamplerYcbcrRange(len(_SamplerYcbcrRange_index)-1) {
		return "SamplerYcbcrRange(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SamplerYcbcrRange_name[_SamplerYcbcrRange_index[i]:_SamplerYcbcrRange_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SEMAPHORE_IMPORT_TEMPORARY_BIT-1]
}

const _SemaphoreImportFlagBits_name = "SEMAPHORE_IMPORT_TEMPORARY_BIT"

var _SemaphoreImportFlagBits_index = [...]uint8{0, 30}

func (i SemaphoreImportFlagBits) String() string {
	i -= 1
	if i >= SemaphoreImportFlagBits(len(_SemaphoreImportFlagBits_index)-1) {
		return "SemaphoreImportFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _SemaphoreImportFlagBits_name[_SemaphoreImportFlagBits_index[i]:_SemaphoreImportFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SHADER_STAGE_ALL_GRAPHICS-31]
}

const _ShaderStageFlagBits_name = "SHADER_STAGE_ALL_GRAPHICS"

var _ShaderStageFlagBits_index = [...]uint8{0, 25}

func (i ShaderStageFlagBits) String() string {
	i -= 31
	if i >= ShaderStageFlagBits(len(_ShaderStageFlagBits_index)-1) {
		return "ShaderStageFlagBits(" + strconv.FormatInt(int64(i+31), 10) + ")"
	}
	return _ShaderStageFlagBits_name[_ShaderStageFlagBits_index[i]:_ShaderStageFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SHARING_MODE_EXCLUSIVE-0]
}

const _SharingMode_name = "SHARING_MODE_EXCLUSIVE"

var _SharingMode_index = [...]uint8{0, 22}

func (i SharingMode) String() string {
	if i < 0 || i >= SharingMode(len(_SharingMode_index)-1) {
		return "SharingMode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SharingMode_name[_SharingMode_index[i]:_SharingMode_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT-1]
}

const _SparseImageFormatFlagBits_name = "SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT"

var _SparseImageFormatFlagBits_index = [...]uint8{0, 38}

func (i SparseImageFormatFlagBits) String() string {
	i -= 1
	if i >= SparseImageFormatFlagBits(len(_SparseImageFormatFlagBits_index)-1) {
		return "SparseImageFormatFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _SparseImageFormatFlagBits_name[_SparseImageFormatFlagBits_index[i]:_SparseImageFormatFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SPARSE_MEMORY_BIND_METADATA_BIT-1]
}

const _SparseMemoryBindFlagBits_name = "SPARSE_MEMORY_BIND_METADATA_BIT"

var _SparseMemoryBindFlagBits_index = [...]uint8{0, 31}

func (i SparseMemoryBindFlagBits) String() string {
	i -= 1
	if i >= SparseMemoryBindFlagBits(len(_SparseMemoryBindFlagBits_index)-1) {
		return "SparseMemoryBindFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _SparseMemoryBindFlagBits_name[_SparseMemoryBindFlagBits_index[i]:_SparseMemoryBindFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[STENCIL_OP_KEEP-0]
}

const _StencilOp_name = "STENCIL_OP_KEEP"

var _StencilOp_index = [...]uint8{0, 15}

func (i StencilOp) String() string {
	if i < 0 || i >= StencilOp(len(_StencilOp_index)-1) {
		return "StencilOp(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _StencilOp_name[_StencilOp_index[i]:_StencilOp_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[STRUCTURE_TYPE_APPLICATION_INFO-0]
}

const _StructureType_name = "STRUCTURE_TYPE_APPLICATION_INFO"

var _StructureType_index = [...]uint8{0, 31}

func (i StructureType) String() string {
	if i < 0 || i >= StructureType(len(_StructureType_index)-1) {
		return "StructureType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _StructureType_name[_StructureType_index[i]:_StructureType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SUBGROUP_FEATURE_BASIC_BIT-1]
}

const _SubgroupFeatureFlagBits_name = "SUBGROUP_FEATURE_BASIC_BIT"

var _SubgroupFeatureFlagBits_index = [...]uint8{0, 26}

func (i SubgroupFeatureFlagBits) String() string {
	i -= 1
	if i >= SubgroupFeatureFlagBits(len(_SubgroupFeatureFlagBits_index)-1) {
		return "SubgroupFeatureFlagBits(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _SubgroupFeatureFlagBits_name[_SubgroupFeatureFlagBits_index[i]:_SubgroupFeatureFlagBits_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SURFACE_TRANSFORM_IDENTITY_BIT_KHR-1]
}

const _SurfaceTransformFlagBitsKHR_name = "SURFACE_TRANSFORM_IDENTITY_BIT_KHR"

var _SurfaceTransformFlagBitsKHR_index = [...]uint8{0, 34}

func (i SurfaceTransformFlagBitsKHR) String() string {
	i -= 1
	if i >= SurfaceTransformFlagBitsKHR(len(_SurfaceTransformFlagBitsKHR_index)-1) {
		return "SurfaceTransformFlagBitsKHR(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _SurfaceTransformFlagBitsKHR_name[_SurfaceTransformFlagBitsKHR_index[i]:_SurfaceTransformFlagBitsKHR_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SYSTEM_ALLOCATION_SCOPE_COMMAND-0]
}

const _SystemAllocationScope_name = "SYSTEM_ALLOCATION_SCOPE_COMMAND"

var _SystemAllocationScope_index = [...]uint8{0, 31}

func (i SystemAllocationScope) String() string {
	if i < 0 || i >= SystemAllocationScope(len(_SystemAllocationScope_index)-1) {
		return "SystemAllocationScope(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SystemAllocationScope_name[_SystemAllocationScope_index[i]:_SystemAllocationScope_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT-0]
}

const _TessellationDomainOrigin_name = "TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT"

var _TessellationDomainOrigin_index = [...]uint8{0, 37}

func (i TessellationDomainOrigin) String() string {
	if i < 0 || i >= TessellationDomainOrigin(len(_TessellationDomainOrigin_index)-1) {
		return "TessellationDomainOrigin(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TessellationDomainOrigin_name[_TessellationDomainOrigin_index[i]:_TessellationDomainOrigin_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[VENDOR_ID_VIV-65537]
}

const _VendorId_name = "VENDOR_ID_VIV"

var _VendorId_index = [...]uint8{0, 13}

func (i VendorId) String() string {
	i -= 65537
	if i < 0 || i >= VendorId(len(_VendorId_index)-1) {
		return "VendorId(" + strconv.FormatInt(int64(i+65537), 10) + ")"
	}
	return _VendorId_name[_VendorId_index[i]:_VendorId_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[VERTEX_INPUT_RATE_VERTEX-0]
}

const _VertexInputRate_name = "VERTEX_INPUT_RATE_VERTEX"

var _VertexInputRate_index = [...]uint8{0, 24}

func (i VertexInputRate) String() string {
	if i < 0 || i >= VertexInputRate(len(_VertexInputRate_index)-1) {
		return "VertexInputRate(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _VertexInputRate_name[_VertexInputRate_index[i]:_VertexInputRate_index[i+1]]
}
