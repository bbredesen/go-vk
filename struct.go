// Code generated by go-vk from vk.xml at 2023-01-14 15:10:03.1242141 -0600 CST m=+1.017658301. DO NOT EDIT.
package vk

// AllocationCallbacks: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkAllocationCallbacks.html
type AllocationCallbacks struct {
	PUserData             *byte
	PfnAllocation         PFN_vkAllocationFunction
	PfnReallocation       PFN_vkReallocationFunction
	PfnFree               PFN_vkFreeFunction
	PfnInternalAllocation PFN_vkInternalAllocationNotification
	PfnInternalFree       PFN_vkInternalFreeNotification
}

type _vkAllocationCallbacks struct {
	pUserData             *byte
	pfnAllocation         PFN_vkAllocationFunction
	pfnReallocation       PFN_vkReallocationFunction
	pfnFree               PFN_vkFreeFunction
	pfnInternalAllocation PFN_vkInternalAllocationNotification
	pfnInternalFree       PFN_vkInternalFreeNotification
}

func (s *AllocationCallbacks) Vulkanize() *_vkAllocationCallbacks {
	rval := &_vkAllocationCallbacks{
		pUserData:             (*byte)(s.PUserData),                                            /*cb*/
		pfnAllocation:         (PFN_vkAllocationFunction)(s.PfnAllocation),                     /*cb*/
		pfnReallocation:       (PFN_vkReallocationFunction)(s.PfnReallocation),                 /*cb*/
		pfnFree:               (PFN_vkFreeFunction)(s.PfnFree),                                 /*cb*/
		pfnInternalAllocation: (PFN_vkInternalAllocationNotification)(s.PfnInternalAllocation), /*cb*/
		pfnInternalFree:       (PFN_vkInternalFreeNotification)(s.PfnInternalFree),             /*cb*/
	}
	return rval
}

// ApplicationInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkApplicationInfo.html
type ApplicationInfo struct {
	// SType = STRUCTURE_TYPE_APPLICATION_INFO
	PNext              *byte
	PApplicationName   string
	ApplicationVersion uint32
	PEngineName        string
	EngineVersion      uint32
	ApiVersion         uint32
}

type _vkApplicationInfo struct {
	sType              StructureType
	pNext              *byte
	pApplicationName   *byte
	applicationVersion uint32
	pEngineName        *byte
	engineVersion      uint32
	apiVersion         uint32
}

func (s *ApplicationInfo) Vulkanize() *_vkApplicationInfo {
	rval := &_vkApplicationInfo{
		sType:              STRUCTURE_TYPE_APPLICATION_INFO,             /*c1*/
		pNext:              (*byte)(s.PNext),                            /*cb*/
		pApplicationName:   sys_stringToBytePointer(s.PApplicationName), /*c rem*/
		applicationVersion: (uint32)(s.ApplicationVersion),              /*cb*/
		pEngineName:        sys_stringToBytePointer(s.PEngineName),      /*c rem*/
		engineVersion:      (uint32)(s.EngineVersion),                   /*cb*/
		apiVersion:         (uint32)(s.ApiVersion),                      /*cb*/
	}
	return rval
}

// AttachmentDescription: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkAttachmentDescription.html
type AttachmentDescription struct {
	Flags          AttachmentDescriptionFlags
	Format         Format
	Samples        SampleCountFlagBits
	LoadOp         AttachmentLoadOp
	StoreOp        AttachmentStoreOp
	StencilLoadOp  AttachmentLoadOp
	StencilStoreOp AttachmentStoreOp
	InitialLayout  ImageLayout
	FinalLayout    ImageLayout
}

type _vkAttachmentDescription = AttachmentDescription

func (s *AttachmentDescription) Vulkanize() *_vkAttachmentDescription {
	rval := (*_vkAttachmentDescription)(s)
	return rval
}

// AttachmentReference: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkAttachmentReference.html
type AttachmentReference struct {
	Attachment uint32
	Layout     ImageLayout
}

type _vkAttachmentReference = AttachmentReference

func (s *AttachmentReference) Vulkanize() *_vkAttachmentReference {
	rval := (*_vkAttachmentReference)(s)
	return rval
}

// BindBufferMemoryDeviceGroupInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkBindBufferMemoryDeviceGroupInfo.html
type BindBufferMemoryDeviceGroupInfo struct {
	// SType = STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO
	PNext *byte
	// deviceIndexCount
	PDeviceIndices []uint32
}

type _vkBindBufferMemoryDeviceGroupInfo struct {
	sType            StructureType
	pNext            *byte
	deviceIndexCount uint32
	pDeviceIndices   *uint32
}

func (s *BindBufferMemoryDeviceGroupInfo) Vulkanize() *_vkBindBufferMemoryDeviceGroupInfo {
	rval := &_vkBindBufferMemoryDeviceGroupInfo{
		sType:            STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO, /*c1*/
		pNext:            (*byte)(s.PNext),                                    /*cb*/
		deviceIndexCount: uint32(len(s.PDeviceIndices)),                       /*c6*/
		pDeviceIndices:   (&s.PDeviceIndices[0]),                              /*c rem*/
	}
	return rval
}

// BindBufferMemoryInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkBindBufferMemoryInfo.html
type BindBufferMemoryInfo struct {
	// SType = STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO
	PNext        *byte
	Buffer       Buffer
	Memory       DeviceMemory
	MemoryOffset DeviceSize
}

type _vkBindBufferMemoryInfo struct {
	sType        StructureType
	pNext        *byte
	buffer       Buffer
	memory       DeviceMemory
	memoryOffset DeviceSize
}

func (s *BindBufferMemoryInfo) Vulkanize() *_vkBindBufferMemoryInfo {
	rval := &_vkBindBufferMemoryInfo{
		sType:        STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO, /*c1*/
		pNext:        (*byte)(s.PNext),                       /*cb*/
		buffer:       (Buffer)(s.Buffer),                     /*cb*/
		memory:       (DeviceMemory)(s.Memory),               /*cb*/
		memoryOffset: (DeviceSize)(s.MemoryOffset),           /*cb*/
	}
	return rval
}

// BindImageMemoryDeviceGroupInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkBindImageMemoryDeviceGroupInfo.html
type BindImageMemoryDeviceGroupInfo struct {
	// SType = STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO
	PNext *byte
	// deviceIndexCount
	PDeviceIndices []uint32
	// splitInstanceBindRegionCount
	PSplitInstanceBindRegions []Rect2D
}

type _vkBindImageMemoryDeviceGroupInfo struct {
	sType                        StructureType
	pNext                        *byte
	deviceIndexCount             uint32
	pDeviceIndices               *uint32
	splitInstanceBindRegionCount uint32
	pSplitInstanceBindRegions    *_vkRect2D
}

func (s *BindImageMemoryDeviceGroupInfo) Vulkanize() *_vkBindImageMemoryDeviceGroupInfo {

	sl_pSplitInstanceBindRegions := make([]_vkRect2D, len(s.PSplitInstanceBindRegions))
	for i, v := range s.PSplitInstanceBindRegions {
		sl_pSplitInstanceBindRegions[i] = *(v.Vulkanize())
	}
	rval := &_vkBindImageMemoryDeviceGroupInfo{
		sType:                        STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO, /*c1*/
		pNext:                        (*byte)(s.PNext),                                   /*cb*/
		deviceIndexCount:             uint32(len(s.PDeviceIndices)),                      /*c6*/
		pDeviceIndices:               (&s.PDeviceIndices[0]),                             /*c rem*/
		splitInstanceBindRegionCount: uint32(len(s.PSplitInstanceBindRegions)),           /*c6*/
		pSplitInstanceBindRegions:    &(sl_pSplitInstanceBindRegions[0]),                 /*c rem*/
	}
	return rval
}

// BindImageMemoryInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkBindImageMemoryInfo.html
type BindImageMemoryInfo struct {
	// SType = STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO
	PNext        *byte
	Image        Image
	Memory       DeviceMemory
	MemoryOffset DeviceSize
}

type _vkBindImageMemoryInfo struct {
	sType        StructureType
	pNext        *byte
	image        Image
	memory       DeviceMemory
	memoryOffset DeviceSize
}

func (s *BindImageMemoryInfo) Vulkanize() *_vkBindImageMemoryInfo {
	rval := &_vkBindImageMemoryInfo{
		sType:        STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO, /*c1*/
		pNext:        (*byte)(s.PNext),                      /*cb*/
		image:        (Image)(s.Image),                      /*cb*/
		memory:       (DeviceMemory)(s.Memory),              /*cb*/
		memoryOffset: (DeviceSize)(s.MemoryOffset),          /*cb*/
	}
	return rval
}

// BindImagePlaneMemoryInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkBindImagePlaneMemoryInfo.html
type BindImagePlaneMemoryInfo struct {
	// SType = STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO
	PNext       *byte
	PlaneAspect ImageAspectFlagBits
}

type _vkBindImagePlaneMemoryInfo struct {
	sType       StructureType
	pNext       *byte
	planeAspect ImageAspectFlagBits
}

func (s *BindImagePlaneMemoryInfo) Vulkanize() *_vkBindImagePlaneMemoryInfo {
	rval := &_vkBindImagePlaneMemoryInfo{
		sType:       STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO, /*c1*/
		pNext:       (*byte)(s.PNext),                            /*cb*/
		planeAspect: (ImageAspectFlagBits)(s.PlaneAspect),        /*cb*/
	}
	return rval
}

// BindSparseInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkBindSparseInfo.html
type BindSparseInfo struct {
	// SType = STRUCTURE_TYPE_BIND_SPARSE_INFO
	PNext *byte
	// waitSemaphoreCount
	PWaitSemaphores []Semaphore
	// bufferBindCount
	PBufferBinds []SparseBufferMemoryBindInfo
	// imageOpaqueBindCount
	PImageOpaqueBinds []SparseImageOpaqueMemoryBindInfo
	// imageBindCount
	PImageBinds []SparseImageMemoryBindInfo
	// signalSemaphoreCount
	PSignalSemaphores []Semaphore
}

type _vkBindSparseInfo struct {
	sType                StructureType
	pNext                *byte
	waitSemaphoreCount   uint32
	pWaitSemaphores      *Semaphore
	bufferBindCount      uint32
	pBufferBinds         *_vkSparseBufferMemoryBindInfo
	imageOpaqueBindCount uint32
	pImageOpaqueBinds    *_vkSparseImageOpaqueMemoryBindInfo
	imageBindCount       uint32
	pImageBinds          *_vkSparseImageMemoryBindInfo
	signalSemaphoreCount uint32
	pSignalSemaphores    *Semaphore
}

func (s *BindSparseInfo) Vulkanize() *_vkBindSparseInfo {

	sl_pBufferBinds := make([]_vkSparseBufferMemoryBindInfo, len(s.PBufferBinds))
	for i, v := range s.PBufferBinds {
		sl_pBufferBinds[i] = *(v.Vulkanize())
	}

	sl_pImageOpaqueBinds := make([]_vkSparseImageOpaqueMemoryBindInfo, len(s.PImageOpaqueBinds))
	for i, v := range s.PImageOpaqueBinds {
		sl_pImageOpaqueBinds[i] = *(v.Vulkanize())
	}

	sl_pImageBinds := make([]_vkSparseImageMemoryBindInfo, len(s.PImageBinds))
	for i, v := range s.PImageBinds {
		sl_pImageBinds[i] = *(v.Vulkanize())
	}
	rval := &_vkBindSparseInfo{
		sType:                STRUCTURE_TYPE_BIND_SPARSE_INFO,  /*c1*/
		pNext:                (*byte)(s.PNext),                 /*cb*/
		waitSemaphoreCount:   uint32(len(s.PWaitSemaphores)),   /*c6*/
		pWaitSemaphores:      (&s.PWaitSemaphores[0]),          /*c rem*/
		bufferBindCount:      uint32(len(s.PBufferBinds)),      /*c6*/
		pBufferBinds:         &(sl_pBufferBinds[0]),            /*c rem*/
		imageOpaqueBindCount: uint32(len(s.PImageOpaqueBinds)), /*c6*/
		pImageOpaqueBinds:    &(sl_pImageOpaqueBinds[0]),       /*c rem*/
		imageBindCount:       uint32(len(s.PImageBinds)),       /*c6*/
		pImageBinds:          &(sl_pImageBinds[0]),             /*c rem*/
		signalSemaphoreCount: uint32(len(s.PSignalSemaphores)), /*c6*/
		pSignalSemaphores:    (&s.PSignalSemaphores[0]),        /*c rem*/
	}
	return rval
}

// BufferCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkBufferCreateInfo.html
type BufferCreateInfo struct {
	// SType = STRUCTURE_TYPE_BUFFER_CREATE_INFO
	PNext       *byte
	Flags       BufferCreateFlags
	Size        DeviceSize
	Usage       BufferUsageFlags
	SharingMode SharingMode
	// queueFamilyIndexCount
	PQueueFamilyIndices []uint32
}

type _vkBufferCreateInfo struct {
	sType                 StructureType
	pNext                 *byte
	flags                 BufferCreateFlags
	size                  DeviceSize
	usage                 BufferUsageFlags
	sharingMode           SharingMode
	queueFamilyIndexCount uint32
	pQueueFamilyIndices   *uint32
}

func (s *BufferCreateInfo) Vulkanize() *_vkBufferCreateInfo {
	rval := &_vkBufferCreateInfo{
		sType:                 STRUCTURE_TYPE_BUFFER_CREATE_INFO,  /*c1*/
		pNext:                 (*byte)(s.PNext),                   /*cb*/
		flags:                 (BufferCreateFlags)(s.Flags),       /*cb*/
		size:                  (DeviceSize)(s.Size),               /*cb*/
		usage:                 (BufferUsageFlags)(s.Usage),        /*cb*/
		sharingMode:           (SharingMode)(s.SharingMode),       /*cb*/
		queueFamilyIndexCount: uint32(len(s.PQueueFamilyIndices)), /*c6*/
		pQueueFamilyIndices:   (&s.PQueueFamilyIndices[0]),        /*c rem*/
	}
	return rval
}

// BufferMemoryBarrier: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkBufferMemoryBarrier.html
type BufferMemoryBarrier struct {
	// SType = STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER
	PNext               *byte
	SrcAccessMask       AccessFlags
	DstAccessMask       AccessFlags
	SrcQueueFamilyIndex uint32
	DstQueueFamilyIndex uint32
	Buffer              Buffer
	Offset              DeviceSize
	Size                DeviceSize
}

type _vkBufferMemoryBarrier struct {
	sType               StructureType
	pNext               *byte
	srcAccessMask       AccessFlags
	dstAccessMask       AccessFlags
	srcQueueFamilyIndex uint32
	dstQueueFamilyIndex uint32
	buffer              Buffer
	offset              DeviceSize
	size                DeviceSize
}

func (s *BufferMemoryBarrier) Vulkanize() *_vkBufferMemoryBarrier {
	rval := &_vkBufferMemoryBarrier{
		sType:               STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER, /*c1*/
		pNext:               (*byte)(s.PNext),                     /*cb*/
		srcAccessMask:       (AccessFlags)(s.SrcAccessMask),       /*cb*/
		dstAccessMask:       (AccessFlags)(s.DstAccessMask),       /*cb*/
		srcQueueFamilyIndex: (uint32)(s.SrcQueueFamilyIndex),      /*cb*/
		dstQueueFamilyIndex: (uint32)(s.DstQueueFamilyIndex),      /*cb*/
		buffer:              (Buffer)(s.Buffer),                   /*cb*/
		offset:              (DeviceSize)(s.Offset),               /*cb*/
		size:                (DeviceSize)(s.Size),                 /*cb*/
	}
	return rval
}

// BufferMemoryRequirementsInfo2: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkBufferMemoryRequirementsInfo2.html
type BufferMemoryRequirementsInfo2 struct {
	// SType = STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2
	PNext  *byte
	Buffer Buffer
}

type _vkBufferMemoryRequirementsInfo2 struct {
	sType  StructureType
	pNext  *byte
	buffer Buffer
}

func (s *BufferMemoryRequirementsInfo2) Vulkanize() *_vkBufferMemoryRequirementsInfo2 {
	rval := &_vkBufferMemoryRequirementsInfo2{
		sType:  STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2, /*c1*/
		pNext:  (*byte)(s.PNext),                                 /*cb*/
		buffer: (Buffer)(s.Buffer),                               /*cb*/
	}
	return rval
}

// BufferViewCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkBufferViewCreateInfo.html
type BufferViewCreateInfo struct {
	// SType = STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO
	PNext  *byte
	Flags  BufferViewCreateFlags
	Buffer Buffer
	Format Format
	Offset DeviceSize
	Rang   DeviceSize
}

type _vkBufferViewCreateInfo struct {
	sType  StructureType
	pNext  *byte
	flags  BufferViewCreateFlags
	buffer Buffer
	format Format
	offset DeviceSize
	rang   DeviceSize
}

func (s *BufferViewCreateInfo) Vulkanize() *_vkBufferViewCreateInfo {
	rval := &_vkBufferViewCreateInfo{
		sType:  STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO, /*c1*/
		pNext:  (*byte)(s.PNext),                       /*cb*/
		flags:  (BufferViewCreateFlags)(s.Flags),       /*cb*/
		buffer: (Buffer)(s.Buffer),                     /*cb*/
		format: (Format)(s.Format),                     /*cb*/
		offset: (DeviceSize)(s.Offset),                 /*cb*/
		rang:   (DeviceSize)(s.Rang),                   /*cb*/
	}
	return rval
}

// CommandBufferAllocateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkCommandBufferAllocateInfo.html
type CommandBufferAllocateInfo struct {
	// SType = STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO
	PNext              *byte
	CommandPool        CommandPool
	Level              CommandBufferLevel
	CommandBufferCount uint32
}

type _vkCommandBufferAllocateInfo struct {
	sType              StructureType
	pNext              *byte
	commandPool        CommandPool
	level              CommandBufferLevel
	commandBufferCount uint32
}

func (s *CommandBufferAllocateInfo) Vulkanize() *_vkCommandBufferAllocateInfo {
	rval := &_vkCommandBufferAllocateInfo{
		sType:              STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO, /*c1*/
		pNext:              (*byte)(s.PNext),                            /*cb*/
		commandPool:        (CommandPool)(s.CommandPool),                /*cb*/
		level:              (CommandBufferLevel)(s.Level),               /*cb*/
		commandBufferCount: (uint32)(s.CommandBufferCount),              /*cb*/
	}
	return rval
}

// CommandBufferBeginInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkCommandBufferBeginInfo.html
type CommandBufferBeginInfo struct {
	// SType = STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO
	PNext            *byte
	Flags            CommandBufferUsageFlags
	PInheritanceInfo *CommandBufferInheritanceInfo
}

type _vkCommandBufferBeginInfo struct {
	sType            StructureType
	pNext            *byte
	flags            CommandBufferUsageFlags
	pInheritanceInfo *_vkCommandBufferInheritanceInfo
}

func (s *CommandBufferBeginInfo) Vulkanize() *_vkCommandBufferBeginInfo {
	rval := &_vkCommandBufferBeginInfo{
		sType:            STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO, /*c1*/
		pNext:            (*byte)(s.PNext),                         /*cb*/
		flags:            (CommandBufferUsageFlags)(s.Flags),       /*cb*/
		pInheritanceInfo: (s.PInheritanceInfo.Vulkanize()),         /*c rem*/
	}
	return rval
}

// CommandBufferInheritanceInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkCommandBufferInheritanceInfo.html
type CommandBufferInheritanceInfo struct {
	// SType = STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO
	PNext                *byte
	RenderPass           RenderPass
	Subpass              uint32
	Framebuffer          Framebuffer
	OcclusionQueryEnable bool
	QueryFlags           QueryControlFlags
	PipelineStatistics   QueryPipelineStatisticFlags
}

type _vkCommandBufferInheritanceInfo struct {
	sType                StructureType
	pNext                *byte
	renderPass           RenderPass
	subpass              uint32
	framebuffer          Framebuffer
	occlusionQueryEnable Bool32
	queryFlags           QueryControlFlags
	pipelineStatistics   QueryPipelineStatisticFlags
}

func (s *CommandBufferInheritanceInfo) Vulkanize() *_vkCommandBufferInheritanceInfo {
	rval := &_vkCommandBufferInheritanceInfo{
		sType:                STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO,      /*c1*/
		pNext:                (*byte)(s.PNext),                                    /*cb*/
		renderPass:           (RenderPass)(s.RenderPass),                          /*cb*/
		subpass:              (uint32)(s.Subpass),                                 /*cb*/
		framebuffer:          (Framebuffer)(s.Framebuffer),                        /*cb*/
		occlusionQueryEnable: translateInternal_Bool32(s.OcclusionQueryEnable),    /*default*/
		queryFlags:           (QueryControlFlags)(s.QueryFlags),                   /*cb*/
		pipelineStatistics:   (QueryPipelineStatisticFlags)(s.PipelineStatistics), /*cb*/
	}
	return rval
}

// CommandPoolCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkCommandPoolCreateInfo.html
type CommandPoolCreateInfo struct {
	// SType = STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO
	PNext            *byte
	Flags            CommandPoolCreateFlags
	QueueFamilyIndex uint32
}

type _vkCommandPoolCreateInfo struct {
	sType            StructureType
	pNext            *byte
	flags            CommandPoolCreateFlags
	queueFamilyIndex uint32
}

func (s *CommandPoolCreateInfo) Vulkanize() *_vkCommandPoolCreateInfo {
	rval := &_vkCommandPoolCreateInfo{
		sType:            STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO, /*c1*/
		pNext:            (*byte)(s.PNext),                        /*cb*/
		flags:            (CommandPoolCreateFlags)(s.Flags),       /*cb*/
		queueFamilyIndex: (uint32)(s.QueueFamilyIndex),            /*cb*/
	}
	return rval
}

// ComponentMapping: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkComponentMapping.html
type ComponentMapping struct {
	R ComponentSwizzle
	G ComponentSwizzle
	B ComponentSwizzle
	A ComponentSwizzle
}

type _vkComponentMapping = ComponentMapping

func (s *ComponentMapping) Vulkanize() *_vkComponentMapping {
	rval := (*_vkComponentMapping)(s)
	return rval
}

// ComputePipelineCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkComputePipelineCreateInfo.html
type ComputePipelineCreateInfo struct {
	// SType = STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO
	PNext              *byte
	Flags              PipelineCreateFlags
	Stage              PipelineShaderStageCreateInfo
	Layout             PipelineLayout
	BasePipelineHandle Pipeline
	BasePipelineIndex  int32
}

type _vkComputePipelineCreateInfo struct {
	sType              StructureType
	pNext              *byte
	flags              PipelineCreateFlags
	stage              _vkPipelineShaderStageCreateInfo
	layout             PipelineLayout
	basePipelineHandle Pipeline
	basePipelineIndex  int32
}

func (s *ComputePipelineCreateInfo) Vulkanize() *_vkComputePipelineCreateInfo {
	rval := &_vkComputePipelineCreateInfo{
		sType:              STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO, /*c1*/
		pNext:              (*byte)(s.PNext),                            /*cb*/
		flags:              (PipelineCreateFlags)(s.Flags),              /*cb*/
		stage:              *(s.Stage.Vulkanize()),                      /*c3*/
		layout:             (PipelineLayout)(s.Layout),                  /*cb*/
		basePipelineHandle: (Pipeline)(s.BasePipelineHandle),            /*cb*/
		basePipelineIndex:  (int32)(s.BasePipelineIndex),                /*cb*/
	}
	return rval
}

// CopyDescriptorSet: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkCopyDescriptorSet.html
type CopyDescriptorSet struct {
	// SType = STRUCTURE_TYPE_COPY_DESCRIPTOR_SET
	PNext           *byte
	SrcSet          DescriptorSet
	SrcBinding      uint32
	SrcArrayElement uint32
	DstSet          DescriptorSet
	DstBinding      uint32
	DstArrayElement uint32
	DescriptorCount uint32
}

type _vkCopyDescriptorSet struct {
	sType           StructureType
	pNext           *byte
	srcSet          DescriptorSet
	srcBinding      uint32
	srcArrayElement uint32
	dstSet          DescriptorSet
	dstBinding      uint32
	dstArrayElement uint32
	descriptorCount uint32
}

func (s *CopyDescriptorSet) Vulkanize() *_vkCopyDescriptorSet {
	rval := &_vkCopyDescriptorSet{
		sType:           STRUCTURE_TYPE_COPY_DESCRIPTOR_SET, /*c1*/
		pNext:           (*byte)(s.PNext),                   /*cb*/
		srcSet:          (DescriptorSet)(s.SrcSet),          /*cb*/
		srcBinding:      (uint32)(s.SrcBinding),             /*cb*/
		srcArrayElement: (uint32)(s.SrcArrayElement),        /*cb*/
		dstSet:          (DescriptorSet)(s.DstSet),          /*cb*/
		dstBinding:      (uint32)(s.DstBinding),             /*cb*/
		dstArrayElement: (uint32)(s.DstArrayElement),        /*cb*/
		descriptorCount: (uint32)(s.DescriptorCount),        /*cb*/
	}
	return rval
}

// DescriptorBufferInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDescriptorBufferInfo.html
type DescriptorBufferInfo struct {
	Buffer Buffer
	Offset DeviceSize
	Rang   DeviceSize
}

type _vkDescriptorBufferInfo = DescriptorBufferInfo

func (s *DescriptorBufferInfo) Vulkanize() *_vkDescriptorBufferInfo {
	rval := (*_vkDescriptorBufferInfo)(s)
	return rval
}

// DescriptorImageInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDescriptorImageInfo.html
type DescriptorImageInfo struct {
	Sampler     Sampler
	ImageView   ImageView
	ImageLayout ImageLayout
}

type _vkDescriptorImageInfo = DescriptorImageInfo

func (s *DescriptorImageInfo) Vulkanize() *_vkDescriptorImageInfo {
	rval := (*_vkDescriptorImageInfo)(s)
	return rval
}

// DescriptorPoolCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDescriptorPoolCreateInfo.html
type DescriptorPoolCreateInfo struct {
	// SType = STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO
	PNext   *byte
	Flags   DescriptorPoolCreateFlags
	MaxSets uint32
	// poolSizeCount
	PPoolSizes []DescriptorPoolSize
}

type _vkDescriptorPoolCreateInfo struct {
	sType         StructureType
	pNext         *byte
	flags         DescriptorPoolCreateFlags
	maxSets       uint32
	poolSizeCount uint32
	pPoolSizes    *_vkDescriptorPoolSize
}

func (s *DescriptorPoolCreateInfo) Vulkanize() *_vkDescriptorPoolCreateInfo {
	rval := &_vkDescriptorPoolCreateInfo{
		sType:         STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO, /*c1*/
		pNext:         (*byte)(s.PNext),                           /*cb*/
		flags:         (DescriptorPoolCreateFlags)(s.Flags),       /*cb*/
		maxSets:       (uint32)(s.MaxSets),                        /*cb*/
		poolSizeCount: uint32(len(s.PPoolSizes)),                  /*c6*/
		pPoolSizes:    (&s.PPoolSizes[0]),                         /*c rem*/
	}
	return rval
}

// DescriptorPoolSize: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDescriptorPoolSize.html
type DescriptorPoolSize struct {
	Typ             DescriptorType
	DescriptorCount uint32
}

type _vkDescriptorPoolSize = DescriptorPoolSize

func (s *DescriptorPoolSize) Vulkanize() *_vkDescriptorPoolSize {
	rval := (*_vkDescriptorPoolSize)(s)
	return rval
}

// DescriptorSetAllocateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDescriptorSetAllocateInfo.html
type DescriptorSetAllocateInfo struct {
	// SType = STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO
	PNext          *byte
	DescriptorPool DescriptorPool
	// descriptorSetCount
	PSetLayouts []DescriptorSetLayout
}

type _vkDescriptorSetAllocateInfo struct {
	sType              StructureType
	pNext              *byte
	descriptorPool     DescriptorPool
	descriptorSetCount uint32
	pSetLayouts        *DescriptorSetLayout
}

func (s *DescriptorSetAllocateInfo) Vulkanize() *_vkDescriptorSetAllocateInfo {
	rval := &_vkDescriptorSetAllocateInfo{
		sType:              STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO, /*c1*/
		pNext:              (*byte)(s.PNext),                            /*cb*/
		descriptorPool:     (DescriptorPool)(s.DescriptorPool),          /*cb*/
		descriptorSetCount: uint32(len(s.PSetLayouts)),                  /*c6*/
		pSetLayouts:        (&s.PSetLayouts[0]),                         /*c rem*/
	}
	return rval
}

// DescriptorSetLayoutBinding: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDescriptorSetLayoutBinding.html
type DescriptorSetLayoutBinding struct {
	Binding        uint32
	DescriptorType DescriptorType
	// descriptorCount
	StageFlags         ShaderStageFlags
	PImmutableSamplers []Sampler
}

type _vkDescriptorSetLayoutBinding struct {
	binding            uint32
	descriptorType     DescriptorType
	descriptorCount    uint32
	stageFlags         ShaderStageFlags
	pImmutableSamplers *Sampler
}

func (s *DescriptorSetLayoutBinding) Vulkanize() *_vkDescriptorSetLayoutBinding {
	rval := &_vkDescriptorSetLayoutBinding{
		binding:            (uint32)(s.Binding),                /*cb*/
		descriptorType:     (DescriptorType)(s.DescriptorType), /*cb*/
		descriptorCount:    uint32(len(s.PImmutableSamplers)),  /*c6*/
		stageFlags:         (ShaderStageFlags)(s.StageFlags),   /*cb*/
		pImmutableSamplers: (&s.PImmutableSamplers[0]),         /*c rem*/
	}
	return rval
}

// DescriptorSetLayoutCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDescriptorSetLayoutCreateInfo.html
type DescriptorSetLayoutCreateInfo struct {
	// SType = STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO
	PNext *byte
	Flags DescriptorSetLayoutCreateFlags
	// bindingCount
	PBindings []DescriptorSetLayoutBinding
}

type _vkDescriptorSetLayoutCreateInfo struct {
	sType        StructureType
	pNext        *byte
	flags        DescriptorSetLayoutCreateFlags
	bindingCount uint32
	pBindings    *_vkDescriptorSetLayoutBinding
}

func (s *DescriptorSetLayoutCreateInfo) Vulkanize() *_vkDescriptorSetLayoutCreateInfo {

	sl_pBindings := make([]_vkDescriptorSetLayoutBinding, len(s.PBindings))
	for i, v := range s.PBindings {
		sl_pBindings[i] = *(v.Vulkanize())
	}
	rval := &_vkDescriptorSetLayoutCreateInfo{
		sType:        STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO, /*c1*/
		pNext:        (*byte)(s.PNext),                                 /*cb*/
		flags:        (DescriptorSetLayoutCreateFlags)(s.Flags),        /*cb*/
		bindingCount: uint32(len(s.PBindings)),                         /*c6*/
		pBindings:    &(sl_pBindings[0]),                               /*c rem*/
	}
	return rval
}

// DescriptorSetLayoutSupport: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDescriptorSetLayoutSupport.html
type DescriptorSetLayoutSupport struct {
	// SType = STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT
	PNext     *byte
	Supported bool
}

// WARNING - struct DescriptorSetLayoutSupport is returned only, which is not yet handled in the binding
type _vkDescriptorSetLayoutSupport struct {
	sType     StructureType
	pNext     *byte
	supported Bool32
}

func (s *_vkDescriptorSetLayoutSupport) Goify() *DescriptorSetLayoutSupport {
	rval := &DescriptorSetLayoutSupport{
		PNext:     (*byte)(s.pNext),
		Supported: translatePublic_Bool32(s.supported), /*default*/
	}
	return rval
}

// DescriptorUpdateTemplateCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDescriptorUpdateTemplateCreateInfo.html
type DescriptorUpdateTemplateCreateInfo struct {
	// SType = STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO
	PNext *byte
	Flags DescriptorUpdateTemplateCreateFlags
	// descriptorUpdateEntryCount
	PDescriptorUpdateEntries []DescriptorUpdateTemplateEntry
	TemplateType             DescriptorUpdateTemplateType
	DescriptorSetLayout      DescriptorSetLayout
	PipelineBindPoint        PipelineBindPoint
	PipelineLayout           PipelineLayout
	Set                      uint32
}

type _vkDescriptorUpdateTemplateCreateInfo struct {
	sType                      StructureType
	pNext                      *byte
	flags                      DescriptorUpdateTemplateCreateFlags
	descriptorUpdateEntryCount uint32
	pDescriptorUpdateEntries   *_vkDescriptorUpdateTemplateEntry
	templateType               DescriptorUpdateTemplateType
	descriptorSetLayout        DescriptorSetLayout
	pipelineBindPoint          PipelineBindPoint
	pipelineLayout             PipelineLayout
	set                        uint32
}

func (s *DescriptorUpdateTemplateCreateInfo) Vulkanize() *_vkDescriptorUpdateTemplateCreateInfo {
	rval := &_vkDescriptorUpdateTemplateCreateInfo{
		sType:                      STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO, /*c1*/
		pNext:                      (*byte)(s.PNext),                                      /*cb*/
		flags:                      (DescriptorUpdateTemplateCreateFlags)(s.Flags),        /*cb*/
		descriptorUpdateEntryCount: uint32(len(s.PDescriptorUpdateEntries)),               /*c6*/
		pDescriptorUpdateEntries:   (&s.PDescriptorUpdateEntries[0]),                      /*c rem*/
		templateType:               (DescriptorUpdateTemplateType)(s.TemplateType),        /*cb*/
		descriptorSetLayout:        (DescriptorSetLayout)(s.DescriptorSetLayout),          /*cb*/
		pipelineBindPoint:          (PipelineBindPoint)(s.PipelineBindPoint),              /*cb*/
		pipelineLayout:             (PipelineLayout)(s.PipelineLayout),                    /*cb*/
		set:                        (uint32)(s.Set),                                       /*cb*/
	}
	return rval
}

// DescriptorUpdateTemplateEntry: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDescriptorUpdateTemplateEntry.html
type DescriptorUpdateTemplateEntry struct {
	DstBinding      uint32
	DstArrayElement uint32
	DescriptorCount uint32
	DescriptorType  DescriptorType
	Offset          uintptr
	Stride          uintptr
}

type _vkDescriptorUpdateTemplateEntry = DescriptorUpdateTemplateEntry

func (s *DescriptorUpdateTemplateEntry) Vulkanize() *_vkDescriptorUpdateTemplateEntry {
	rval := (*_vkDescriptorUpdateTemplateEntry)(s)
	return rval
}

// DeviceCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDeviceCreateInfo.html
type DeviceCreateInfo struct {
	// SType = STRUCTURE_TYPE_DEVICE_CREATE_INFO
	PNext *byte
	Flags DeviceCreateFlags
	// queueCreateInfoCount
	PQueueCreateInfos []DeviceQueueCreateInfo
	// enabledLayerCount
	PpEnabledLayerNames []string
	// enabledExtensionCount
	PpEnabledExtensionNames []string
	PEnabledFeatures        *PhysicalDeviceFeatures
}

type _vkDeviceCreateInfo struct {
	sType                   StructureType
	pNext                   *byte
	flags                   DeviceCreateFlags
	queueCreateInfoCount    uint32
	pQueueCreateInfos       *_vkDeviceQueueCreateInfo
	enabledLayerCount       uint32
	ppEnabledLayerNames     **byte
	enabledExtensionCount   uint32
	ppEnabledExtensionNames **byte
	pEnabledFeatures        *_vkPhysicalDeviceFeatures
}

func (s *DeviceCreateInfo) Vulkanize() *_vkDeviceCreateInfo {

	sl_pQueueCreateInfos := make([]_vkDeviceQueueCreateInfo, len(s.PQueueCreateInfos))
	for i, v := range s.PQueueCreateInfos {
		sl_pQueueCreateInfos[i] = *(v.Vulkanize())
	}

	sl_ppEnabledLayerNames := make([]*byte, len(s.PpEnabledLayerNames))
	for i, v := range s.PpEnabledLayerNames {
		sl_ppEnabledLayerNames[i] = sys_stringToBytePointer(v)
	}

	sl_ppEnabledExtensionNames := make([]*byte, len(s.PpEnabledExtensionNames))
	for i, v := range s.PpEnabledExtensionNames {
		sl_ppEnabledExtensionNames[i] = sys_stringToBytePointer(v)
	}
	rval := &_vkDeviceCreateInfo{
		sType:                   STRUCTURE_TYPE_DEVICE_CREATE_INFO,      /*c1*/
		pNext:                   (*byte)(s.PNext),                       /*cb*/
		flags:                   (DeviceCreateFlags)(s.Flags),           /*cb*/
		queueCreateInfoCount:    uint32(len(s.PQueueCreateInfos)),       /*c6*/
		pQueueCreateInfos:       &(sl_pQueueCreateInfos[0]),             /*c rem*/
		enabledLayerCount:       uint32(len(s.PpEnabledLayerNames)),     /*c6*/
		ppEnabledLayerNames:     &(sl_ppEnabledLayerNames[0]),           /*c rem*/
		enabledExtensionCount:   uint32(len(s.PpEnabledExtensionNames)), /*c6*/
		ppEnabledExtensionNames: &(sl_ppEnabledExtensionNames[0]),       /*c rem*/
		pEnabledFeatures:        (s.PEnabledFeatures.Vulkanize()),       /*c rem*/
	}
	return rval
}

// DeviceGroupBindSparseInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDeviceGroupBindSparseInfo.html
type DeviceGroupBindSparseInfo struct {
	// SType = STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO
	PNext               *byte
	ResourceDeviceIndex uint32
	MemoryDeviceIndex   uint32
}

type _vkDeviceGroupBindSparseInfo struct {
	sType               StructureType
	pNext               *byte
	resourceDeviceIndex uint32
	memoryDeviceIndex   uint32
}

func (s *DeviceGroupBindSparseInfo) Vulkanize() *_vkDeviceGroupBindSparseInfo {
	rval := &_vkDeviceGroupBindSparseInfo{
		sType:               STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO, /*c1*/
		pNext:               (*byte)(s.PNext),                             /*cb*/
		resourceDeviceIndex: (uint32)(s.ResourceDeviceIndex),              /*cb*/
		memoryDeviceIndex:   (uint32)(s.MemoryDeviceIndex),                /*cb*/
	}
	return rval
}

// DeviceGroupCommandBufferBeginInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDeviceGroupCommandBufferBeginInfo.html
type DeviceGroupCommandBufferBeginInfo struct {
	// SType = STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO
	PNext      *byte
	DeviceMask uint32
}

type _vkDeviceGroupCommandBufferBeginInfo struct {
	sType      StructureType
	pNext      *byte
	deviceMask uint32
}

func (s *DeviceGroupCommandBufferBeginInfo) Vulkanize() *_vkDeviceGroupCommandBufferBeginInfo {
	rval := &_vkDeviceGroupCommandBufferBeginInfo{
		sType:      STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO, /*c1*/
		pNext:      (*byte)(s.PNext),                                      /*cb*/
		deviceMask: (uint32)(s.DeviceMask),                                /*cb*/
	}
	return rval
}

// DeviceGroupDeviceCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDeviceGroupDeviceCreateInfo.html
type DeviceGroupDeviceCreateInfo struct {
	// SType = STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO
	PNext *byte
	// physicalDeviceCount
	PPhysicalDevices []PhysicalDevice
}

type _vkDeviceGroupDeviceCreateInfo struct {
	sType               StructureType
	pNext               *byte
	physicalDeviceCount uint32
	pPhysicalDevices    *PhysicalDevice
}

func (s *DeviceGroupDeviceCreateInfo) Vulkanize() *_vkDeviceGroupDeviceCreateInfo {
	rval := &_vkDeviceGroupDeviceCreateInfo{
		sType:               STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO, /*c1*/
		pNext:               (*byte)(s.PNext),                               /*cb*/
		physicalDeviceCount: uint32(len(s.PPhysicalDevices)),                /*c6*/
		pPhysicalDevices:    (&s.PPhysicalDevices[0]),                       /*c rem*/
	}
	return rval
}

// DeviceGroupRenderPassBeginInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDeviceGroupRenderPassBeginInfo.html
type DeviceGroupRenderPassBeginInfo struct {
	// SType = STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO
	PNext      *byte
	DeviceMask uint32
	// deviceRenderAreaCount
	PDeviceRenderAreas []Rect2D
}

type _vkDeviceGroupRenderPassBeginInfo struct {
	sType                 StructureType
	pNext                 *byte
	deviceMask            uint32
	deviceRenderAreaCount uint32
	pDeviceRenderAreas    *_vkRect2D
}

func (s *DeviceGroupRenderPassBeginInfo) Vulkanize() *_vkDeviceGroupRenderPassBeginInfo {

	sl_pDeviceRenderAreas := make([]_vkRect2D, len(s.PDeviceRenderAreas))
	for i, v := range s.PDeviceRenderAreas {
		sl_pDeviceRenderAreas[i] = *(v.Vulkanize())
	}
	rval := &_vkDeviceGroupRenderPassBeginInfo{
		sType:                 STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO, /*c1*/
		pNext:                 (*byte)(s.PNext),                                   /*cb*/
		deviceMask:            (uint32)(s.DeviceMask),                             /*cb*/
		deviceRenderAreaCount: uint32(len(s.PDeviceRenderAreas)),                  /*c6*/
		pDeviceRenderAreas:    &(sl_pDeviceRenderAreas[0]),                        /*c rem*/
	}
	return rval
}

// DeviceGroupSubmitInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDeviceGroupSubmitInfo.html
type DeviceGroupSubmitInfo struct {
	// SType = STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO
	PNext *byte
	// waitSemaphoreCount
	PWaitSemaphoreDeviceIndices []uint32
	// commandBufferCount
	PCommandBufferDeviceMasks []uint32
	// signalSemaphoreCount
	PSignalSemaphoreDeviceIndices []uint32
}

type _vkDeviceGroupSubmitInfo struct {
	sType                         StructureType
	pNext                         *byte
	waitSemaphoreCount            uint32
	pWaitSemaphoreDeviceIndices   *uint32
	commandBufferCount            uint32
	pCommandBufferDeviceMasks     *uint32
	signalSemaphoreCount          uint32
	pSignalSemaphoreDeviceIndices *uint32
}

func (s *DeviceGroupSubmitInfo) Vulkanize() *_vkDeviceGroupSubmitInfo {
	rval := &_vkDeviceGroupSubmitInfo{
		sType:                         STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO,      /*c1*/
		pNext:                         (*byte)(s.PNext),                             /*cb*/
		waitSemaphoreCount:            uint32(len(s.PWaitSemaphoreDeviceIndices)),   /*c6*/
		pWaitSemaphoreDeviceIndices:   (&s.PWaitSemaphoreDeviceIndices[0]),          /*c rem*/
		commandBufferCount:            uint32(len(s.PCommandBufferDeviceMasks)),     /*c6*/
		pCommandBufferDeviceMasks:     (&s.PCommandBufferDeviceMasks[0]),            /*c rem*/
		signalSemaphoreCount:          uint32(len(s.PSignalSemaphoreDeviceIndices)), /*c6*/
		pSignalSemaphoreDeviceIndices: (&s.PSignalSemaphoreDeviceIndices[0]),        /*c rem*/
	}
	return rval
}

// DeviceQueueCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDeviceQueueCreateInfo.html
type DeviceQueueCreateInfo struct {
	// SType = STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO
	PNext            *byte
	Flags            DeviceQueueCreateFlags
	QueueFamilyIndex uint32
	// queueCount
	PQueuePriorities []float32
}

type _vkDeviceQueueCreateInfo struct {
	sType            StructureType
	pNext            *byte
	flags            DeviceQueueCreateFlags
	queueFamilyIndex uint32
	queueCount       uint32
	pQueuePriorities *float32
}

func (s *DeviceQueueCreateInfo) Vulkanize() *_vkDeviceQueueCreateInfo {
	rval := &_vkDeviceQueueCreateInfo{
		sType:            STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO, /*c1*/
		pNext:            (*byte)(s.PNext),                        /*cb*/
		flags:            (DeviceQueueCreateFlags)(s.Flags),       /*cb*/
		queueFamilyIndex: (uint32)(s.QueueFamilyIndex),            /*cb*/
		queueCount:       uint32(len(s.PQueuePriorities)),         /*c6*/
		pQueuePriorities: (&s.PQueuePriorities[0]),                /*c rem*/
	}
	return rval
}

// DeviceQueueInfo2: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDeviceQueueInfo2.html
type DeviceQueueInfo2 struct {
	// SType = STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2
	PNext            *byte
	Flags            DeviceQueueCreateFlags
	QueueFamilyIndex uint32
	QueueIndex       uint32
}

type _vkDeviceQueueInfo2 struct {
	sType            StructureType
	pNext            *byte
	flags            DeviceQueueCreateFlags
	queueFamilyIndex uint32
	queueIndex       uint32
}

func (s *DeviceQueueInfo2) Vulkanize() *_vkDeviceQueueInfo2 {
	rval := &_vkDeviceQueueInfo2{
		sType:            STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2, /*c1*/
		pNext:            (*byte)(s.PNext),                   /*cb*/
		flags:            (DeviceQueueCreateFlags)(s.Flags),  /*cb*/
		queueFamilyIndex: (uint32)(s.QueueFamilyIndex),       /*cb*/
		queueIndex:       (uint32)(s.QueueIndex),             /*cb*/
	}
	return rval
}

// DispatchIndirectCommand: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDispatchIndirectCommand.html
type DispatchIndirectCommand struct {
	X uint32
	Y uint32
	Z uint32
}

type _vkDispatchIndirectCommand = DispatchIndirectCommand

func (s *DispatchIndirectCommand) Vulkanize() *_vkDispatchIndirectCommand {
	rval := (*_vkDispatchIndirectCommand)(s)
	return rval
}

// DrawIndexedIndirectCommand: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDrawIndexedIndirectCommand.html
type DrawIndexedIndirectCommand struct {
	IndexCount    uint32
	InstanceCount uint32
	FirstIndex    uint32
	VertexOffset  int32
	FirstInstance uint32
}

type _vkDrawIndexedIndirectCommand = DrawIndexedIndirectCommand

func (s *DrawIndexedIndirectCommand) Vulkanize() *_vkDrawIndexedIndirectCommand {
	rval := (*_vkDrawIndexedIndirectCommand)(s)
	return rval
}

// DrawIndirectCommand: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkDrawIndirectCommand.html
type DrawIndirectCommand struct {
	VertexCount   uint32
	InstanceCount uint32
	FirstVertex   uint32
	FirstInstance uint32
}

type _vkDrawIndirectCommand = DrawIndirectCommand

func (s *DrawIndirectCommand) Vulkanize() *_vkDrawIndirectCommand {
	rval := (*_vkDrawIndirectCommand)(s)
	return rval
}

// EventCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkEventCreateInfo.html
type EventCreateInfo struct {
	// SType = STRUCTURE_TYPE_EVENT_CREATE_INFO
	PNext *byte
	Flags EventCreateFlags
}

type _vkEventCreateInfo struct {
	sType StructureType
	pNext *byte
	flags EventCreateFlags
}

func (s *EventCreateInfo) Vulkanize() *_vkEventCreateInfo {
	rval := &_vkEventCreateInfo{
		sType: STRUCTURE_TYPE_EVENT_CREATE_INFO, /*c1*/
		pNext: (*byte)(s.PNext),                 /*cb*/
		flags: (EventCreateFlags)(s.Flags),      /*cb*/
	}
	return rval
}

// ExportFenceCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkExportFenceCreateInfo.html
type ExportFenceCreateInfo struct {
	// SType = STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO
	PNext       *byte
	HandleTypes ExternalFenceHandleTypeFlags
}

type _vkExportFenceCreateInfo struct {
	sType       StructureType
	pNext       *byte
	handleTypes ExternalFenceHandleTypeFlags
}

func (s *ExportFenceCreateInfo) Vulkanize() *_vkExportFenceCreateInfo {
	rval := &_vkExportFenceCreateInfo{
		sType:       STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO,       /*c1*/
		pNext:       (*byte)(s.PNext),                              /*cb*/
		handleTypes: (ExternalFenceHandleTypeFlags)(s.HandleTypes), /*cb*/
	}
	return rval
}

// ExportMemoryAllocateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkExportMemoryAllocateInfo.html
type ExportMemoryAllocateInfo struct {
	// SType = STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO
	PNext       *byte
	HandleTypes ExternalMemoryHandleTypeFlags
}

type _vkExportMemoryAllocateInfo struct {
	sType       StructureType
	pNext       *byte
	handleTypes ExternalMemoryHandleTypeFlags
}

func (s *ExportMemoryAllocateInfo) Vulkanize() *_vkExportMemoryAllocateInfo {
	rval := &_vkExportMemoryAllocateInfo{
		sType:       STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO,     /*c1*/
		pNext:       (*byte)(s.PNext),                               /*cb*/
		handleTypes: (ExternalMemoryHandleTypeFlags)(s.HandleTypes), /*cb*/
	}
	return rval
}

// ExportSemaphoreCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkExportSemaphoreCreateInfo.html
type ExportSemaphoreCreateInfo struct {
	// SType = STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO
	PNext       *byte
	HandleTypes ExternalSemaphoreHandleTypeFlags
}

type _vkExportSemaphoreCreateInfo struct {
	sType       StructureType
	pNext       *byte
	handleTypes ExternalSemaphoreHandleTypeFlags
}

func (s *ExportSemaphoreCreateInfo) Vulkanize() *_vkExportSemaphoreCreateInfo {
	rval := &_vkExportSemaphoreCreateInfo{
		sType:       STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO,       /*c1*/
		pNext:       (*byte)(s.PNext),                                  /*cb*/
		handleTypes: (ExternalSemaphoreHandleTypeFlags)(s.HandleTypes), /*cb*/
	}
	return rval
}

// ExtensionProperties: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkExtensionProperties.html
type ExtensionProperties struct {
	ExtensionName [MAX_EXTENSION_NAME_SIZE]byte
	SpecVersion   uint32
}

// WARNING - struct ExtensionProperties is returned only, which is not yet handled in the binding
type _vkExtensionProperties struct {
	extensionName [MAX_EXTENSION_NAME_SIZE]byte
	specVersion   uint32
}

func (s *_vkExtensionProperties) Goify() *ExtensionProperties {
	rval := &ExtensionProperties{
		SpecVersion: (uint32)(s.specVersion),
	}
	copy(rval.ExtensionName[:], s.extensionName[:])
	return rval
}

// Extent2D: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkExtent2D.html
type Extent2D struct {
	Width  uint32
	Height uint32
}

type _vkExtent2D = Extent2D

func (s *Extent2D) Vulkanize() *_vkExtent2D {
	rval := (*_vkExtent2D)(s)
	return rval
}

// Extent3D: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkExtent3D.html
type Extent3D struct {
	Width  uint32
	Height uint32
	Depth  uint32
}

type _vkExtent3D = Extent3D

func (s *Extent3D) Vulkanize() *_vkExtent3D {
	rval := (*_vkExtent3D)(s)
	return rval
}

// ExternalBufferProperties: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkExternalBufferProperties.html
type ExternalBufferProperties struct {
	// SType = STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES
	PNext                    *byte
	ExternalMemoryProperties ExternalMemoryProperties
}

// WARNING - struct ExternalBufferProperties is returned only, which is not yet handled in the binding
type _vkExternalBufferProperties struct {
	sType                    StructureType
	pNext                    *byte
	externalMemoryProperties _vkExternalMemoryProperties
}

func (s *_vkExternalBufferProperties) Goify() *ExternalBufferProperties {
	rval := &ExternalBufferProperties{
		PNext:                    (*byte)(s.pNext),
		ExternalMemoryProperties: (ExternalMemoryProperties)(s.externalMemoryProperties),
	}
	return rval
}

// ExternalFenceProperties: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkExternalFenceProperties.html
type ExternalFenceProperties struct {
	// SType = STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES
	PNext                         *byte
	ExportFromImportedHandleTypes ExternalFenceHandleTypeFlags
	CompatibleHandleTypes         ExternalFenceHandleTypeFlags
	ExternalFenceFeatures         ExternalFenceFeatureFlags
}

// WARNING - struct ExternalFenceProperties is returned only, which is not yet handled in the binding
type _vkExternalFenceProperties struct {
	sType                         StructureType
	pNext                         *byte
	exportFromImportedHandleTypes ExternalFenceHandleTypeFlags
	compatibleHandleTypes         ExternalFenceHandleTypeFlags
	externalFenceFeatures         ExternalFenceFeatureFlags
}

func (s *_vkExternalFenceProperties) Goify() *ExternalFenceProperties {
	rval := &ExternalFenceProperties{
		PNext:                         (*byte)(s.pNext),
		ExportFromImportedHandleTypes: (ExternalFenceHandleTypeFlags)(s.exportFromImportedHandleTypes),
		CompatibleHandleTypes:         (ExternalFenceHandleTypeFlags)(s.compatibleHandleTypes),
		ExternalFenceFeatures:         (ExternalFenceFeatureFlags)(s.externalFenceFeatures),
	}
	return rval
}

// ExternalImageFormatProperties: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkExternalImageFormatProperties.html
type ExternalImageFormatProperties struct {
	// SType = STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES
	PNext                    *byte
	ExternalMemoryProperties ExternalMemoryProperties
}

// WARNING - struct ExternalImageFormatProperties is returned only, which is not yet handled in the binding
type _vkExternalImageFormatProperties struct {
	sType                    StructureType
	pNext                    *byte
	externalMemoryProperties _vkExternalMemoryProperties
}

func (s *_vkExternalImageFormatProperties) Goify() *ExternalImageFormatProperties {
	rval := &ExternalImageFormatProperties{
		PNext:                    (*byte)(s.pNext),
		ExternalMemoryProperties: (ExternalMemoryProperties)(s.externalMemoryProperties),
	}
	return rval
}

// ExternalMemoryBufferCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkExternalMemoryBufferCreateInfo.html
type ExternalMemoryBufferCreateInfo struct {
	// SType = STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO
	PNext       *byte
	HandleTypes ExternalMemoryHandleTypeFlags
}

type _vkExternalMemoryBufferCreateInfo struct {
	sType       StructureType
	pNext       *byte
	handleTypes ExternalMemoryHandleTypeFlags
}

func (s *ExternalMemoryBufferCreateInfo) Vulkanize() *_vkExternalMemoryBufferCreateInfo {
	rval := &_vkExternalMemoryBufferCreateInfo{
		sType:       STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO, /*c1*/
		pNext:       (*byte)(s.PNext),                                  /*cb*/
		handleTypes: (ExternalMemoryHandleTypeFlags)(s.HandleTypes),    /*cb*/
	}
	return rval
}

// ExternalMemoryImageCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkExternalMemoryImageCreateInfo.html
type ExternalMemoryImageCreateInfo struct {
	// SType = STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO
	PNext       *byte
	HandleTypes ExternalMemoryHandleTypeFlags
}

type _vkExternalMemoryImageCreateInfo struct {
	sType       StructureType
	pNext       *byte
	handleTypes ExternalMemoryHandleTypeFlags
}

func (s *ExternalMemoryImageCreateInfo) Vulkanize() *_vkExternalMemoryImageCreateInfo {
	rval := &_vkExternalMemoryImageCreateInfo{
		sType:       STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO, /*c1*/
		pNext:       (*byte)(s.PNext),                                 /*cb*/
		handleTypes: (ExternalMemoryHandleTypeFlags)(s.HandleTypes),   /*cb*/
	}
	return rval
}

// ExternalMemoryProperties: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkExternalMemoryProperties.html
type ExternalMemoryProperties struct {
	ExternalMemoryFeatures        ExternalMemoryFeatureFlags
	ExportFromImportedHandleTypes ExternalMemoryHandleTypeFlags
	CompatibleHandleTypes         ExternalMemoryHandleTypeFlags
}

type _vkExternalMemoryProperties = ExternalMemoryProperties

func (s *_vkExternalMemoryProperties) Goify() *ExternalMemoryProperties {
	rval := (*ExternalMemoryProperties)(s)
	return rval
}

// ExternalSemaphoreProperties: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkExternalSemaphoreProperties.html
type ExternalSemaphoreProperties struct {
	// SType = STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES
	PNext                         *byte
	ExportFromImportedHandleTypes ExternalSemaphoreHandleTypeFlags
	CompatibleHandleTypes         ExternalSemaphoreHandleTypeFlags
	ExternalSemaphoreFeatures     ExternalSemaphoreFeatureFlags
}

// WARNING - struct ExternalSemaphoreProperties is returned only, which is not yet handled in the binding
type _vkExternalSemaphoreProperties struct {
	sType                         StructureType
	pNext                         *byte
	exportFromImportedHandleTypes ExternalSemaphoreHandleTypeFlags
	compatibleHandleTypes         ExternalSemaphoreHandleTypeFlags
	externalSemaphoreFeatures     ExternalSemaphoreFeatureFlags
}

func (s *_vkExternalSemaphoreProperties) Goify() *ExternalSemaphoreProperties {
	rval := &ExternalSemaphoreProperties{
		PNext:                         (*byte)(s.pNext),
		ExportFromImportedHandleTypes: (ExternalSemaphoreHandleTypeFlags)(s.exportFromImportedHandleTypes),
		CompatibleHandleTypes:         (ExternalSemaphoreHandleTypeFlags)(s.compatibleHandleTypes),
		ExternalSemaphoreFeatures:     (ExternalSemaphoreFeatureFlags)(s.externalSemaphoreFeatures),
	}
	return rval
}

// FenceCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkFenceCreateInfo.html
type FenceCreateInfo struct {
	// SType = STRUCTURE_TYPE_FENCE_CREATE_INFO
	PNext *byte
	Flags FenceCreateFlags
}

type _vkFenceCreateInfo struct {
	sType StructureType
	pNext *byte
	flags FenceCreateFlags
}

func (s *FenceCreateInfo) Vulkanize() *_vkFenceCreateInfo {
	rval := &_vkFenceCreateInfo{
		sType: STRUCTURE_TYPE_FENCE_CREATE_INFO, /*c1*/
		pNext: (*byte)(s.PNext),                 /*cb*/
		flags: (FenceCreateFlags)(s.Flags),      /*cb*/
	}
	return rval
}

// FormatProperties: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkFormatProperties.html
type FormatProperties struct {
	LinearTilingFeatures  FormatFeatureFlags
	OptimalTilingFeatures FormatFeatureFlags
	BufferFeatures        FormatFeatureFlags
}

type _vkFormatProperties = FormatProperties

func (s *_vkFormatProperties) Goify() *FormatProperties {
	rval := (*FormatProperties)(s)
	return rval
}

// FormatProperties2: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkFormatProperties2.html
type FormatProperties2 struct {
	// SType = STRUCTURE_TYPE_FORMAT_PROPERTIES_2
	PNext            *byte
	FormatProperties FormatProperties
}

// WARNING - struct FormatProperties2 is returned only, which is not yet handled in the binding
type _vkFormatProperties2 struct {
	sType            StructureType
	pNext            *byte
	formatProperties _vkFormatProperties
}

func (s *_vkFormatProperties2) Goify() *FormatProperties2 {
	rval := &FormatProperties2{
		PNext:            (*byte)(s.pNext),
		FormatProperties: (FormatProperties)(s.formatProperties),
	}
	return rval
}

// FramebufferCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkFramebufferCreateInfo.html
type FramebufferCreateInfo struct {
	// SType = STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO
	PNext      *byte
	Flags      FramebufferCreateFlags
	RenderPass RenderPass
	// attachmentCount
	PAttachments []ImageView
	Width        uint32
	Height       uint32
	Layers       uint32
}

type _vkFramebufferCreateInfo struct {
	sType           StructureType
	pNext           *byte
	flags           FramebufferCreateFlags
	renderPass      RenderPass
	attachmentCount uint32
	pAttachments    *ImageView
	width           uint32
	height          uint32
	layers          uint32
}

func (s *FramebufferCreateInfo) Vulkanize() *_vkFramebufferCreateInfo {
	rval := &_vkFramebufferCreateInfo{
		sType:           STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO, /*c1*/
		pNext:           (*byte)(s.PNext),                       /*cb*/
		flags:           (FramebufferCreateFlags)(s.Flags),      /*cb*/
		renderPass:      (RenderPass)(s.RenderPass),             /*cb*/
		attachmentCount: uint32(len(s.PAttachments)),            /*c6*/
		pAttachments:    (&s.PAttachments[0]),                   /*c rem*/
		width:           (uint32)(s.Width),                      /*cb*/
		height:          (uint32)(s.Height),                     /*cb*/
		layers:          (uint32)(s.Layers),                     /*cb*/
	}
	return rval
}

// GraphicsPipelineCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkGraphicsPipelineCreateInfo.html
type GraphicsPipelineCreateInfo struct {
	// SType = STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO
	PNext *byte
	Flags PipelineCreateFlags
	// stageCount
	PStages             []PipelineShaderStageCreateInfo
	PVertexInputState   *PipelineVertexInputStateCreateInfo
	PInputAssemblyState *PipelineInputAssemblyStateCreateInfo
	PTessellationState  *PipelineTessellationStateCreateInfo
	PViewportState      *PipelineViewportStateCreateInfo
	PRasterizationState *PipelineRasterizationStateCreateInfo
	PMultisampleState   *PipelineMultisampleStateCreateInfo
	PDepthStencilState  *PipelineDepthStencilStateCreateInfo
	PColorBlendState    *PipelineColorBlendStateCreateInfo
	PDynamicState       *PipelineDynamicStateCreateInfo
	Layout              PipelineLayout
	RenderPass          RenderPass
	Subpass             uint32
	BasePipelineHandle  Pipeline
	BasePipelineIndex   int32
}

type _vkGraphicsPipelineCreateInfo struct {
	sType               StructureType
	pNext               *byte
	flags               PipelineCreateFlags
	stageCount          uint32
	pStages             *_vkPipelineShaderStageCreateInfo
	pVertexInputState   *_vkPipelineVertexInputStateCreateInfo
	pInputAssemblyState *_vkPipelineInputAssemblyStateCreateInfo
	pTessellationState  *_vkPipelineTessellationStateCreateInfo
	pViewportState      *_vkPipelineViewportStateCreateInfo
	pRasterizationState *_vkPipelineRasterizationStateCreateInfo
	pMultisampleState   *_vkPipelineMultisampleStateCreateInfo
	pDepthStencilState  *_vkPipelineDepthStencilStateCreateInfo
	pColorBlendState    *_vkPipelineColorBlendStateCreateInfo
	pDynamicState       *_vkPipelineDynamicStateCreateInfo
	layout              PipelineLayout
	renderPass          RenderPass
	subpass             uint32
	basePipelineHandle  Pipeline
	basePipelineIndex   int32
}

func (s *GraphicsPipelineCreateInfo) Vulkanize() *_vkGraphicsPipelineCreateInfo {

	sl_pStages := make([]_vkPipelineShaderStageCreateInfo, len(s.PStages))
	for i, v := range s.PStages {
		sl_pStages[i] = *(v.Vulkanize())
	}
	rval := &_vkGraphicsPipelineCreateInfo{
		sType:               STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO, /*c1*/
		pNext:               (*byte)(s.PNext),                             /*cb*/
		flags:               (PipelineCreateFlags)(s.Flags),               /*cb*/
		stageCount:          uint32(len(s.PStages)),                       /*c6*/
		pStages:             &(sl_pStages[0]),                             /*c rem*/
		pVertexInputState:   (s.PVertexInputState.Vulkanize()),            /*c rem*/
		pInputAssemblyState: (s.PInputAssemblyState.Vulkanize()),          /*c rem*/
		pTessellationState:  (s.PTessellationState.Vulkanize()),           /*c rem*/
		pViewportState:      (s.PViewportState.Vulkanize()),               /*c rem*/
		pRasterizationState: (s.PRasterizationState.Vulkanize()),          /*c rem*/
		pMultisampleState:   (s.PMultisampleState.Vulkanize()),            /*c rem*/
		pDepthStencilState:  (s.PDepthStencilState.Vulkanize()),           /*c rem*/
		pColorBlendState:    (s.PColorBlendState.Vulkanize()),             /*c rem*/
		pDynamicState:       (s.PDynamicState.Vulkanize()),                /*c rem*/
		layout:              (PipelineLayout)(s.Layout),                   /*cb*/
		renderPass:          (RenderPass)(s.RenderPass),                   /*cb*/
		subpass:             (uint32)(s.Subpass),                          /*cb*/
		basePipelineHandle:  (Pipeline)(s.BasePipelineHandle),             /*cb*/
		basePipelineIndex:   (int32)(s.BasePipelineIndex),                 /*cb*/
	}
	return rval
}

// ImageCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageCreateInfo.html
type ImageCreateInfo struct {
	// SType = STRUCTURE_TYPE_IMAGE_CREATE_INFO
	PNext       *byte
	Flags       ImageCreateFlags
	ImageType   ImageType
	Format      Format
	Extent      Extent3D
	MipLevels   uint32
	ArrayLayers uint32
	Samples     SampleCountFlagBits
	Tiling      ImageTiling
	Usage       ImageUsageFlags
	SharingMode SharingMode
	// queueFamilyIndexCount
	PQueueFamilyIndices []uint32
	InitialLayout       ImageLayout
}

type _vkImageCreateInfo struct {
	sType                 StructureType
	pNext                 *byte
	flags                 ImageCreateFlags
	imageType             ImageType
	format                Format
	extent                _vkExtent3D
	mipLevels             uint32
	arrayLayers           uint32
	samples               SampleCountFlagBits
	tiling                ImageTiling
	usage                 ImageUsageFlags
	sharingMode           SharingMode
	queueFamilyIndexCount uint32
	pQueueFamilyIndices   *uint32
	initialLayout         ImageLayout
}

func (s *ImageCreateInfo) Vulkanize() *_vkImageCreateInfo {
	rval := &_vkImageCreateInfo{
		sType:                 STRUCTURE_TYPE_IMAGE_CREATE_INFO,   /*c1*/
		pNext:                 (*byte)(s.PNext),                   /*cb*/
		flags:                 (ImageCreateFlags)(s.Flags),        /*cb*/
		imageType:             (ImageType)(s.ImageType),           /*cb*/
		format:                (Format)(s.Format),                 /*cb*/
		extent:                (_vkExtent3D)(s.Extent),            /*cb*/
		mipLevels:             (uint32)(s.MipLevels),              /*cb*/
		arrayLayers:           (uint32)(s.ArrayLayers),            /*cb*/
		samples:               (SampleCountFlagBits)(s.Samples),   /*cb*/
		tiling:                (ImageTiling)(s.Tiling),            /*cb*/
		usage:                 (ImageUsageFlags)(s.Usage),         /*cb*/
		sharingMode:           (SharingMode)(s.SharingMode),       /*cb*/
		queueFamilyIndexCount: uint32(len(s.PQueueFamilyIndices)), /*c6*/
		pQueueFamilyIndices:   (&s.PQueueFamilyIndices[0]),        /*c rem*/
		initialLayout:         (ImageLayout)(s.InitialLayout),     /*cb*/
	}
	return rval
}

// ImageFormatProperties: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageFormatProperties.html
type ImageFormatProperties struct {
	MaxExtent       Extent3D
	MaxMipLevels    uint32
	MaxArrayLayers  uint32
	SampleCounts    SampleCountFlags
	MaxResourceSize DeviceSize
}

// WARNING - struct ImageFormatProperties is returned only, which is not yet handled in the binding
type _vkImageFormatProperties struct {
	maxExtent       _vkExtent3D
	maxMipLevels    uint32
	maxArrayLayers  uint32
	sampleCounts    SampleCountFlags
	maxResourceSize DeviceSize
}

func (s *_vkImageFormatProperties) Goify() *ImageFormatProperties {
	rval := &ImageFormatProperties{
		MaxExtent:       (Extent3D)(s.maxExtent),
		MaxMipLevels:    (uint32)(s.maxMipLevels),
		MaxArrayLayers:  (uint32)(s.maxArrayLayers),
		SampleCounts:    (SampleCountFlags)(s.sampleCounts),
		MaxResourceSize: (DeviceSize)(s.maxResourceSize),
	}
	return rval
}

// ImageFormatProperties2: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageFormatProperties2.html
type ImageFormatProperties2 struct {
	// SType = STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2
	PNext                 *byte
	ImageFormatProperties ImageFormatProperties
}

// WARNING - struct ImageFormatProperties2 is returned only, which is not yet handled in the binding
type _vkImageFormatProperties2 struct {
	sType                 StructureType
	pNext                 *byte
	imageFormatProperties _vkImageFormatProperties
}

func (s *_vkImageFormatProperties2) Goify() *ImageFormatProperties2 {
	rval := &ImageFormatProperties2{
		PNext:                 (*byte)(s.pNext),
		ImageFormatProperties: *(s.imageFormatProperties.Goify()),
	}
	return rval
}

// ImageMemoryBarrier: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageMemoryBarrier.html
type ImageMemoryBarrier struct {
	// SType = STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER
	PNext               *byte
	SrcAccessMask       AccessFlags
	DstAccessMask       AccessFlags
	OldLayout           ImageLayout
	NewLayout           ImageLayout
	SrcQueueFamilyIndex uint32
	DstQueueFamilyIndex uint32
	Image               Image
	SubresourceRange    ImageSubresourceRange
}

type _vkImageMemoryBarrier struct {
	sType               StructureType
	pNext               *byte
	srcAccessMask       AccessFlags
	dstAccessMask       AccessFlags
	oldLayout           ImageLayout
	newLayout           ImageLayout
	srcQueueFamilyIndex uint32
	dstQueueFamilyIndex uint32
	image               Image
	subresourceRange    _vkImageSubresourceRange
}

func (s *ImageMemoryBarrier) Vulkanize() *_vkImageMemoryBarrier {
	rval := &_vkImageMemoryBarrier{
		sType:               STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER,            /*c1*/
		pNext:               (*byte)(s.PNext),                               /*cb*/
		srcAccessMask:       (AccessFlags)(s.SrcAccessMask),                 /*cb*/
		dstAccessMask:       (AccessFlags)(s.DstAccessMask),                 /*cb*/
		oldLayout:           (ImageLayout)(s.OldLayout),                     /*cb*/
		newLayout:           (ImageLayout)(s.NewLayout),                     /*cb*/
		srcQueueFamilyIndex: (uint32)(s.SrcQueueFamilyIndex),                /*cb*/
		dstQueueFamilyIndex: (uint32)(s.DstQueueFamilyIndex),                /*cb*/
		image:               (Image)(s.Image),                               /*cb*/
		subresourceRange:    (_vkImageSubresourceRange)(s.SubresourceRange), /*cb*/
	}
	return rval
}

// ImageMemoryRequirementsInfo2: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageMemoryRequirementsInfo2.html
type ImageMemoryRequirementsInfo2 struct {
	// SType = STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2
	PNext *byte
	Image Image
}

type _vkImageMemoryRequirementsInfo2 struct {
	sType StructureType
	pNext *byte
	image Image
}

func (s *ImageMemoryRequirementsInfo2) Vulkanize() *_vkImageMemoryRequirementsInfo2 {
	rval := &_vkImageMemoryRequirementsInfo2{
		sType: STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2, /*c1*/
		pNext: (*byte)(s.PNext),                                /*cb*/
		image: (Image)(s.Image),                                /*cb*/
	}
	return rval
}

// ImagePlaneMemoryRequirementsInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImagePlaneMemoryRequirementsInfo.html
type ImagePlaneMemoryRequirementsInfo struct {
	// SType = STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO
	PNext       *byte
	PlaneAspect ImageAspectFlagBits
}

type _vkImagePlaneMemoryRequirementsInfo struct {
	sType       StructureType
	pNext       *byte
	planeAspect ImageAspectFlagBits
}

func (s *ImagePlaneMemoryRequirementsInfo) Vulkanize() *_vkImagePlaneMemoryRequirementsInfo {
	rval := &_vkImagePlaneMemoryRequirementsInfo{
		sType:       STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO, /*c1*/
		pNext:       (*byte)(s.PNext),                                    /*cb*/
		planeAspect: (ImageAspectFlagBits)(s.PlaneAspect),                /*cb*/
	}
	return rval
}

// ImageSparseMemoryRequirementsInfo2: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageSparseMemoryRequirementsInfo2.html
type ImageSparseMemoryRequirementsInfo2 struct {
	// SType = STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2
	PNext *byte
	Image Image
}

type _vkImageSparseMemoryRequirementsInfo2 struct {
	sType StructureType
	pNext *byte
	image Image
}

func (s *ImageSparseMemoryRequirementsInfo2) Vulkanize() *_vkImageSparseMemoryRequirementsInfo2 {
	rval := &_vkImageSparseMemoryRequirementsInfo2{
		sType: STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2, /*c1*/
		pNext: (*byte)(s.PNext),                                       /*cb*/
		image: (Image)(s.Image),                                       /*cb*/
	}
	return rval
}

// ImageSubresource: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageSubresource.html
type ImageSubresource struct {
	AspectMask ImageAspectFlags
	MipLevel   uint32
	ArrayLayer uint32
}

type _vkImageSubresource = ImageSubresource

func (s *ImageSubresource) Vulkanize() *_vkImageSubresource {
	rval := (*_vkImageSubresource)(s)
	return rval
}

// ImageSubresourceRange: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageSubresourceRange.html
type ImageSubresourceRange struct {
	AspectMask     ImageAspectFlags
	BaseMipLevel   uint32
	LevelCount     uint32
	BaseArrayLayer uint32
	LayerCount     uint32
}

type _vkImageSubresourceRange = ImageSubresourceRange

func (s *ImageSubresourceRange) Vulkanize() *_vkImageSubresourceRange {
	rval := (*_vkImageSubresourceRange)(s)
	return rval
}

// ImageViewCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageViewCreateInfo.html
type ImageViewCreateInfo struct {
	// SType = STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO
	PNext            *byte
	Flags            ImageViewCreateFlags
	Image            Image
	ViewType         ImageViewType
	Format           Format
	Components       ComponentMapping
	SubresourceRange ImageSubresourceRange
}

type _vkImageViewCreateInfo struct {
	sType            StructureType
	pNext            *byte
	flags            ImageViewCreateFlags
	image            Image
	viewType         ImageViewType
	format           Format
	components       _vkComponentMapping
	subresourceRange _vkImageSubresourceRange
}

func (s *ImageViewCreateInfo) Vulkanize() *_vkImageViewCreateInfo {
	rval := &_vkImageViewCreateInfo{
		sType:            STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO,          /*c1*/
		pNext:            (*byte)(s.PNext),                               /*cb*/
		flags:            (ImageViewCreateFlags)(s.Flags),                /*cb*/
		image:            (Image)(s.Image),                               /*cb*/
		viewType:         (ImageViewType)(s.ViewType),                    /*cb*/
		format:           (Format)(s.Format),                             /*cb*/
		components:       (_vkComponentMapping)(s.Components),            /*cb*/
		subresourceRange: (_vkImageSubresourceRange)(s.SubresourceRange), /*cb*/
	}
	return rval
}

// ImageViewUsageCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageViewUsageCreateInfo.html
type ImageViewUsageCreateInfo struct {
	// SType = STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO
	PNext *byte
	Usage ImageUsageFlags
}

type _vkImageViewUsageCreateInfo struct {
	sType StructureType
	pNext *byte
	usage ImageUsageFlags
}

func (s *ImageViewUsageCreateInfo) Vulkanize() *_vkImageViewUsageCreateInfo {
	rval := &_vkImageViewUsageCreateInfo{
		sType: STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO, /*c1*/
		pNext: (*byte)(s.PNext),                            /*cb*/
		usage: (ImageUsageFlags)(s.Usage),                  /*cb*/
	}
	return rval
}

// InputAttachmentAspectReference: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkInputAttachmentAspectReference.html
type InputAttachmentAspectReference struct {
	Subpass              uint32
	InputAttachmentIndex uint32
	AspectMask           ImageAspectFlags
}

type _vkInputAttachmentAspectReference = InputAttachmentAspectReference

func (s *InputAttachmentAspectReference) Vulkanize() *_vkInputAttachmentAspectReference {
	rval := (*_vkInputAttachmentAspectReference)(s)
	return rval
}

// InstanceCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkInstanceCreateInfo.html
type InstanceCreateInfo struct {
	// SType = STRUCTURE_TYPE_INSTANCE_CREATE_INFO
	PNext            *byte
	Flags            InstanceCreateFlags
	PApplicationInfo *ApplicationInfo
	// enabledLayerCount
	PpEnabledLayerNames []string
	// enabledExtensionCount
	PpEnabledExtensionNames []string
}

type _vkInstanceCreateInfo struct {
	sType                   StructureType
	pNext                   *byte
	flags                   InstanceCreateFlags
	pApplicationInfo        *_vkApplicationInfo
	enabledLayerCount       uint32
	ppEnabledLayerNames     **byte
	enabledExtensionCount   uint32
	ppEnabledExtensionNames **byte
}

func (s *InstanceCreateInfo) Vulkanize() *_vkInstanceCreateInfo {

	sl_ppEnabledLayerNames := make([]*byte, len(s.PpEnabledLayerNames))
	for i, v := range s.PpEnabledLayerNames {
		sl_ppEnabledLayerNames[i] = sys_stringToBytePointer(v)
	}

	sl_ppEnabledExtensionNames := make([]*byte, len(s.PpEnabledExtensionNames))
	for i, v := range s.PpEnabledExtensionNames {
		sl_ppEnabledExtensionNames[i] = sys_stringToBytePointer(v)
	}
	rval := &_vkInstanceCreateInfo{
		sType:                   STRUCTURE_TYPE_INSTANCE_CREATE_INFO,    /*c1*/
		pNext:                   (*byte)(s.PNext),                       /*cb*/
		flags:                   (InstanceCreateFlags)(s.Flags),         /*cb*/
		pApplicationInfo:        (s.PApplicationInfo.Vulkanize()),       /*c rem*/
		enabledLayerCount:       uint32(len(s.PpEnabledLayerNames)),     /*c6*/
		ppEnabledLayerNames:     &(sl_ppEnabledLayerNames[0]),           /*c rem*/
		enabledExtensionCount:   uint32(len(s.PpEnabledExtensionNames)), /*c6*/
		ppEnabledExtensionNames: &(sl_ppEnabledExtensionNames[0]),       /*c rem*/
	}
	return rval
}

// LayerProperties: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkLayerProperties.html
type LayerProperties struct {
	LayerName             [MAX_EXTENSION_NAME_SIZE]byte
	SpecVersion           uint32
	ImplementationVersion uint32
	Description           [MAX_DESCRIPTION_SIZE]byte
}

// WARNING - struct LayerProperties is returned only, which is not yet handled in the binding
type _vkLayerProperties struct {
	layerName             [MAX_EXTENSION_NAME_SIZE]byte
	specVersion           uint32
	implementationVersion uint32
	description           [MAX_DESCRIPTION_SIZE]byte
}

func (s *_vkLayerProperties) Goify() *LayerProperties {
	rval := &LayerProperties{
		SpecVersion:           (uint32)(s.specVersion),
		ImplementationVersion: (uint32)(s.implementationVersion),
	}
	copy(rval.LayerName[:], s.layerName[:])
	copy(rval.Description[:], s.description[:])
	return rval
}

// MappedMemoryRange: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkMappedMemoryRange.html
type MappedMemoryRange struct {
	// SType = STRUCTURE_TYPE_MAPPED_MEMORY_RANGE
	PNext  *byte
	Memory DeviceMemory
	Offset DeviceSize
	Size   DeviceSize
}

type _vkMappedMemoryRange struct {
	sType  StructureType
	pNext  *byte
	memory DeviceMemory
	offset DeviceSize
	size   DeviceSize
}

func (s *MappedMemoryRange) Vulkanize() *_vkMappedMemoryRange {
	rval := &_vkMappedMemoryRange{
		sType:  STRUCTURE_TYPE_MAPPED_MEMORY_RANGE, /*c1*/
		pNext:  (*byte)(s.PNext),                   /*cb*/
		memory: (DeviceMemory)(s.Memory),           /*cb*/
		offset: (DeviceSize)(s.Offset),             /*cb*/
		size:   (DeviceSize)(s.Size),               /*cb*/
	}
	return rval
}

// MemoryAllocateFlagsInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkMemoryAllocateFlagsInfo.html
type MemoryAllocateFlagsInfo struct {
	// SType = STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO
	PNext      *byte
	Flags      MemoryAllocateFlags
	DeviceMask uint32
}

type _vkMemoryAllocateFlagsInfo struct {
	sType      StructureType
	pNext      *byte
	flags      MemoryAllocateFlags
	deviceMask uint32
}

func (s *MemoryAllocateFlagsInfo) Vulkanize() *_vkMemoryAllocateFlagsInfo {
	rval := &_vkMemoryAllocateFlagsInfo{
		sType:      STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO, /*c1*/
		pNext:      (*byte)(s.PNext),                          /*cb*/
		flags:      (MemoryAllocateFlags)(s.Flags),            /*cb*/
		deviceMask: (uint32)(s.DeviceMask),                    /*cb*/
	}
	return rval
}

// MemoryAllocateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkMemoryAllocateInfo.html
type MemoryAllocateInfo struct {
	// SType = STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO
	PNext           *byte
	AllocationSize  DeviceSize
	MemoryTypeIndex uint32
}

type _vkMemoryAllocateInfo struct {
	sType           StructureType
	pNext           *byte
	allocationSize  DeviceSize
	memoryTypeIndex uint32
}

func (s *MemoryAllocateInfo) Vulkanize() *_vkMemoryAllocateInfo {
	rval := &_vkMemoryAllocateInfo{
		sType:           STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO, /*c1*/
		pNext:           (*byte)(s.PNext),                    /*cb*/
		allocationSize:  (DeviceSize)(s.AllocationSize),      /*cb*/
		memoryTypeIndex: (uint32)(s.MemoryTypeIndex),         /*cb*/
	}
	return rval
}

// MemoryBarrier: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkMemoryBarrier.html
type MemoryBarrier struct {
	// SType = STRUCTURE_TYPE_MEMORY_BARRIER
	PNext         *byte
	SrcAccessMask AccessFlags
	DstAccessMask AccessFlags
}

type _vkMemoryBarrier struct {
	sType         StructureType
	pNext         *byte
	srcAccessMask AccessFlags
	dstAccessMask AccessFlags
}

func (s *MemoryBarrier) Vulkanize() *_vkMemoryBarrier {
	rval := &_vkMemoryBarrier{
		sType:         STRUCTURE_TYPE_MEMORY_BARRIER,  /*c1*/
		pNext:         (*byte)(s.PNext),               /*cb*/
		srcAccessMask: (AccessFlags)(s.SrcAccessMask), /*cb*/
		dstAccessMask: (AccessFlags)(s.DstAccessMask), /*cb*/
	}
	return rval
}

// MemoryDedicatedAllocateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkMemoryDedicatedAllocateInfo.html
type MemoryDedicatedAllocateInfo struct {
	// SType = STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO
	PNext  *byte
	Image  Image
	Buffer Buffer
}

type _vkMemoryDedicatedAllocateInfo struct {
	sType  StructureType
	pNext  *byte
	image  Image
	buffer Buffer
}

func (s *MemoryDedicatedAllocateInfo) Vulkanize() *_vkMemoryDedicatedAllocateInfo {
	rval := &_vkMemoryDedicatedAllocateInfo{
		sType:  STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO, /*c1*/
		pNext:  (*byte)(s.PNext),                              /*cb*/
		image:  (Image)(s.Image),                              /*cb*/
		buffer: (Buffer)(s.Buffer),                            /*cb*/
	}
	return rval
}

// MemoryDedicatedRequirements: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkMemoryDedicatedRequirements.html
type MemoryDedicatedRequirements struct {
	// SType = STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS
	PNext                       *byte
	PrefersDedicatedAllocation  bool
	RequiresDedicatedAllocation bool
}

// WARNING - struct MemoryDedicatedRequirements is returned only, which is not yet handled in the binding
type _vkMemoryDedicatedRequirements struct {
	sType                       StructureType
	pNext                       *byte
	prefersDedicatedAllocation  Bool32
	requiresDedicatedAllocation Bool32
}

func (s *_vkMemoryDedicatedRequirements) Goify() *MemoryDedicatedRequirements {
	rval := &MemoryDedicatedRequirements{
		PNext:                       (*byte)(s.pNext),
		PrefersDedicatedAllocation:  translatePublic_Bool32(s.prefersDedicatedAllocation),  /*default*/
		RequiresDedicatedAllocation: translatePublic_Bool32(s.requiresDedicatedAllocation), /*default*/
	}
	return rval
}

// MemoryHeap: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkMemoryHeap.html
type MemoryHeap struct {
	Size  DeviceSize
	Flags MemoryHeapFlags
}

type _vkMemoryHeap = MemoryHeap

func (s *_vkMemoryHeap) Goify() *MemoryHeap {
	rval := (*MemoryHeap)(s)
	return rval
}

// MemoryRequirements: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkMemoryRequirements.html
type MemoryRequirements struct {
	Size           DeviceSize
	Alignment      DeviceSize
	MemoryTypeBits uint32
}

type _vkMemoryRequirements = MemoryRequirements

func (s *_vkMemoryRequirements) Goify() *MemoryRequirements {
	rval := (*MemoryRequirements)(s)
	return rval
}

// MemoryRequirements2: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkMemoryRequirements2.html
type MemoryRequirements2 struct {
	// SType = STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2
	PNext              *byte
	MemoryRequirements MemoryRequirements
}

// WARNING - struct MemoryRequirements2 is returned only, which is not yet handled in the binding
type _vkMemoryRequirements2 struct {
	sType              StructureType
	pNext              *byte
	memoryRequirements _vkMemoryRequirements
}

func (s *_vkMemoryRequirements2) Goify() *MemoryRequirements2 {
	rval := &MemoryRequirements2{
		PNext:              (*byte)(s.pNext),
		MemoryRequirements: (MemoryRequirements)(s.memoryRequirements),
	}
	return rval
}

// MemoryType: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkMemoryType.html
type MemoryType struct {
	PropertyFlags MemoryPropertyFlags
	HeapIndex     uint32
}

type _vkMemoryType = MemoryType

func (s *_vkMemoryType) Goify() *MemoryType {
	rval := (*MemoryType)(s)
	return rval
}

// Offset2D: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkOffset2D.html
type Offset2D struct {
	X int32
	Y int32
}

type _vkOffset2D = Offset2D

func (s *Offset2D) Vulkanize() *_vkOffset2D {
	rval := (*_vkOffset2D)(s)
	return rval
}

// Offset3D: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkOffset3D.html
type Offset3D struct {
	X int32
	Y int32
	Z int32
}

type _vkOffset3D = Offset3D

func (s *Offset3D) Vulkanize() *_vkOffset3D {
	rval := (*_vkOffset3D)(s)
	return rval
}

// PhysicalDevice16BitStorageFeatures: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevice16BitStorageFeatures.html
type PhysicalDevice16BitStorageFeatures struct {
	// SType = STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES
	PNext                              *byte
	StorageBuffer16BitAccess           bool
	UniformAndStorageBuffer16BitAccess bool
	StoragePushConstant16              bool
	StorageInputOutput16               bool
}

type _vkPhysicalDevice16BitStorageFeatures struct {
	sType                              StructureType
	pNext                              *byte
	storageBuffer16BitAccess           Bool32
	uniformAndStorageBuffer16BitAccess Bool32
	storagePushConstant16              Bool32
	storageInputOutput16               Bool32
}

func (s *PhysicalDevice16BitStorageFeatures) Vulkanize() *_vkPhysicalDevice16BitStorageFeatures {
	rval := &_vkPhysicalDevice16BitStorageFeatures{
		sType:                              STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES,          /*c1*/
		pNext:                              (*byte)(s.PNext),                                               /*cb*/
		storageBuffer16BitAccess:           translateInternal_Bool32(s.StorageBuffer16BitAccess),           /*default*/
		uniformAndStorageBuffer16BitAccess: translateInternal_Bool32(s.UniformAndStorageBuffer16BitAccess), /*default*/
		storagePushConstant16:              translateInternal_Bool32(s.StoragePushConstant16),              /*default*/
		storageInputOutput16:               translateInternal_Bool32(s.StorageInputOutput16),               /*default*/
	}
	return rval
}

// PhysicalDeviceExternalBufferInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExternalBufferInfo.html
type PhysicalDeviceExternalBufferInfo struct {
	// SType = STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO
	PNext      *byte
	Flags      BufferCreateFlags
	Usage      BufferUsageFlags
	HandleType ExternalMemoryHandleTypeFlagBits
}

type _vkPhysicalDeviceExternalBufferInfo struct {
	sType      StructureType
	pNext      *byte
	flags      BufferCreateFlags
	usage      BufferUsageFlags
	handleType ExternalMemoryHandleTypeFlagBits
}

func (s *PhysicalDeviceExternalBufferInfo) Vulkanize() *_vkPhysicalDeviceExternalBufferInfo {
	rval := &_vkPhysicalDeviceExternalBufferInfo{
		sType:      STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO, /*c1*/
		pNext:      (*byte)(s.PNext),                                    /*cb*/
		flags:      (BufferCreateFlags)(s.Flags),                        /*cb*/
		usage:      (BufferUsageFlags)(s.Usage),                         /*cb*/
		handleType: (ExternalMemoryHandleTypeFlagBits)(s.HandleType),    /*cb*/
	}
	return rval
}

// PhysicalDeviceExternalFenceInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExternalFenceInfo.html
type PhysicalDeviceExternalFenceInfo struct {
	// SType = STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO
	PNext      *byte
	HandleType ExternalFenceHandleTypeFlagBits
}

type _vkPhysicalDeviceExternalFenceInfo struct {
	sType      StructureType
	pNext      *byte
	handleType ExternalFenceHandleTypeFlagBits
}

func (s *PhysicalDeviceExternalFenceInfo) Vulkanize() *_vkPhysicalDeviceExternalFenceInfo {
	rval := &_vkPhysicalDeviceExternalFenceInfo{
		sType:      STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO, /*c1*/
		pNext:      (*byte)(s.PNext),                                   /*cb*/
		handleType: (ExternalFenceHandleTypeFlagBits)(s.HandleType),    /*cb*/
	}
	return rval
}

// PhysicalDeviceExternalImageFormatInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExternalImageFormatInfo.html
type PhysicalDeviceExternalImageFormatInfo struct {
	// SType = STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO
	PNext      *byte
	HandleType ExternalMemoryHandleTypeFlagBits
}

type _vkPhysicalDeviceExternalImageFormatInfo struct {
	sType      StructureType
	pNext      *byte
	handleType ExternalMemoryHandleTypeFlagBits
}

func (s *PhysicalDeviceExternalImageFormatInfo) Vulkanize() *_vkPhysicalDeviceExternalImageFormatInfo {
	rval := &_vkPhysicalDeviceExternalImageFormatInfo{
		sType:      STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO, /*c1*/
		pNext:      (*byte)(s.PNext),                                          /*cb*/
		handleType: (ExternalMemoryHandleTypeFlagBits)(s.HandleType),          /*cb*/
	}
	return rval
}

// PhysicalDeviceExternalSemaphoreInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceExternalSemaphoreInfo.html
type PhysicalDeviceExternalSemaphoreInfo struct {
	// SType = STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO
	PNext      *byte
	HandleType ExternalSemaphoreHandleTypeFlagBits
}

type _vkPhysicalDeviceExternalSemaphoreInfo struct {
	sType      StructureType
	pNext      *byte
	handleType ExternalSemaphoreHandleTypeFlagBits
}

func (s *PhysicalDeviceExternalSemaphoreInfo) Vulkanize() *_vkPhysicalDeviceExternalSemaphoreInfo {
	rval := &_vkPhysicalDeviceExternalSemaphoreInfo{
		sType:      STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO, /*c1*/
		pNext:      (*byte)(s.PNext),                                       /*cb*/
		handleType: (ExternalSemaphoreHandleTypeFlagBits)(s.HandleType),    /*cb*/
	}
	return rval
}

// PhysicalDeviceFeatures: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html
type PhysicalDeviceFeatures struct {
	RobustBufferAccess                      bool
	FullDrawIndexUint32                     bool
	ImageCubeArray                          bool
	IndependentBlend                        bool
	GeometryShader                          bool
	TessellationShader                      bool
	SampleRateShading                       bool
	DualSrcBlend                            bool
	LogicOp                                 bool
	MultiDrawIndirect                       bool
	DrawIndirectFirstInstance               bool
	DepthClamp                              bool
	DepthBiasClamp                          bool
	FillModeNonSolid                        bool
	DepthBounds                             bool
	WideLines                               bool
	LargePoints                             bool
	AlphaToOne                              bool
	MultiViewport                           bool
	SamplerAnisotropy                       bool
	TextureCompressionETC2                  bool
	TextureCompressionASTC_LDR              bool
	TextureCompressionBC                    bool
	OcclusionQueryPrecise                   bool
	PipelineStatisticsQuery                 bool
	VertexPipelineStoresAndAtomics          bool
	FragmentStoresAndAtomics                bool
	ShaderTessellationAndGeometryPointSize  bool
	ShaderImageGatherExtended               bool
	ShaderStorageImageExtendedFormats       bool
	ShaderStorageImageMultisample           bool
	ShaderStorageImageReadWithoutFormat     bool
	ShaderStorageImageWriteWithoutFormat    bool
	ShaderUniformBufferArrayDynamicIndexing bool
	ShaderSampledImageArrayDynamicIndexing  bool
	ShaderStorageBufferArrayDynamicIndexing bool
	ShaderStorageImageArrayDynamicIndexing  bool
	ShaderClipDistance                      bool
	ShaderCullDistance                      bool
	ShaderFloat64                           bool
	ShaderInt64                             bool
	ShaderInt16                             bool
	ShaderResourceResidency                 bool
	ShaderResourceMinLod                    bool
	SparseBinding                           bool
	SparseResidencyBuffer                   bool
	SparseResidencyImage2D                  bool
	SparseResidencyImage3D                  bool
	SparseResidency2Samples                 bool
	SparseResidency4Samples                 bool
	SparseResidency8Samples                 bool
	SparseResidency16Samples                bool
	SparseResidencyAliased                  bool
	VariableMultisampleRate                 bool
	InheritedQueries                        bool
}

type _vkPhysicalDeviceFeatures struct {
	robustBufferAccess                      Bool32
	fullDrawIndexUint32                     Bool32
	imageCubeArray                          Bool32
	independentBlend                        Bool32
	geometryShader                          Bool32
	tessellationShader                      Bool32
	sampleRateShading                       Bool32
	dualSrcBlend                            Bool32
	logicOp                                 Bool32
	multiDrawIndirect                       Bool32
	drawIndirectFirstInstance               Bool32
	depthClamp                              Bool32
	depthBiasClamp                          Bool32
	fillModeNonSolid                        Bool32
	depthBounds                             Bool32
	wideLines                               Bool32
	largePoints                             Bool32
	alphaToOne                              Bool32
	multiViewport                           Bool32
	samplerAnisotropy                       Bool32
	textureCompressionETC2                  Bool32
	textureCompressionASTC_LDR              Bool32
	textureCompressionBC                    Bool32
	occlusionQueryPrecise                   Bool32
	pipelineStatisticsQuery                 Bool32
	vertexPipelineStoresAndAtomics          Bool32
	fragmentStoresAndAtomics                Bool32
	shaderTessellationAndGeometryPointSize  Bool32
	shaderImageGatherExtended               Bool32
	shaderStorageImageExtendedFormats       Bool32
	shaderStorageImageMultisample           Bool32
	shaderStorageImageReadWithoutFormat     Bool32
	shaderStorageImageWriteWithoutFormat    Bool32
	shaderUniformBufferArrayDynamicIndexing Bool32
	shaderSampledImageArrayDynamicIndexing  Bool32
	shaderStorageBufferArrayDynamicIndexing Bool32
	shaderStorageImageArrayDynamicIndexing  Bool32
	shaderClipDistance                      Bool32
	shaderCullDistance                      Bool32
	shaderFloat64                           Bool32
	shaderInt64                             Bool32
	shaderInt16                             Bool32
	shaderResourceResidency                 Bool32
	shaderResourceMinLod                    Bool32
	sparseBinding                           Bool32
	sparseResidencyBuffer                   Bool32
	sparseResidencyImage2D                  Bool32
	sparseResidencyImage3D                  Bool32
	sparseResidency2Samples                 Bool32
	sparseResidency4Samples                 Bool32
	sparseResidency8Samples                 Bool32
	sparseResidency16Samples                Bool32
	sparseResidencyAliased                  Bool32
	variableMultisampleRate                 Bool32
	inheritedQueries                        Bool32
}

func (s *PhysicalDeviceFeatures) Vulkanize() *_vkPhysicalDeviceFeatures {
	rval := &_vkPhysicalDeviceFeatures{
		robustBufferAccess:                      translateInternal_Bool32(s.RobustBufferAccess),                      /*default*/
		fullDrawIndexUint32:                     translateInternal_Bool32(s.FullDrawIndexUint32),                     /*default*/
		imageCubeArray:                          translateInternal_Bool32(s.ImageCubeArray),                          /*default*/
		independentBlend:                        translateInternal_Bool32(s.IndependentBlend),                        /*default*/
		geometryShader:                          translateInternal_Bool32(s.GeometryShader),                          /*default*/
		tessellationShader:                      translateInternal_Bool32(s.TessellationShader),                      /*default*/
		sampleRateShading:                       translateInternal_Bool32(s.SampleRateShading),                       /*default*/
		dualSrcBlend:                            translateInternal_Bool32(s.DualSrcBlend),                            /*default*/
		logicOp:                                 translateInternal_Bool32(s.LogicOp),                                 /*default*/
		multiDrawIndirect:                       translateInternal_Bool32(s.MultiDrawIndirect),                       /*default*/
		drawIndirectFirstInstance:               translateInternal_Bool32(s.DrawIndirectFirstInstance),               /*default*/
		depthClamp:                              translateInternal_Bool32(s.DepthClamp),                              /*default*/
		depthBiasClamp:                          translateInternal_Bool32(s.DepthBiasClamp),                          /*default*/
		fillModeNonSolid:                        translateInternal_Bool32(s.FillModeNonSolid),                        /*default*/
		depthBounds:                             translateInternal_Bool32(s.DepthBounds),                             /*default*/
		wideLines:                               translateInternal_Bool32(s.WideLines),                               /*default*/
		largePoints:                             translateInternal_Bool32(s.LargePoints),                             /*default*/
		alphaToOne:                              translateInternal_Bool32(s.AlphaToOne),                              /*default*/
		multiViewport:                           translateInternal_Bool32(s.MultiViewport),                           /*default*/
		samplerAnisotropy:                       translateInternal_Bool32(s.SamplerAnisotropy),                       /*default*/
		textureCompressionETC2:                  translateInternal_Bool32(s.TextureCompressionETC2),                  /*default*/
		textureCompressionASTC_LDR:              translateInternal_Bool32(s.TextureCompressionASTC_LDR),              /*default*/
		textureCompressionBC:                    translateInternal_Bool32(s.TextureCompressionBC),                    /*default*/
		occlusionQueryPrecise:                   translateInternal_Bool32(s.OcclusionQueryPrecise),                   /*default*/
		pipelineStatisticsQuery:                 translateInternal_Bool32(s.PipelineStatisticsQuery),                 /*default*/
		vertexPipelineStoresAndAtomics:          translateInternal_Bool32(s.VertexPipelineStoresAndAtomics),          /*default*/
		fragmentStoresAndAtomics:                translateInternal_Bool32(s.FragmentStoresAndAtomics),                /*default*/
		shaderTessellationAndGeometryPointSize:  translateInternal_Bool32(s.ShaderTessellationAndGeometryPointSize),  /*default*/
		shaderImageGatherExtended:               translateInternal_Bool32(s.ShaderImageGatherExtended),               /*default*/
		shaderStorageImageExtendedFormats:       translateInternal_Bool32(s.ShaderStorageImageExtendedFormats),       /*default*/
		shaderStorageImageMultisample:           translateInternal_Bool32(s.ShaderStorageImageMultisample),           /*default*/
		shaderStorageImageReadWithoutFormat:     translateInternal_Bool32(s.ShaderStorageImageReadWithoutFormat),     /*default*/
		shaderStorageImageWriteWithoutFormat:    translateInternal_Bool32(s.ShaderStorageImageWriteWithoutFormat),    /*default*/
		shaderUniformBufferArrayDynamicIndexing: translateInternal_Bool32(s.ShaderUniformBufferArrayDynamicIndexing), /*default*/
		shaderSampledImageArrayDynamicIndexing:  translateInternal_Bool32(s.ShaderSampledImageArrayDynamicIndexing),  /*default*/
		shaderStorageBufferArrayDynamicIndexing: translateInternal_Bool32(s.ShaderStorageBufferArrayDynamicIndexing), /*default*/
		shaderStorageImageArrayDynamicIndexing:  translateInternal_Bool32(s.ShaderStorageImageArrayDynamicIndexing),  /*default*/
		shaderClipDistance:                      translateInternal_Bool32(s.ShaderClipDistance),                      /*default*/
		shaderCullDistance:                      translateInternal_Bool32(s.ShaderCullDistance),                      /*default*/
		shaderFloat64:                           translateInternal_Bool32(s.ShaderFloat64),                           /*default*/
		shaderInt64:                             translateInternal_Bool32(s.ShaderInt64),                             /*default*/
		shaderInt16:                             translateInternal_Bool32(s.ShaderInt16),                             /*default*/
		shaderResourceResidency:                 translateInternal_Bool32(s.ShaderResourceResidency),                 /*default*/
		shaderResourceMinLod:                    translateInternal_Bool32(s.ShaderResourceMinLod),                    /*default*/
		sparseBinding:                           translateInternal_Bool32(s.SparseBinding),                           /*default*/
		sparseResidencyBuffer:                   translateInternal_Bool32(s.SparseResidencyBuffer),                   /*default*/
		sparseResidencyImage2D:                  translateInternal_Bool32(s.SparseResidencyImage2D),                  /*default*/
		sparseResidencyImage3D:                  translateInternal_Bool32(s.SparseResidencyImage3D),                  /*default*/
		sparseResidency2Samples:                 translateInternal_Bool32(s.SparseResidency2Samples),                 /*default*/
		sparseResidency4Samples:                 translateInternal_Bool32(s.SparseResidency4Samples),                 /*default*/
		sparseResidency8Samples:                 translateInternal_Bool32(s.SparseResidency8Samples),                 /*default*/
		sparseResidency16Samples:                translateInternal_Bool32(s.SparseResidency16Samples),                /*default*/
		sparseResidencyAliased:                  translateInternal_Bool32(s.SparseResidencyAliased),                  /*default*/
		variableMultisampleRate:                 translateInternal_Bool32(s.VariableMultisampleRate),                 /*default*/
		inheritedQueries:                        translateInternal_Bool32(s.InheritedQueries),                        /*default*/
	}
	return rval
}

// PhysicalDeviceFeatures2: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures2.html
type PhysicalDeviceFeatures2 struct {
	// SType = STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2
	PNext    *byte
	Features PhysicalDeviceFeatures
}

type _vkPhysicalDeviceFeatures2 struct {
	sType    StructureType
	pNext    *byte
	features _vkPhysicalDeviceFeatures
}

func (s *PhysicalDeviceFeatures2) Vulkanize() *_vkPhysicalDeviceFeatures2 {
	rval := &_vkPhysicalDeviceFeatures2{
		sType:    STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2, /*c1*/
		pNext:    (*byte)(s.PNext),                          /*cb*/
		features: *(s.Features.Vulkanize()),                 /*c3*/
	}
	return rval
}

// PhysicalDeviceGroupProperties: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceGroupProperties.html
type PhysicalDeviceGroupProperties struct {
	// SType = STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES
	PNext               *byte
	PhysicalDeviceCount uint32
	PhysicalDevices     [MAX_DEVICE_GROUP_SIZE]PhysicalDevice
	SubsetAllocation    bool
}

// WARNING - struct PhysicalDeviceGroupProperties is returned only, which is not yet handled in the binding
type _vkPhysicalDeviceGroupProperties struct {
	sType               StructureType
	pNext               *byte
	physicalDeviceCount uint32
	physicalDevices     [MAX_DEVICE_GROUP_SIZE]PhysicalDevice
	subsetAllocation    Bool32
}

func (s *_vkPhysicalDeviceGroupProperties) Goify() *PhysicalDeviceGroupProperties {
	rval := &PhysicalDeviceGroupProperties{
		PNext:               (*byte)(s.pNext),
		PhysicalDeviceCount: (uint32)(s.physicalDeviceCount),
		PhysicalDevices:     ([MAX_DEVICE_GROUP_SIZE]PhysicalDevice)(s.physicalDevices),
		SubsetAllocation:    translatePublic_Bool32(s.subsetAllocation), /*default*/
	}
	return rval
}

// PhysicalDeviceIDProperties: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceIDProperties.html
type PhysicalDeviceIDProperties struct {
	// SType = STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES
	PNext           *byte
	DeviceUUID      [UUID_SIZE]uint8
	DriverUUID      [UUID_SIZE]uint8
	DeviceLUID      [LUID_SIZE]uint8
	DeviceNodeMask  uint32
	DeviceLUIDValid bool
}

// WARNING - struct PhysicalDeviceIDProperties is returned only, which is not yet handled in the binding
type _vkPhysicalDeviceIDProperties struct {
	sType           StructureType
	pNext           *byte
	deviceUUID      [UUID_SIZE]uint8
	driverUUID      [UUID_SIZE]uint8
	deviceLUID      [LUID_SIZE]uint8
	deviceNodeMask  uint32
	deviceLUIDValid Bool32
}

func (s *_vkPhysicalDeviceIDProperties) Goify() *PhysicalDeviceIDProperties {
	rval := &PhysicalDeviceIDProperties{
		PNext:           (*byte)(s.pNext),
		DeviceUUID:      ([UUID_SIZE]uint8)(s.deviceUUID),
		DriverUUID:      ([UUID_SIZE]uint8)(s.driverUUID),
		DeviceLUID:      ([LUID_SIZE]uint8)(s.deviceLUID),
		DeviceNodeMask:  (uint32)(s.deviceNodeMask),
		DeviceLUIDValid: translatePublic_Bool32(s.deviceLUIDValid), /*default*/
	}
	return rval
}

// PhysicalDeviceImageFormatInfo2: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceImageFormatInfo2.html
type PhysicalDeviceImageFormatInfo2 struct {
	// SType = STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2
	PNext  *byte
	Format Format
	Typ    ImageType
	Tiling ImageTiling
	Usage  ImageUsageFlags
	Flags  ImageCreateFlags
}

type _vkPhysicalDeviceImageFormatInfo2 struct {
	sType  StructureType
	pNext  *byte
	format Format
	typ    ImageType
	tiling ImageTiling
	usage  ImageUsageFlags
	flags  ImageCreateFlags
}

func (s *PhysicalDeviceImageFormatInfo2) Vulkanize() *_vkPhysicalDeviceImageFormatInfo2 {
	rval := &_vkPhysicalDeviceImageFormatInfo2{
		sType:  STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2, /*c1*/
		pNext:  (*byte)(s.PNext),                                   /*cb*/
		format: (Format)(s.Format),                                 /*cb*/
		typ:    (ImageType)(s.Typ),                                 /*cb*/
		tiling: (ImageTiling)(s.Tiling),                            /*cb*/
		usage:  (ImageUsageFlags)(s.Usage),                         /*cb*/
		flags:  (ImageCreateFlags)(s.Flags),                        /*cb*/
	}
	return rval
}

// PhysicalDeviceLimits: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceLimits.html
type PhysicalDeviceLimits struct {
	MaxImageDimension1D                             uint32
	MaxImageDimension2D                             uint32
	MaxImageDimension3D                             uint32
	MaxImageDimensionCube                           uint32
	MaxImageArrayLayers                             uint32
	MaxTexelBufferElements                          uint32
	MaxUniformBufferRange                           uint32
	MaxStorageBufferRange                           uint32
	MaxPushConstantsSize                            uint32
	MaxMemoryAllocationCount                        uint32
	MaxSamplerAllocationCount                       uint32
	BufferImageGranularity                          DeviceSize
	SparseAddressSpaceSize                          DeviceSize
	MaxBoundDescriptorSets                          uint32
	MaxPerStageDescriptorSamplers                   uint32
	MaxPerStageDescriptorUniformBuffers             uint32
	MaxPerStageDescriptorStorageBuffers             uint32
	MaxPerStageDescriptorSampledImages              uint32
	MaxPerStageDescriptorStorageImages              uint32
	MaxPerStageDescriptorInputAttachments           uint32
	MaxPerStageResources                            uint32
	MaxDescriptorSetSamplers                        uint32
	MaxDescriptorSetUniformBuffers                  uint32
	MaxDescriptorSetUniformBuffersDynamic           uint32
	MaxDescriptorSetStorageBuffers                  uint32
	MaxDescriptorSetStorageBuffersDynamic           uint32
	MaxDescriptorSetSampledImages                   uint32
	MaxDescriptorSetStorageImages                   uint32
	MaxDescriptorSetInputAttachments                uint32
	MaxVertexInputAttributes                        uint32
	MaxVertexInputBindings                          uint32
	MaxVertexInputAttributeOffset                   uint32
	MaxVertexInputBindingStride                     uint32
	MaxVertexOutputComponents                       uint32
	MaxTessellationGenerationLevel                  uint32
	MaxTessellationPatchSize                        uint32
	MaxTessellationControlPerVertexInputComponents  uint32
	MaxTessellationControlPerVertexOutputComponents uint32
	MaxTessellationControlPerPatchOutputComponents  uint32
	MaxTessellationControlTotalOutputComponents     uint32
	MaxTessellationEvaluationInputComponents        uint32
	MaxTessellationEvaluationOutputComponents       uint32
	MaxGeometryShaderInvocations                    uint32
	MaxGeometryInputComponents                      uint32
	MaxGeometryOutputComponents                     uint32
	MaxGeometryOutputVertices                       uint32
	MaxGeometryTotalOutputComponents                uint32
	MaxFragmentInputComponents                      uint32
	MaxFragmentOutputAttachments                    uint32
	MaxFragmentDualSrcAttachments                   uint32
	MaxFragmentCombinedOutputResources              uint32
	MaxComputeSharedMemorySize                      uint32
	MaxComputeWorkGroupCount                        [3]uint32
	MaxComputeWorkGroupInvocations                  uint32
	MaxComputeWorkGroupSize                         [3]uint32
	SubPixelPrecisionBits                           uint32
	SubTexelPrecisionBits                           uint32
	MipmapPrecisionBits                             uint32
	MaxDrawIndexedIndexValue                        uint32
	MaxDrawIndirectCount                            uint32
	MaxSamplerLodBias                               float32
	MaxSamplerAnisotropy                            float32
	MaxViewports                                    uint32
	MaxViewportDimensions                           [2]uint32
	ViewportBoundsRange                             [2]float32
	ViewportSubPixelBits                            uint32
	MinMemoryMapAlignment                           uintptr
	MinTexelBufferOffsetAlignment                   DeviceSize
	MinUniformBufferOffsetAlignment                 DeviceSize
	MinStorageBufferOffsetAlignment                 DeviceSize
	MinTexelOffset                                  int32
	MaxTexelOffset                                  uint32
	MinTexelGatherOffset                            int32
	MaxTexelGatherOffset                            uint32
	MinInterpolationOffset                          float32
	MaxInterpolationOffset                          float32
	SubPixelInterpolationOffsetBits                 uint32
	MaxFramebufferWidth                             uint32
	MaxFramebufferHeight                            uint32
	MaxFramebufferLayers                            uint32
	FramebufferColorSampleCounts                    SampleCountFlags
	FramebufferDepthSampleCounts                    SampleCountFlags
	FramebufferStencilSampleCounts                  SampleCountFlags
	FramebufferNoAttachmentsSampleCounts            SampleCountFlags
	MaxColorAttachments                             uint32
	SampledImageColorSampleCounts                   SampleCountFlags
	SampledImageIntegerSampleCounts                 SampleCountFlags
	SampledImageDepthSampleCounts                   SampleCountFlags
	SampledImageStencilSampleCounts                 SampleCountFlags
	StorageImageSampleCounts                        SampleCountFlags
	MaxSampleMaskWords                              uint32
	TimestampComputeAndGraphics                     bool
	TimestampPeriod                                 float32
	MaxClipDistances                                uint32
	MaxCullDistances                                uint32
	MaxCombinedClipAndCullDistances                 uint32
	DiscreteQueuePriorities                         uint32
	PointSizeRange                                  [2]float32
	LineWidthRange                                  [2]float32
	PointSizeGranularity                            float32
	LineWidthGranularity                            float32
	StrictLines                                     bool
	StandardSampleLocations                         bool
	OptimalBufferCopyOffsetAlignment                DeviceSize
	OptimalBufferCopyRowPitchAlignment              DeviceSize
	NonCoherentAtomSize                             DeviceSize
}

// WARNING - struct PhysicalDeviceLimits is returned only, which is not yet handled in the binding
type _vkPhysicalDeviceLimits struct {
	maxImageDimension1D                             uint32
	maxImageDimension2D                             uint32
	maxImageDimension3D                             uint32
	maxImageDimensionCube                           uint32
	maxImageArrayLayers                             uint32
	maxTexelBufferElements                          uint32
	maxUniformBufferRange                           uint32
	maxStorageBufferRange                           uint32
	maxPushConstantsSize                            uint32
	maxMemoryAllocationCount                        uint32
	maxSamplerAllocationCount                       uint32
	bufferImageGranularity                          DeviceSize
	sparseAddressSpaceSize                          DeviceSize
	maxBoundDescriptorSets                          uint32
	maxPerStageDescriptorSamplers                   uint32
	maxPerStageDescriptorUniformBuffers             uint32
	maxPerStageDescriptorStorageBuffers             uint32
	maxPerStageDescriptorSampledImages              uint32
	maxPerStageDescriptorStorageImages              uint32
	maxPerStageDescriptorInputAttachments           uint32
	maxPerStageResources                            uint32
	maxDescriptorSetSamplers                        uint32
	maxDescriptorSetUniformBuffers                  uint32
	maxDescriptorSetUniformBuffersDynamic           uint32
	maxDescriptorSetStorageBuffers                  uint32
	maxDescriptorSetStorageBuffersDynamic           uint32
	maxDescriptorSetSampledImages                   uint32
	maxDescriptorSetStorageImages                   uint32
	maxDescriptorSetInputAttachments                uint32
	maxVertexInputAttributes                        uint32
	maxVertexInputBindings                          uint32
	maxVertexInputAttributeOffset                   uint32
	maxVertexInputBindingStride                     uint32
	maxVertexOutputComponents                       uint32
	maxTessellationGenerationLevel                  uint32
	maxTessellationPatchSize                        uint32
	maxTessellationControlPerVertexInputComponents  uint32
	maxTessellationControlPerVertexOutputComponents uint32
	maxTessellationControlPerPatchOutputComponents  uint32
	maxTessellationControlTotalOutputComponents     uint32
	maxTessellationEvaluationInputComponents        uint32
	maxTessellationEvaluationOutputComponents       uint32
	maxGeometryShaderInvocations                    uint32
	maxGeometryInputComponents                      uint32
	maxGeometryOutputComponents                     uint32
	maxGeometryOutputVertices                       uint32
	maxGeometryTotalOutputComponents                uint32
	maxFragmentInputComponents                      uint32
	maxFragmentOutputAttachments                    uint32
	maxFragmentDualSrcAttachments                   uint32
	maxFragmentCombinedOutputResources              uint32
	maxComputeSharedMemorySize                      uint32
	maxComputeWorkGroupCount                        [3]uint32
	maxComputeWorkGroupInvocations                  uint32
	maxComputeWorkGroupSize                         [3]uint32
	subPixelPrecisionBits                           uint32
	subTexelPrecisionBits                           uint32
	mipmapPrecisionBits                             uint32
	maxDrawIndexedIndexValue                        uint32
	maxDrawIndirectCount                            uint32
	maxSamplerLodBias                               float32
	maxSamplerAnisotropy                            float32
	maxViewports                                    uint32
	maxViewportDimensions                           [2]uint32
	viewportBoundsRange                             [2]float32
	viewportSubPixelBits                            uint32
	minMemoryMapAlignment                           uintptr
	minTexelBufferOffsetAlignment                   DeviceSize
	minUniformBufferOffsetAlignment                 DeviceSize
	minStorageBufferOffsetAlignment                 DeviceSize
	minTexelOffset                                  int32
	maxTexelOffset                                  uint32
	minTexelGatherOffset                            int32
	maxTexelGatherOffset                            uint32
	minInterpolationOffset                          float32
	maxInterpolationOffset                          float32
	subPixelInterpolationOffsetBits                 uint32
	maxFramebufferWidth                             uint32
	maxFramebufferHeight                            uint32
	maxFramebufferLayers                            uint32
	framebufferColorSampleCounts                    SampleCountFlags
	framebufferDepthSampleCounts                    SampleCountFlags
	framebufferStencilSampleCounts                  SampleCountFlags
	framebufferNoAttachmentsSampleCounts            SampleCountFlags
	maxColorAttachments                             uint32
	sampledImageColorSampleCounts                   SampleCountFlags
	sampledImageIntegerSampleCounts                 SampleCountFlags
	sampledImageDepthSampleCounts                   SampleCountFlags
	sampledImageStencilSampleCounts                 SampleCountFlags
	storageImageSampleCounts                        SampleCountFlags
	maxSampleMaskWords                              uint32
	timestampComputeAndGraphics                     Bool32
	timestampPeriod                                 float32
	maxClipDistances                                uint32
	maxCullDistances                                uint32
	maxCombinedClipAndCullDistances                 uint32
	discreteQueuePriorities                         uint32
	pointSizeRange                                  [2]float32
	lineWidthRange                                  [2]float32
	pointSizeGranularity                            float32
	lineWidthGranularity                            float32
	strictLines                                     Bool32
	standardSampleLocations                         Bool32
	optimalBufferCopyOffsetAlignment                DeviceSize
	optimalBufferCopyRowPitchAlignment              DeviceSize
	nonCoherentAtomSize                             DeviceSize
}

func (s *_vkPhysicalDeviceLimits) Goify() *PhysicalDeviceLimits {
	rval := &PhysicalDeviceLimits{
		MaxImageDimension1D:                             (uint32)(s.maxImageDimension1D),
		MaxImageDimension2D:                             (uint32)(s.maxImageDimension2D),
		MaxImageDimension3D:                             (uint32)(s.maxImageDimension3D),
		MaxImageDimensionCube:                           (uint32)(s.maxImageDimensionCube),
		MaxImageArrayLayers:                             (uint32)(s.maxImageArrayLayers),
		MaxTexelBufferElements:                          (uint32)(s.maxTexelBufferElements),
		MaxUniformBufferRange:                           (uint32)(s.maxUniformBufferRange),
		MaxStorageBufferRange:                           (uint32)(s.maxStorageBufferRange),
		MaxPushConstantsSize:                            (uint32)(s.maxPushConstantsSize),
		MaxMemoryAllocationCount:                        (uint32)(s.maxMemoryAllocationCount),
		MaxSamplerAllocationCount:                       (uint32)(s.maxSamplerAllocationCount),
		BufferImageGranularity:                          (DeviceSize)(s.bufferImageGranularity),
		SparseAddressSpaceSize:                          (DeviceSize)(s.sparseAddressSpaceSize),
		MaxBoundDescriptorSets:                          (uint32)(s.maxBoundDescriptorSets),
		MaxPerStageDescriptorSamplers:                   (uint32)(s.maxPerStageDescriptorSamplers),
		MaxPerStageDescriptorUniformBuffers:             (uint32)(s.maxPerStageDescriptorUniformBuffers),
		MaxPerStageDescriptorStorageBuffers:             (uint32)(s.maxPerStageDescriptorStorageBuffers),
		MaxPerStageDescriptorSampledImages:              (uint32)(s.maxPerStageDescriptorSampledImages),
		MaxPerStageDescriptorStorageImages:              (uint32)(s.maxPerStageDescriptorStorageImages),
		MaxPerStageDescriptorInputAttachments:           (uint32)(s.maxPerStageDescriptorInputAttachments),
		MaxPerStageResources:                            (uint32)(s.maxPerStageResources),
		MaxDescriptorSetSamplers:                        (uint32)(s.maxDescriptorSetSamplers),
		MaxDescriptorSetUniformBuffers:                  (uint32)(s.maxDescriptorSetUniformBuffers),
		MaxDescriptorSetUniformBuffersDynamic:           (uint32)(s.maxDescriptorSetUniformBuffersDynamic),
		MaxDescriptorSetStorageBuffers:                  (uint32)(s.maxDescriptorSetStorageBuffers),
		MaxDescriptorSetStorageBuffersDynamic:           (uint32)(s.maxDescriptorSetStorageBuffersDynamic),
		MaxDescriptorSetSampledImages:                   (uint32)(s.maxDescriptorSetSampledImages),
		MaxDescriptorSetStorageImages:                   (uint32)(s.maxDescriptorSetStorageImages),
		MaxDescriptorSetInputAttachments:                (uint32)(s.maxDescriptorSetInputAttachments),
		MaxVertexInputAttributes:                        (uint32)(s.maxVertexInputAttributes),
		MaxVertexInputBindings:                          (uint32)(s.maxVertexInputBindings),
		MaxVertexInputAttributeOffset:                   (uint32)(s.maxVertexInputAttributeOffset),
		MaxVertexInputBindingStride:                     (uint32)(s.maxVertexInputBindingStride),
		MaxVertexOutputComponents:                       (uint32)(s.maxVertexOutputComponents),
		MaxTessellationGenerationLevel:                  (uint32)(s.maxTessellationGenerationLevel),
		MaxTessellationPatchSize:                        (uint32)(s.maxTessellationPatchSize),
		MaxTessellationControlPerVertexInputComponents:  (uint32)(s.maxTessellationControlPerVertexInputComponents),
		MaxTessellationControlPerVertexOutputComponents: (uint32)(s.maxTessellationControlPerVertexOutputComponents),
		MaxTessellationControlPerPatchOutputComponents:  (uint32)(s.maxTessellationControlPerPatchOutputComponents),
		MaxTessellationControlTotalOutputComponents:     (uint32)(s.maxTessellationControlTotalOutputComponents),
		MaxTessellationEvaluationInputComponents:        (uint32)(s.maxTessellationEvaluationInputComponents),
		MaxTessellationEvaluationOutputComponents:       (uint32)(s.maxTessellationEvaluationOutputComponents),
		MaxGeometryShaderInvocations:                    (uint32)(s.maxGeometryShaderInvocations),
		MaxGeometryInputComponents:                      (uint32)(s.maxGeometryInputComponents),
		MaxGeometryOutputComponents:                     (uint32)(s.maxGeometryOutputComponents),
		MaxGeometryOutputVertices:                       (uint32)(s.maxGeometryOutputVertices),
		MaxGeometryTotalOutputComponents:                (uint32)(s.maxGeometryTotalOutputComponents),
		MaxFragmentInputComponents:                      (uint32)(s.maxFragmentInputComponents),
		MaxFragmentOutputAttachments:                    (uint32)(s.maxFragmentOutputAttachments),
		MaxFragmentDualSrcAttachments:                   (uint32)(s.maxFragmentDualSrcAttachments),
		MaxFragmentCombinedOutputResources:              (uint32)(s.maxFragmentCombinedOutputResources),
		MaxComputeSharedMemorySize:                      (uint32)(s.maxComputeSharedMemorySize),
		MaxComputeWorkGroupCount:                        ([3]uint32)(s.maxComputeWorkGroupCount),
		MaxComputeWorkGroupInvocations:                  (uint32)(s.maxComputeWorkGroupInvocations),
		MaxComputeWorkGroupSize:                         ([3]uint32)(s.maxComputeWorkGroupSize),
		SubPixelPrecisionBits:                           (uint32)(s.subPixelPrecisionBits),
		SubTexelPrecisionBits:                           (uint32)(s.subTexelPrecisionBits),
		MipmapPrecisionBits:                             (uint32)(s.mipmapPrecisionBits),
		MaxDrawIndexedIndexValue:                        (uint32)(s.maxDrawIndexedIndexValue),
		MaxDrawIndirectCount:                            (uint32)(s.maxDrawIndirectCount),
		MaxSamplerLodBias:                               (float32)(s.maxSamplerLodBias),
		MaxSamplerAnisotropy:                            (float32)(s.maxSamplerAnisotropy),
		MaxViewports:                                    (uint32)(s.maxViewports),
		MaxViewportDimensions:                           ([2]uint32)(s.maxViewportDimensions),
		ViewportBoundsRange:                             ([2]float32)(s.viewportBoundsRange),
		ViewportSubPixelBits:                            (uint32)(s.viewportSubPixelBits),
		MinMemoryMapAlignment:                           (uintptr)(s.minMemoryMapAlignment),
		MinTexelBufferOffsetAlignment:                   (DeviceSize)(s.minTexelBufferOffsetAlignment),
		MinUniformBufferOffsetAlignment:                 (DeviceSize)(s.minUniformBufferOffsetAlignment),
		MinStorageBufferOffsetAlignment:                 (DeviceSize)(s.minStorageBufferOffsetAlignment),
		MinTexelOffset:                                  (int32)(s.minTexelOffset),
		MaxTexelOffset:                                  (uint32)(s.maxTexelOffset),
		MinTexelGatherOffset:                            (int32)(s.minTexelGatherOffset),
		MaxTexelGatherOffset:                            (uint32)(s.maxTexelGatherOffset),
		MinInterpolationOffset:                          (float32)(s.minInterpolationOffset),
		MaxInterpolationOffset:                          (float32)(s.maxInterpolationOffset),
		SubPixelInterpolationOffsetBits:                 (uint32)(s.subPixelInterpolationOffsetBits),
		MaxFramebufferWidth:                             (uint32)(s.maxFramebufferWidth),
		MaxFramebufferHeight:                            (uint32)(s.maxFramebufferHeight),
		MaxFramebufferLayers:                            (uint32)(s.maxFramebufferLayers),
		FramebufferColorSampleCounts:                    (SampleCountFlags)(s.framebufferColorSampleCounts),
		FramebufferDepthSampleCounts:                    (SampleCountFlags)(s.framebufferDepthSampleCounts),
		FramebufferStencilSampleCounts:                  (SampleCountFlags)(s.framebufferStencilSampleCounts),
		FramebufferNoAttachmentsSampleCounts:            (SampleCountFlags)(s.framebufferNoAttachmentsSampleCounts),
		MaxColorAttachments:                             (uint32)(s.maxColorAttachments),
		SampledImageColorSampleCounts:                   (SampleCountFlags)(s.sampledImageColorSampleCounts),
		SampledImageIntegerSampleCounts:                 (SampleCountFlags)(s.sampledImageIntegerSampleCounts),
		SampledImageDepthSampleCounts:                   (SampleCountFlags)(s.sampledImageDepthSampleCounts),
		SampledImageStencilSampleCounts:                 (SampleCountFlags)(s.sampledImageStencilSampleCounts),
		StorageImageSampleCounts:                        (SampleCountFlags)(s.storageImageSampleCounts),
		MaxSampleMaskWords:                              (uint32)(s.maxSampleMaskWords),
		TimestampComputeAndGraphics:                     translatePublic_Bool32(s.timestampComputeAndGraphics), /*default*/
		TimestampPeriod:                                 (float32)(s.timestampPeriod),
		MaxClipDistances:                                (uint32)(s.maxClipDistances),
		MaxCullDistances:                                (uint32)(s.maxCullDistances),
		MaxCombinedClipAndCullDistances:                 (uint32)(s.maxCombinedClipAndCullDistances),
		DiscreteQueuePriorities:                         (uint32)(s.discreteQueuePriorities),
		PointSizeRange:                                  ([2]float32)(s.pointSizeRange),
		LineWidthRange:                                  ([2]float32)(s.lineWidthRange),
		PointSizeGranularity:                            (float32)(s.pointSizeGranularity),
		LineWidthGranularity:                            (float32)(s.lineWidthGranularity),
		StrictLines:                                     translatePublic_Bool32(s.strictLines),             /*default*/
		StandardSampleLocations:                         translatePublic_Bool32(s.standardSampleLocations), /*default*/
		OptimalBufferCopyOffsetAlignment:                (DeviceSize)(s.optimalBufferCopyOffsetAlignment),
		OptimalBufferCopyRowPitchAlignment:              (DeviceSize)(s.optimalBufferCopyRowPitchAlignment),
		NonCoherentAtomSize:                             (DeviceSize)(s.nonCoherentAtomSize),
	}
	return rval
}

// PhysicalDeviceMaintenance3Properties: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMaintenance3Properties.html
type PhysicalDeviceMaintenance3Properties struct {
	// SType = STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES
	PNext                   *byte
	MaxPerSetDescriptors    uint32
	MaxMemoryAllocationSize DeviceSize
}

// WARNING - struct PhysicalDeviceMaintenance3Properties is returned only, which is not yet handled in the binding
type _vkPhysicalDeviceMaintenance3Properties struct {
	sType                   StructureType
	pNext                   *byte
	maxPerSetDescriptors    uint32
	maxMemoryAllocationSize DeviceSize
}

func (s *_vkPhysicalDeviceMaintenance3Properties) Goify() *PhysicalDeviceMaintenance3Properties {
	rval := &PhysicalDeviceMaintenance3Properties{
		PNext:                   (*byte)(s.pNext),
		MaxPerSetDescriptors:    (uint32)(s.maxPerSetDescriptors),
		MaxMemoryAllocationSize: (DeviceSize)(s.maxMemoryAllocationSize),
	}
	return rval
}

// PhysicalDeviceMemoryProperties: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMemoryProperties.html
type PhysicalDeviceMemoryProperties struct {
	MemoryTypeCount uint32
	MemoryTypes     [MAX_MEMORY_TYPES]MemoryType
	MemoryHeapCount uint32
	MemoryHeaps     [MAX_MEMORY_HEAPS]MemoryHeap
}

type _vkPhysicalDeviceMemoryProperties = PhysicalDeviceMemoryProperties

func (s *_vkPhysicalDeviceMemoryProperties) Goify() *PhysicalDeviceMemoryProperties {
	rval := (*PhysicalDeviceMemoryProperties)(s)
	return rval
}

// PhysicalDeviceMemoryProperties2: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMemoryProperties2.html
type PhysicalDeviceMemoryProperties2 struct {
	// SType = STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2
	PNext            *byte
	MemoryProperties PhysicalDeviceMemoryProperties
}

// WARNING - struct PhysicalDeviceMemoryProperties2 is returned only, which is not yet handled in the binding
type _vkPhysicalDeviceMemoryProperties2 struct {
	sType            StructureType
	pNext            *byte
	memoryProperties _vkPhysicalDeviceMemoryProperties
}

func (s *_vkPhysicalDeviceMemoryProperties2) Goify() *PhysicalDeviceMemoryProperties2 {
	rval := &PhysicalDeviceMemoryProperties2{
		PNext:            (*byte)(s.pNext),
		MemoryProperties: (PhysicalDeviceMemoryProperties)(s.memoryProperties),
	}
	return rval
}

// PhysicalDeviceMultiviewFeatures: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMultiviewFeatures.html
type PhysicalDeviceMultiviewFeatures struct {
	// SType = STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES
	PNext                       *byte
	Multiview                   bool
	MultiviewGeometryShader     bool
	MultiviewTessellationShader bool
}

type _vkPhysicalDeviceMultiviewFeatures struct {
	sType                       StructureType
	pNext                       *byte
	multiview                   Bool32
	multiviewGeometryShader     Bool32
	multiviewTessellationShader Bool32
}

func (s *PhysicalDeviceMultiviewFeatures) Vulkanize() *_vkPhysicalDeviceMultiviewFeatures {
	rval := &_vkPhysicalDeviceMultiviewFeatures{
		sType:                       STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES,       /*c1*/
		pNext:                       (*byte)(s.PNext),                                        /*cb*/
		multiview:                   translateInternal_Bool32(s.Multiview),                   /*default*/
		multiviewGeometryShader:     translateInternal_Bool32(s.MultiviewGeometryShader),     /*default*/
		multiviewTessellationShader: translateInternal_Bool32(s.MultiviewTessellationShader), /*default*/
	}
	return rval
}

// PhysicalDeviceMultiviewProperties: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceMultiviewProperties.html
type PhysicalDeviceMultiviewProperties struct {
	// SType = STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES
	PNext                     *byte
	MaxMultiviewViewCount     uint32
	MaxMultiviewInstanceIndex uint32
}

// WARNING - struct PhysicalDeviceMultiviewProperties is returned only, which is not yet handled in the binding
type _vkPhysicalDeviceMultiviewProperties struct {
	sType                     StructureType
	pNext                     *byte
	maxMultiviewViewCount     uint32
	maxMultiviewInstanceIndex uint32
}

func (s *_vkPhysicalDeviceMultiviewProperties) Goify() *PhysicalDeviceMultiviewProperties {
	rval := &PhysicalDeviceMultiviewProperties{
		PNext:                     (*byte)(s.pNext),
		MaxMultiviewViewCount:     (uint32)(s.maxMultiviewViewCount),
		MaxMultiviewInstanceIndex: (uint32)(s.maxMultiviewInstanceIndex),
	}
	return rval
}

// PhysicalDevicePointClippingProperties: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDevicePointClippingProperties.html
type PhysicalDevicePointClippingProperties struct {
	// SType = STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES
	PNext                 *byte
	PointClippingBehavior PointClippingBehavior
}

// WARNING - struct PhysicalDevicePointClippingProperties is returned only, which is not yet handled in the binding
type _vkPhysicalDevicePointClippingProperties struct {
	sType                 StructureType
	pNext                 *byte
	pointClippingBehavior PointClippingBehavior
}

func (s *_vkPhysicalDevicePointClippingProperties) Goify() *PhysicalDevicePointClippingProperties {
	rval := &PhysicalDevicePointClippingProperties{
		PNext:                 (*byte)(s.pNext),
		PointClippingBehavior: (PointClippingBehavior)(s.pointClippingBehavior),
	}
	return rval
}

// PhysicalDeviceProperties: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceProperties.html
type PhysicalDeviceProperties struct {
	ApiVersion        uint32
	DriverVersion     uint32
	VendorID          uint32
	DeviceID          uint32
	DeviceType        PhysicalDeviceType
	DeviceName        [MAX_PHYSICAL_DEVICE_NAME_SIZE]byte
	PipelineCacheUUID [UUID_SIZE]uint8
	Limits            PhysicalDeviceLimits
	SparseProperties  PhysicalDeviceSparseProperties
}

// WARNING - struct PhysicalDeviceProperties is returned only, which is not yet handled in the binding
type _vkPhysicalDeviceProperties struct {
	apiVersion        uint32
	driverVersion     uint32
	vendorID          uint32
	deviceID          uint32
	deviceType        PhysicalDeviceType
	deviceName        [MAX_PHYSICAL_DEVICE_NAME_SIZE]byte
	pipelineCacheUUID [UUID_SIZE]uint8
	limits            _vkPhysicalDeviceLimits
	sparseProperties  _vkPhysicalDeviceSparseProperties
}

func (s *_vkPhysicalDeviceProperties) Goify() *PhysicalDeviceProperties {
	rval := &PhysicalDeviceProperties{
		ApiVersion:        (uint32)(s.apiVersion),
		DriverVersion:     (uint32)(s.driverVersion),
		VendorID:          (uint32)(s.vendorID),
		DeviceID:          (uint32)(s.deviceID),
		DeviceType:        (PhysicalDeviceType)(s.deviceType),
		PipelineCacheUUID: ([UUID_SIZE]uint8)(s.pipelineCacheUUID),
		Limits:            *(s.limits.Goify()),
		SparseProperties:  *(s.sparseProperties.Goify()),
	}
	copy(rval.DeviceName[:], s.deviceName[:])
	return rval
}

// PhysicalDeviceProperties2: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceProperties2.html
type PhysicalDeviceProperties2 struct {
	// SType = STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2
	PNext      *byte
	Properties PhysicalDeviceProperties
}

// WARNING - struct PhysicalDeviceProperties2 is returned only, which is not yet handled in the binding
type _vkPhysicalDeviceProperties2 struct {
	sType      StructureType
	pNext      *byte
	properties _vkPhysicalDeviceProperties
}

func (s *_vkPhysicalDeviceProperties2) Goify() *PhysicalDeviceProperties2 {
	rval := &PhysicalDeviceProperties2{
		PNext:      (*byte)(s.pNext),
		Properties: *(s.properties.Goify()),
	}
	return rval
}

// PhysicalDeviceProtectedMemoryFeatures: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceProtectedMemoryFeatures.html
type PhysicalDeviceProtectedMemoryFeatures struct {
	// SType = STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES
	PNext           *byte
	ProtectedMemory bool
}

type _vkPhysicalDeviceProtectedMemoryFeatures struct {
	sType           StructureType
	pNext           *byte
	protectedMemory Bool32
}

func (s *PhysicalDeviceProtectedMemoryFeatures) Vulkanize() *_vkPhysicalDeviceProtectedMemoryFeatures {
	rval := &_vkPhysicalDeviceProtectedMemoryFeatures{
		sType:           STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES, /*c1*/
		pNext:           (*byte)(s.PNext),                                         /*cb*/
		protectedMemory: translateInternal_Bool32(s.ProtectedMemory),              /*default*/
	}
	return rval
}

// PhysicalDeviceProtectedMemoryProperties: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceProtectedMemoryProperties.html
type PhysicalDeviceProtectedMemoryProperties struct {
	// SType = STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES
	PNext            *byte
	ProtectedNoFault bool
}

// WARNING - struct PhysicalDeviceProtectedMemoryProperties is returned only, which is not yet handled in the binding
type _vkPhysicalDeviceProtectedMemoryProperties struct {
	sType            StructureType
	pNext            *byte
	protectedNoFault Bool32
}

func (s *_vkPhysicalDeviceProtectedMemoryProperties) Goify() *PhysicalDeviceProtectedMemoryProperties {
	rval := &PhysicalDeviceProtectedMemoryProperties{
		PNext:            (*byte)(s.pNext),
		ProtectedNoFault: translatePublic_Bool32(s.protectedNoFault), /*default*/
	}
	return rval
}

// PhysicalDeviceSamplerYcbcrConversionFeatures: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSamplerYcbcrConversionFeatures.html
type PhysicalDeviceSamplerYcbcrConversionFeatures struct {
	// SType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES
	PNext                  *byte
	SamplerYcbcrConversion bool
}

type _vkPhysicalDeviceSamplerYcbcrConversionFeatures struct {
	sType                  StructureType
	pNext                  *byte
	samplerYcbcrConversion Bool32
}

func (s *PhysicalDeviceSamplerYcbcrConversionFeatures) Vulkanize() *_vkPhysicalDeviceSamplerYcbcrConversionFeatures {
	rval := &_vkPhysicalDeviceSamplerYcbcrConversionFeatures{
		sType:                  STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES, /*c1*/
		pNext:                  (*byte)(s.PNext),                                                 /*cb*/
		samplerYcbcrConversion: translateInternal_Bool32(s.SamplerYcbcrConversion),               /*default*/
	}
	return rval
}

// PhysicalDeviceShaderDrawParameterFeatures: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderDrawParameterFeatures.html
type PhysicalDeviceShaderDrawParameterFeatures struct {
}

type _vkPhysicalDeviceShaderDrawParameterFeatures = PhysicalDeviceShaderDrawParameterFeatures

func (s *PhysicalDeviceShaderDrawParameterFeatures) Vulkanize() *_vkPhysicalDeviceShaderDrawParameterFeatures {
	rval := (*_vkPhysicalDeviceShaderDrawParameterFeatures)(s)
	return rval
}

// PhysicalDeviceShaderDrawParametersFeatures: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceShaderDrawParametersFeatures.html
type PhysicalDeviceShaderDrawParametersFeatures struct {
	// SType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES
	PNext                *byte
	ShaderDrawParameters bool
}

type _vkPhysicalDeviceShaderDrawParametersFeatures struct {
	sType                StructureType
	pNext                *byte
	shaderDrawParameters Bool32
}

func (s *PhysicalDeviceShaderDrawParametersFeatures) Vulkanize() *_vkPhysicalDeviceShaderDrawParametersFeatures {
	rval := &_vkPhysicalDeviceShaderDrawParametersFeatures{
		sType:                STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES, /*c1*/
		pNext:                (*byte)(s.PNext),                                               /*cb*/
		shaderDrawParameters: translateInternal_Bool32(s.ShaderDrawParameters),               /*default*/
	}
	return rval
}

// PhysicalDeviceSparseImageFormatInfo2: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSparseImageFormatInfo2.html
type PhysicalDeviceSparseImageFormatInfo2 struct {
	// SType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2
	PNext   *byte
	Format  Format
	Typ     ImageType
	Samples SampleCountFlagBits
	Usage   ImageUsageFlags
	Tiling  ImageTiling
}

type _vkPhysicalDeviceSparseImageFormatInfo2 struct {
	sType   StructureType
	pNext   *byte
	format  Format
	typ     ImageType
	samples SampleCountFlagBits
	usage   ImageUsageFlags
	tiling  ImageTiling
}

func (s *PhysicalDeviceSparseImageFormatInfo2) Vulkanize() *_vkPhysicalDeviceSparseImageFormatInfo2 {
	rval := &_vkPhysicalDeviceSparseImageFormatInfo2{
		sType:   STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2, /*c1*/
		pNext:   (*byte)(s.PNext),                                          /*cb*/
		format:  (Format)(s.Format),                                        /*cb*/
		typ:     (ImageType)(s.Typ),                                        /*cb*/
		samples: (SampleCountFlagBits)(s.Samples),                          /*cb*/
		usage:   (ImageUsageFlags)(s.Usage),                                /*cb*/
		tiling:  (ImageTiling)(s.Tiling),                                   /*cb*/
	}
	return rval
}

// PhysicalDeviceSparseProperties: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSparseProperties.html
type PhysicalDeviceSparseProperties struct {
	ResidencyStandard2DBlockShape            bool
	ResidencyStandard2DMultisampleBlockShape bool
	ResidencyStandard3DBlockShape            bool
	ResidencyAlignedMipSize                  bool
	ResidencyNonResidentStrict               bool
}

// WARNING - struct PhysicalDeviceSparseProperties is returned only, which is not yet handled in the binding
type _vkPhysicalDeviceSparseProperties struct {
	residencyStandard2DBlockShape            Bool32
	residencyStandard2DMultisampleBlockShape Bool32
	residencyStandard3DBlockShape            Bool32
	residencyAlignedMipSize                  Bool32
	residencyNonResidentStrict               Bool32
}

func (s *_vkPhysicalDeviceSparseProperties) Goify() *PhysicalDeviceSparseProperties {
	rval := &PhysicalDeviceSparseProperties{
		ResidencyStandard2DBlockShape:            translatePublic_Bool32(s.residencyStandard2DBlockShape),            /*default*/
		ResidencyStandard2DMultisampleBlockShape: translatePublic_Bool32(s.residencyStandard2DMultisampleBlockShape), /*default*/
		ResidencyStandard3DBlockShape:            translatePublic_Bool32(s.residencyStandard3DBlockShape),            /*default*/
		ResidencyAlignedMipSize:                  translatePublic_Bool32(s.residencyAlignedMipSize),                  /*default*/
		ResidencyNonResidentStrict:               translatePublic_Bool32(s.residencyNonResidentStrict),               /*default*/
	}
	return rval
}

// PhysicalDeviceSubgroupProperties: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceSubgroupProperties.html
type PhysicalDeviceSubgroupProperties struct {
	// SType = STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES
	PNext                     *byte
	SubgroupSize              uint32
	SupportedStages           ShaderStageFlags
	SupportedOperations       SubgroupFeatureFlags
	QuadOperationsInAllStages bool
}

// WARNING - struct PhysicalDeviceSubgroupProperties is returned only, which is not yet handled in the binding
type _vkPhysicalDeviceSubgroupProperties struct {
	sType                     StructureType
	pNext                     *byte
	subgroupSize              uint32
	supportedStages           ShaderStageFlags
	supportedOperations       SubgroupFeatureFlags
	quadOperationsInAllStages Bool32
}

func (s *_vkPhysicalDeviceSubgroupProperties) Goify() *PhysicalDeviceSubgroupProperties {
	rval := &PhysicalDeviceSubgroupProperties{
		PNext:                     (*byte)(s.pNext),
		SubgroupSize:              (uint32)(s.subgroupSize),
		SupportedStages:           (ShaderStageFlags)(s.supportedStages),
		SupportedOperations:       (SubgroupFeatureFlags)(s.supportedOperations),
		QuadOperationsInAllStages: translatePublic_Bool32(s.quadOperationsInAllStages), /*default*/
	}
	return rval
}

// PhysicalDeviceVariablePointerFeatures: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVariablePointerFeatures.html
type PhysicalDeviceVariablePointerFeatures struct {
}

type _vkPhysicalDeviceVariablePointerFeatures = PhysicalDeviceVariablePointerFeatures

func (s *PhysicalDeviceVariablePointerFeatures) Vulkanize() *_vkPhysicalDeviceVariablePointerFeatures {
	rval := (*_vkPhysicalDeviceVariablePointerFeatures)(s)
	return rval
}

// PhysicalDeviceVariablePointersFeatures: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceVariablePointersFeatures.html
type PhysicalDeviceVariablePointersFeatures struct {
	// SType = STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES
	PNext                         *byte
	VariablePointersStorageBuffer bool
	VariablePointers              bool
}

type _vkPhysicalDeviceVariablePointersFeatures struct {
	sType                         StructureType
	pNext                         *byte
	variablePointersStorageBuffer Bool32
	variablePointers              Bool32
}

func (s *PhysicalDeviceVariablePointersFeatures) Vulkanize() *_vkPhysicalDeviceVariablePointersFeatures {
	rval := &_vkPhysicalDeviceVariablePointersFeatures{
		sType:                         STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES, /*c1*/
		pNext:                         (*byte)(s.PNext),                                          /*cb*/
		variablePointersStorageBuffer: translateInternal_Bool32(s.VariablePointersStorageBuffer), /*default*/
		variablePointers:              translateInternal_Bool32(s.VariablePointers),              /*default*/
	}
	return rval
}

// PipelineCacheCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineCacheCreateInfo.html
type PipelineCacheCreateInfo struct {
	// SType = STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO
	PNext *byte
	Flags PipelineCacheCreateFlags
	// initialDataSize
	PInitialData []byte
}

type _vkPipelineCacheCreateInfo struct {
	sType           StructureType
	pNext           *byte
	flags           PipelineCacheCreateFlags
	initialDataSize uintptr
	pInitialData    *byte
}

func (s *PipelineCacheCreateInfo) Vulkanize() *_vkPipelineCacheCreateInfo {
	rval := &_vkPipelineCacheCreateInfo{
		sType:           STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO, /*c1*/
		pNext:           (*byte)(s.PNext),                          /*cb*/
		flags:           (PipelineCacheCreateFlags)(s.Flags),       /*cb*/
		initialDataSize: uintptr(len(s.PInitialData)),              /*c6*/
		pInitialData:    (&s.PInitialData[0]),                      /*c rem*/
	}
	return rval
}

// PipelineCacheHeaderVersionOne: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineCacheHeaderVersionOne.html
type PipelineCacheHeaderVersionOne struct {
	HeaderSize        uint32
	HeaderVersion     PipelineCacheHeaderVersion
	VendorID          uint32
	DeviceID          uint32
	PipelineCacheUUID [UUID_SIZE]uint8
}

type _vkPipelineCacheHeaderVersionOne = PipelineCacheHeaderVersionOne

func (s *PipelineCacheHeaderVersionOne) Vulkanize() *_vkPipelineCacheHeaderVersionOne {
	rval := (*_vkPipelineCacheHeaderVersionOne)(s)
	return rval
}

// PipelineColorBlendAttachmentState: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineColorBlendAttachmentState.html
type PipelineColorBlendAttachmentState struct {
	BlendEnable         bool
	SrcColorBlendFactor BlendFactor
	DstColorBlendFactor BlendFactor
	ColorBlendOp        BlendOp
	SrcAlphaBlendFactor BlendFactor
	DstAlphaBlendFactor BlendFactor
	AlphaBlendOp        BlendOp
	ColorWriteMask      ColorComponentFlags
}

type _vkPipelineColorBlendAttachmentState struct {
	blendEnable         Bool32
	srcColorBlendFactor BlendFactor
	dstColorBlendFactor BlendFactor
	colorBlendOp        BlendOp
	srcAlphaBlendFactor BlendFactor
	dstAlphaBlendFactor BlendFactor
	alphaBlendOp        BlendOp
	colorWriteMask      ColorComponentFlags
}

func (s *PipelineColorBlendAttachmentState) Vulkanize() *_vkPipelineColorBlendAttachmentState {
	rval := &_vkPipelineColorBlendAttachmentState{
		blendEnable:         translateInternal_Bool32(s.BlendEnable), /*default*/
		srcColorBlendFactor: (BlendFactor)(s.SrcColorBlendFactor),    /*cb*/
		dstColorBlendFactor: (BlendFactor)(s.DstColorBlendFactor),    /*cb*/
		colorBlendOp:        (BlendOp)(s.ColorBlendOp),               /*cb*/
		srcAlphaBlendFactor: (BlendFactor)(s.SrcAlphaBlendFactor),    /*cb*/
		dstAlphaBlendFactor: (BlendFactor)(s.DstAlphaBlendFactor),    /*cb*/
		alphaBlendOp:        (BlendOp)(s.AlphaBlendOp),               /*cb*/
		colorWriteMask:      (ColorComponentFlags)(s.ColorWriteMask), /*cb*/
	}
	return rval
}

// PipelineColorBlendStateCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineColorBlendStateCreateInfo.html
type PipelineColorBlendStateCreateInfo struct {
	// SType = STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO
	PNext         *byte
	Flags         PipelineColorBlendStateCreateFlags
	LogicOpEnable bool
	LogicOp       LogicOp
	// attachmentCount
	PAttachments   []PipelineColorBlendAttachmentState
	BlendConstants [4]float32
}

type _vkPipelineColorBlendStateCreateInfo struct {
	sType           StructureType
	pNext           *byte
	flags           PipelineColorBlendStateCreateFlags
	logicOpEnable   Bool32
	logicOp         LogicOp
	attachmentCount uint32
	pAttachments    *_vkPipelineColorBlendAttachmentState
	blendConstants  [4]float32
}

func (s *PipelineColorBlendStateCreateInfo) Vulkanize() *_vkPipelineColorBlendStateCreateInfo {

	sl_pAttachments := make([]_vkPipelineColorBlendAttachmentState, len(s.PAttachments))
	for i, v := range s.PAttachments {
		sl_pAttachments[i] = *(v.Vulkanize())
	}
	rval := &_vkPipelineColorBlendStateCreateInfo{
		sType:           STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO, /*c1*/
		pNext:           (*byte)(s.PNext),                                      /*cb*/
		flags:           (PipelineColorBlendStateCreateFlags)(s.Flags),         /*cb*/
		logicOpEnable:   translateInternal_Bool32(s.LogicOpEnable),             /*default*/
		logicOp:         (LogicOp)(s.LogicOp),                                  /*cb*/
		attachmentCount: uint32(len(s.PAttachments)),                           /*c6*/
		pAttachments:    &(sl_pAttachments[0]),                                 /*c rem*/
		blendConstants:  ([4]float32)(s.BlendConstants),                        /*cb*/
	}
	return rval
}

// PipelineDepthStencilStateCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineDepthStencilStateCreateInfo.html
type PipelineDepthStencilStateCreateInfo struct {
	// SType = STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO
	PNext                 *byte
	Flags                 PipelineDepthStencilStateCreateFlags
	DepthTestEnable       bool
	DepthWriteEnable      bool
	DepthCompareOp        CompareOp
	DepthBoundsTestEnable bool
	StencilTestEnable     bool
	Front                 StencilOpState
	Back                  StencilOpState
	MinDepthBounds        float32
	MaxDepthBounds        float32
}

type _vkPipelineDepthStencilStateCreateInfo struct {
	sType                 StructureType
	pNext                 *byte
	flags                 PipelineDepthStencilStateCreateFlags
	depthTestEnable       Bool32
	depthWriteEnable      Bool32
	depthCompareOp        CompareOp
	depthBoundsTestEnable Bool32
	stencilTestEnable     Bool32
	front                 _vkStencilOpState
	back                  _vkStencilOpState
	minDepthBounds        float32
	maxDepthBounds        float32
}

func (s *PipelineDepthStencilStateCreateInfo) Vulkanize() *_vkPipelineDepthStencilStateCreateInfo {
	rval := &_vkPipelineDepthStencilStateCreateInfo{
		sType:                 STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO, /*c1*/
		pNext:                 (*byte)(s.PNext),                                        /*cb*/
		flags:                 (PipelineDepthStencilStateCreateFlags)(s.Flags),         /*cb*/
		depthTestEnable:       translateInternal_Bool32(s.DepthTestEnable),             /*default*/
		depthWriteEnable:      translateInternal_Bool32(s.DepthWriteEnable),            /*default*/
		depthCompareOp:        (CompareOp)(s.DepthCompareOp),                           /*cb*/
		depthBoundsTestEnable: translateInternal_Bool32(s.DepthBoundsTestEnable),       /*default*/
		stencilTestEnable:     translateInternal_Bool32(s.StencilTestEnable),           /*default*/
		front:                 (_vkStencilOpState)(s.Front),                            /*cb*/
		back:                  (_vkStencilOpState)(s.Back),                             /*cb*/
		minDepthBounds:        (float32)(s.MinDepthBounds),                             /*cb*/
		maxDepthBounds:        (float32)(s.MaxDepthBounds),                             /*cb*/
	}
	return rval
}

// PipelineDynamicStateCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineDynamicStateCreateInfo.html
type PipelineDynamicStateCreateInfo struct {
	// SType = STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO
	PNext *byte
	Flags PipelineDynamicStateCreateFlags
	// dynamicStateCount
	PDynamicStates []DynamicState
}

type _vkPipelineDynamicStateCreateInfo struct {
	sType             StructureType
	pNext             *byte
	flags             PipelineDynamicStateCreateFlags
	dynamicStateCount uint32
	pDynamicStates    *DynamicState
}

func (s *PipelineDynamicStateCreateInfo) Vulkanize() *_vkPipelineDynamicStateCreateInfo {
	rval := &_vkPipelineDynamicStateCreateInfo{
		sType:             STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO, /*c1*/
		pNext:             (*byte)(s.PNext),                                  /*cb*/
		flags:             (PipelineDynamicStateCreateFlags)(s.Flags),        /*cb*/
		dynamicStateCount: uint32(len(s.PDynamicStates)),                     /*c6*/
		pDynamicStates:    (&s.PDynamicStates[0]),                            /*c rem*/
	}
	return rval
}

// PipelineInputAssemblyStateCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineInputAssemblyStateCreateInfo.html
type PipelineInputAssemblyStateCreateInfo struct {
	// SType = STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO
	PNext                  *byte
	Flags                  PipelineInputAssemblyStateCreateFlags
	Topology               PrimitiveTopology
	PrimitiveRestartEnable bool
}

type _vkPipelineInputAssemblyStateCreateInfo struct {
	sType                  StructureType
	pNext                  *byte
	flags                  PipelineInputAssemblyStateCreateFlags
	topology               PrimitiveTopology
	primitiveRestartEnable Bool32
}

func (s *PipelineInputAssemblyStateCreateInfo) Vulkanize() *_vkPipelineInputAssemblyStateCreateInfo {
	rval := &_vkPipelineInputAssemblyStateCreateInfo{
		sType:                  STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO, /*c1*/
		pNext:                  (*byte)(s.PNext),                                         /*cb*/
		flags:                  (PipelineInputAssemblyStateCreateFlags)(s.Flags),         /*cb*/
		topology:               (PrimitiveTopology)(s.Topology),                          /*cb*/
		primitiveRestartEnable: translateInternal_Bool32(s.PrimitiveRestartEnable),       /*default*/
	}
	return rval
}

// PipelineLayoutCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineLayoutCreateInfo.html
type PipelineLayoutCreateInfo struct {
	// SType = STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO
	PNext *byte
	Flags PipelineLayoutCreateFlags
	// setLayoutCount
	PSetLayouts []DescriptorSetLayout
	// pushConstantRangeCount
	PPushConstantRanges []PushConstantRange
}

type _vkPipelineLayoutCreateInfo struct {
	sType                  StructureType
	pNext                  *byte
	flags                  PipelineLayoutCreateFlags
	setLayoutCount         uint32
	pSetLayouts            *DescriptorSetLayout
	pushConstantRangeCount uint32
	pPushConstantRanges    *_vkPushConstantRange
}

func (s *PipelineLayoutCreateInfo) Vulkanize() *_vkPipelineLayoutCreateInfo {
	rval := &_vkPipelineLayoutCreateInfo{
		sType:                  STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO, /*c1*/
		pNext:                  (*byte)(s.PNext),                           /*cb*/
		flags:                  (PipelineLayoutCreateFlags)(s.Flags),       /*cb*/
		setLayoutCount:         uint32(len(s.PSetLayouts)),                 /*c6*/
		pSetLayouts:            (&s.PSetLayouts[0]),                        /*c rem*/
		pushConstantRangeCount: uint32(len(s.PPushConstantRanges)),         /*c6*/
		pPushConstantRanges:    (&s.PPushConstantRanges[0]),                /*c rem*/
	}
	return rval
}

// PipelineMultisampleStateCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineMultisampleStateCreateInfo.html
type PipelineMultisampleStateCreateInfo struct {
	// SType = STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO
	PNext                 *byte
	Flags                 PipelineMultisampleStateCreateFlags
	RasterizationSamples  SampleCountFlagBits
	SampleShadingEnable   bool
	MinSampleShading      float32
	PSampleMask           *SampleMask
	AlphaToCoverageEnable bool
	AlphaToOneEnable      bool
}

type _vkPipelineMultisampleStateCreateInfo struct {
	sType                 StructureType
	pNext                 *byte
	flags                 PipelineMultisampleStateCreateFlags
	rasterizationSamples  SampleCountFlagBits
	sampleShadingEnable   Bool32
	minSampleShading      float32
	pSampleMask           *SampleMask
	alphaToCoverageEnable Bool32
	alphaToOneEnable      Bool32
}

func (s *PipelineMultisampleStateCreateInfo) Vulkanize() *_vkPipelineMultisampleStateCreateInfo {
	rval := &_vkPipelineMultisampleStateCreateInfo{
		sType:                 STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO, /*c1*/
		pNext:                 (*byte)(s.PNext),                                      /*cb*/
		flags:                 (PipelineMultisampleStateCreateFlags)(s.Flags),        /*cb*/
		rasterizationSamples:  (SampleCountFlagBits)(s.RasterizationSamples),         /*cb*/
		sampleShadingEnable:   translateInternal_Bool32(s.SampleShadingEnable),       /*default*/
		minSampleShading:      (float32)(s.MinSampleShading),                         /*cb*/
		pSampleMask:           (*SampleMask)(s.PSampleMask),                          /*cb*/
		alphaToCoverageEnable: translateInternal_Bool32(s.AlphaToCoverageEnable),     /*default*/
		alphaToOneEnable:      translateInternal_Bool32(s.AlphaToOneEnable),          /*default*/
	}
	return rval
}

// PipelineRasterizationStateCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineRasterizationStateCreateInfo.html
type PipelineRasterizationStateCreateInfo struct {
	// SType = STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO
	PNext                   *byte
	Flags                   PipelineRasterizationStateCreateFlags
	DepthClampEnable        bool
	RasterizerDiscardEnable bool
	PolygonMode             PolygonMode
	CullMode                CullModeFlags
	FrontFace               FrontFace
	DepthBiasEnable         bool
	DepthBiasConstantFactor float32
	DepthBiasClamp          float32
	DepthBiasSlopeFactor    float32
	LineWidth               float32
}

type _vkPipelineRasterizationStateCreateInfo struct {
	sType                   StructureType
	pNext                   *byte
	flags                   PipelineRasterizationStateCreateFlags
	depthClampEnable        Bool32
	rasterizerDiscardEnable Bool32
	polygonMode             PolygonMode
	cullMode                CullModeFlags
	frontFace               FrontFace
	depthBiasEnable         Bool32
	depthBiasConstantFactor float32
	depthBiasClamp          float32
	depthBiasSlopeFactor    float32
	lineWidth               float32
}

func (s *PipelineRasterizationStateCreateInfo) Vulkanize() *_vkPipelineRasterizationStateCreateInfo {
	rval := &_vkPipelineRasterizationStateCreateInfo{
		sType:                   STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO, /*c1*/
		pNext:                   (*byte)(s.PNext),                                        /*cb*/
		flags:                   (PipelineRasterizationStateCreateFlags)(s.Flags),        /*cb*/
		depthClampEnable:        translateInternal_Bool32(s.DepthClampEnable),            /*default*/
		rasterizerDiscardEnable: translateInternal_Bool32(s.RasterizerDiscardEnable),     /*default*/
		polygonMode:             (PolygonMode)(s.PolygonMode),                            /*cb*/
		cullMode:                (CullModeFlags)(s.CullMode),                             /*cb*/
		frontFace:               (FrontFace)(s.FrontFace),                                /*cb*/
		depthBiasEnable:         translateInternal_Bool32(s.DepthBiasEnable),             /*default*/
		depthBiasConstantFactor: (float32)(s.DepthBiasConstantFactor),                    /*cb*/
		depthBiasClamp:          (float32)(s.DepthBiasClamp),                             /*cb*/
		depthBiasSlopeFactor:    (float32)(s.DepthBiasSlopeFactor),                       /*cb*/
		lineWidth:               (float32)(s.LineWidth),                                  /*cb*/
	}
	return rval
}

// PipelineShaderStageCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineShaderStageCreateInfo.html
type PipelineShaderStageCreateInfo struct {
	// SType = STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO
	PNext               *byte
	Flags               PipelineShaderStageCreateFlags
	Stage               ShaderStageFlagBits
	Module              ShaderModule
	PName               string
	PSpecializationInfo *SpecializationInfo
}

type _vkPipelineShaderStageCreateInfo struct {
	sType               StructureType
	pNext               *byte
	flags               PipelineShaderStageCreateFlags
	stage               ShaderStageFlagBits
	module              ShaderModule
	pName               *byte
	pSpecializationInfo *_vkSpecializationInfo
}

func (s *PipelineShaderStageCreateInfo) Vulkanize() *_vkPipelineShaderStageCreateInfo {
	rval := &_vkPipelineShaderStageCreateInfo{
		sType:               STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO, /*c1*/
		pNext:               (*byte)(s.PNext),                                 /*cb*/
		flags:               (PipelineShaderStageCreateFlags)(s.Flags),        /*cb*/
		stage:               (ShaderStageFlagBits)(s.Stage),                   /*cb*/
		module:              (ShaderModule)(s.Module),                         /*cb*/
		pName:               sys_stringToBytePointer(s.PName),                 /*c rem*/
		pSpecializationInfo: (s.PSpecializationInfo.Vulkanize()),              /*c rem*/
	}
	return rval
}

// PipelineTessellationDomainOriginStateCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineTessellationDomainOriginStateCreateInfo.html
type PipelineTessellationDomainOriginStateCreateInfo struct {
	// SType = STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO
	PNext        *byte
	DomainOrigin TessellationDomainOrigin
}

type _vkPipelineTessellationDomainOriginStateCreateInfo struct {
	sType        StructureType
	pNext        *byte
	domainOrigin TessellationDomainOrigin
}

func (s *PipelineTessellationDomainOriginStateCreateInfo) Vulkanize() *_vkPipelineTessellationDomainOriginStateCreateInfo {
	rval := &_vkPipelineTessellationDomainOriginStateCreateInfo{
		sType:        STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO, /*c1*/
		pNext:        (*byte)(s.PNext),                                                     /*cb*/
		domainOrigin: (TessellationDomainOrigin)(s.DomainOrigin),                           /*cb*/
	}
	return rval
}

// PipelineTessellationStateCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineTessellationStateCreateInfo.html
type PipelineTessellationStateCreateInfo struct {
	// SType = STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO
	PNext              *byte
	Flags              PipelineTessellationStateCreateFlags
	PatchControlPoints uint32
}

type _vkPipelineTessellationStateCreateInfo struct {
	sType              StructureType
	pNext              *byte
	flags              PipelineTessellationStateCreateFlags
	patchControlPoints uint32
}

func (s *PipelineTessellationStateCreateInfo) Vulkanize() *_vkPipelineTessellationStateCreateInfo {
	rval := &_vkPipelineTessellationStateCreateInfo{
		sType:              STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO, /*c1*/
		pNext:              (*byte)(s.PNext),                                       /*cb*/
		flags:              (PipelineTessellationStateCreateFlags)(s.Flags),        /*cb*/
		patchControlPoints: (uint32)(s.PatchControlPoints),                         /*cb*/
	}
	return rval
}

// PipelineVertexInputStateCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineVertexInputStateCreateInfo.html
type PipelineVertexInputStateCreateInfo struct {
	// SType = STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO
	PNext *byte
	Flags PipelineVertexInputStateCreateFlags
	// vertexBindingDescriptionCount
	PVertexBindingDescriptions []VertexInputBindingDescription
	// vertexAttributeDescriptionCount
	PVertexAttributeDescriptions []VertexInputAttributeDescription
}

type _vkPipelineVertexInputStateCreateInfo struct {
	sType                           StructureType
	pNext                           *byte
	flags                           PipelineVertexInputStateCreateFlags
	vertexBindingDescriptionCount   uint32
	pVertexBindingDescriptions      *_vkVertexInputBindingDescription
	vertexAttributeDescriptionCount uint32
	pVertexAttributeDescriptions    *_vkVertexInputAttributeDescription
}

func (s *PipelineVertexInputStateCreateInfo) Vulkanize() *_vkPipelineVertexInputStateCreateInfo {
	rval := &_vkPipelineVertexInputStateCreateInfo{
		sType:                           STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO, /*c1*/
		pNext:                           (*byte)(s.PNext),                                       /*cb*/
		flags:                           (PipelineVertexInputStateCreateFlags)(s.Flags),         /*cb*/
		vertexBindingDescriptionCount:   uint32(len(s.PVertexBindingDescriptions)),              /*c6*/
		pVertexBindingDescriptions:      (&s.PVertexBindingDescriptions[0]),                     /*c rem*/
		vertexAttributeDescriptionCount: uint32(len(s.PVertexAttributeDescriptions)),            /*c6*/
		pVertexAttributeDescriptions:    (&s.PVertexAttributeDescriptions[0]),                   /*c rem*/
	}
	return rval
}

// PipelineViewportStateCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPipelineViewportStateCreateInfo.html
type PipelineViewportStateCreateInfo struct {
	// SType = STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO
	PNext *byte
	Flags PipelineViewportStateCreateFlags
	// viewportCount
	PViewports []Viewport
	// scissorCount
	PScissors []Rect2D
}

type _vkPipelineViewportStateCreateInfo struct {
	sType         StructureType
	pNext         *byte
	flags         PipelineViewportStateCreateFlags
	viewportCount uint32
	pViewports    *_vkViewport
	scissorCount  uint32
	pScissors     *_vkRect2D
}

func (s *PipelineViewportStateCreateInfo) Vulkanize() *_vkPipelineViewportStateCreateInfo {

	sl_pScissors := make([]_vkRect2D, len(s.PScissors))
	for i, v := range s.PScissors {
		sl_pScissors[i] = *(v.Vulkanize())
	}
	rval := &_vkPipelineViewportStateCreateInfo{
		sType:         STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO, /*c1*/
		pNext:         (*byte)(s.PNext),                                   /*cb*/
		flags:         (PipelineViewportStateCreateFlags)(s.Flags),        /*cb*/
		viewportCount: uint32(len(s.PViewports)),                          /*c6*/
		pViewports:    (&s.PViewports[0]),                                 /*c rem*/
		scissorCount:  uint32(len(s.PScissors)),                           /*c6*/
		pScissors:     &(sl_pScissors[0]),                                 /*c rem*/
	}
	return rval
}

// ProtectedSubmitInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkProtectedSubmitInfo.html
type ProtectedSubmitInfo struct {
	// SType = STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO
	PNext           *byte
	ProtectedSubmit bool
}

type _vkProtectedSubmitInfo struct {
	sType           StructureType
	pNext           *byte
	protectedSubmit Bool32
}

func (s *ProtectedSubmitInfo) Vulkanize() *_vkProtectedSubmitInfo {
	rval := &_vkProtectedSubmitInfo{
		sType:           STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO,        /*c1*/
		pNext:           (*byte)(s.PNext),                            /*cb*/
		protectedSubmit: translateInternal_Bool32(s.ProtectedSubmit), /*default*/
	}
	return rval
}

// PushConstantRange: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkPushConstantRange.html
type PushConstantRange struct {
	StageFlags ShaderStageFlags
	Offset     uint32
	Size       uint32
}

type _vkPushConstantRange = PushConstantRange

func (s *PushConstantRange) Vulkanize() *_vkPushConstantRange {
	rval := (*_vkPushConstantRange)(s)
	return rval
}

// QueryPoolCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkQueryPoolCreateInfo.html
type QueryPoolCreateInfo struct {
	// SType = STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO
	PNext              *byte
	Flags              QueryPoolCreateFlags
	QueryType          QueryType
	QueryCount         uint32
	PipelineStatistics QueryPipelineStatisticFlags
}

type _vkQueryPoolCreateInfo struct {
	sType              StructureType
	pNext              *byte
	flags              QueryPoolCreateFlags
	queryType          QueryType
	queryCount         uint32
	pipelineStatistics QueryPipelineStatisticFlags
}

func (s *QueryPoolCreateInfo) Vulkanize() *_vkQueryPoolCreateInfo {
	rval := &_vkQueryPoolCreateInfo{
		sType:              STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO,               /*c1*/
		pNext:              (*byte)(s.PNext),                                    /*cb*/
		flags:              (QueryPoolCreateFlags)(s.Flags),                     /*cb*/
		queryType:          (QueryType)(s.QueryType),                            /*cb*/
		queryCount:         (uint32)(s.QueryCount),                              /*cb*/
		pipelineStatistics: (QueryPipelineStatisticFlags)(s.PipelineStatistics), /*cb*/
	}
	return rval
}

// QueueFamilyProperties: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkQueueFamilyProperties.html
type QueueFamilyProperties struct {
	QueueFlags                  QueueFlags
	QueueCount                  uint32
	TimestampValidBits          uint32
	MinImageTransferGranularity Extent3D
}

// WARNING - struct QueueFamilyProperties is returned only, which is not yet handled in the binding
type _vkQueueFamilyProperties struct {
	queueFlags                  QueueFlags
	queueCount                  uint32
	timestampValidBits          uint32
	minImageTransferGranularity _vkExtent3D
}

func (s *_vkQueueFamilyProperties) Goify() *QueueFamilyProperties {
	rval := &QueueFamilyProperties{
		QueueFlags:                  (QueueFlags)(s.queueFlags),
		QueueCount:                  (uint32)(s.queueCount),
		TimestampValidBits:          (uint32)(s.timestampValidBits),
		MinImageTransferGranularity: (Extent3D)(s.minImageTransferGranularity),
	}
	return rval
}

// QueueFamilyProperties2: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkQueueFamilyProperties2.html
type QueueFamilyProperties2 struct {
	// SType = STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2
	PNext                 *byte
	QueueFamilyProperties QueueFamilyProperties
}

// WARNING - struct QueueFamilyProperties2 is returned only, which is not yet handled in the binding
type _vkQueueFamilyProperties2 struct {
	sType                 StructureType
	pNext                 *byte
	queueFamilyProperties _vkQueueFamilyProperties
}

func (s *_vkQueueFamilyProperties2) Goify() *QueueFamilyProperties2 {
	rval := &QueueFamilyProperties2{
		PNext:                 (*byte)(s.pNext),
		QueueFamilyProperties: *(s.queueFamilyProperties.Goify()),
	}
	return rval
}

// Rect2D: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkRect2D.html
type Rect2D struct {
	Offset Offset2D
	Extent Extent2D
}

type _vkRect2D struct {
	offset _vkOffset2D
	extent _vkExtent2D
}

func (s *Rect2D) Vulkanize() *_vkRect2D {
	rval := &_vkRect2D{
		offset: (_vkOffset2D)(s.Offset), /*cb*/
		extent: (_vkExtent2D)(s.Extent), /*cb*/
	}
	return rval
}

// RenderPassCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkRenderPassCreateInfo.html
type RenderPassCreateInfo struct {
	// SType = STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO
	PNext *byte
	Flags RenderPassCreateFlags
	// attachmentCount
	PAttachments []AttachmentDescription
	// subpassCount
	PSubpasses []SubpassDescription
	// dependencyCount
	PDependencies []SubpassDependency
}

type _vkRenderPassCreateInfo struct {
	sType           StructureType
	pNext           *byte
	flags           RenderPassCreateFlags
	attachmentCount uint32
	pAttachments    *_vkAttachmentDescription
	subpassCount    uint32
	pSubpasses      *_vkSubpassDescription
	dependencyCount uint32
	pDependencies   *_vkSubpassDependency
}

func (s *RenderPassCreateInfo) Vulkanize() *_vkRenderPassCreateInfo {

	sl_pSubpasses := make([]_vkSubpassDescription, len(s.PSubpasses))
	for i, v := range s.PSubpasses {
		sl_pSubpasses[i] = *(v.Vulkanize())
	}
	rval := &_vkRenderPassCreateInfo{
		sType:           STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO, /*c1*/
		pNext:           (*byte)(s.PNext),                       /*cb*/
		flags:           (RenderPassCreateFlags)(s.Flags),       /*cb*/
		attachmentCount: uint32(len(s.PAttachments)),            /*c6*/
		pAttachments:    (&s.PAttachments[0]),                   /*c rem*/
		subpassCount:    uint32(len(s.PSubpasses)),              /*c6*/
		pSubpasses:      &(sl_pSubpasses[0]),                    /*c rem*/
		dependencyCount: uint32(len(s.PDependencies)),           /*c6*/
		pDependencies:   (&s.PDependencies[0]),                  /*c rem*/
	}
	return rval
}

// RenderPassInputAttachmentAspectCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkRenderPassInputAttachmentAspectCreateInfo.html
type RenderPassInputAttachmentAspectCreateInfo struct {
	// SType = STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO
	PNext *byte
	// aspectReferenceCount
	PAspectReferences []InputAttachmentAspectReference
}

type _vkRenderPassInputAttachmentAspectCreateInfo struct {
	sType                StructureType
	pNext                *byte
	aspectReferenceCount uint32
	pAspectReferences    *_vkInputAttachmentAspectReference
}

func (s *RenderPassInputAttachmentAspectCreateInfo) Vulkanize() *_vkRenderPassInputAttachmentAspectCreateInfo {
	rval := &_vkRenderPassInputAttachmentAspectCreateInfo{
		sType:                STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO, /*c1*/
		pNext:                (*byte)(s.PNext),                                               /*cb*/
		aspectReferenceCount: uint32(len(s.PAspectReferences)),                               /*c6*/
		pAspectReferences:    (&s.PAspectReferences[0]),                                      /*c rem*/
	}
	return rval
}

// RenderPassMultiviewCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkRenderPassMultiviewCreateInfo.html
type RenderPassMultiviewCreateInfo struct {
	// SType = STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO
	PNext *byte
	// subpassCount
	PViewMasks []uint32
	// dependencyCount
	PViewOffsets []int32
	// correlationMaskCount
	PCorrelationMasks []uint32
}

type _vkRenderPassMultiviewCreateInfo struct {
	sType                StructureType
	pNext                *byte
	subpassCount         uint32
	pViewMasks           *uint32
	dependencyCount      uint32
	pViewOffsets         *int32
	correlationMaskCount uint32
	pCorrelationMasks    *uint32
}

func (s *RenderPassMultiviewCreateInfo) Vulkanize() *_vkRenderPassMultiviewCreateInfo {
	rval := &_vkRenderPassMultiviewCreateInfo{
		sType:                STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO, /*c1*/
		pNext:                (*byte)(s.PNext),                                 /*cb*/
		subpassCount:         uint32(len(s.PViewMasks)),                        /*c6*/
		pViewMasks:           (&s.PViewMasks[0]),                               /*c rem*/
		dependencyCount:      uint32(len(s.PViewOffsets)),                      /*c6*/
		pViewOffsets:         (&s.PViewOffsets[0]),                             /*c rem*/
		correlationMaskCount: uint32(len(s.PCorrelationMasks)),                 /*c6*/
		pCorrelationMasks:    (&s.PCorrelationMasks[0]),                        /*c rem*/
	}
	return rval
}

// SamplerCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSamplerCreateInfo.html
type SamplerCreateInfo struct {
	// SType = STRUCTURE_TYPE_SAMPLER_CREATE_INFO
	PNext                   *byte
	Flags                   SamplerCreateFlags
	MagFilter               Filter
	MinFilter               Filter
	MipmapMode              SamplerMipmapMode
	AddressModeU            SamplerAddressMode
	AddressModeV            SamplerAddressMode
	AddressModeW            SamplerAddressMode
	MipLodBias              float32
	AnisotropyEnable        bool
	MaxAnisotropy           float32
	CompareEnable           bool
	CompareOp               CompareOp
	MinLod                  float32
	MaxLod                  float32
	BorderColor             BorderColor
	UnnormalizedCoordinates bool
}

type _vkSamplerCreateInfo struct {
	sType                   StructureType
	pNext                   *byte
	flags                   SamplerCreateFlags
	magFilter               Filter
	minFilter               Filter
	mipmapMode              SamplerMipmapMode
	addressModeU            SamplerAddressMode
	addressModeV            SamplerAddressMode
	addressModeW            SamplerAddressMode
	mipLodBias              float32
	anisotropyEnable        Bool32
	maxAnisotropy           float32
	compareEnable           Bool32
	compareOp               CompareOp
	minLod                  float32
	maxLod                  float32
	borderColor             BorderColor
	unnormalizedCoordinates Bool32
}

func (s *SamplerCreateInfo) Vulkanize() *_vkSamplerCreateInfo {
	rval := &_vkSamplerCreateInfo{
		sType:                   STRUCTURE_TYPE_SAMPLER_CREATE_INFO,                  /*c1*/
		pNext:                   (*byte)(s.PNext),                                    /*cb*/
		flags:                   (SamplerCreateFlags)(s.Flags),                       /*cb*/
		magFilter:               (Filter)(s.MagFilter),                               /*cb*/
		minFilter:               (Filter)(s.MinFilter),                               /*cb*/
		mipmapMode:              (SamplerMipmapMode)(s.MipmapMode),                   /*cb*/
		addressModeU:            (SamplerAddressMode)(s.AddressModeU),                /*cb*/
		addressModeV:            (SamplerAddressMode)(s.AddressModeV),                /*cb*/
		addressModeW:            (SamplerAddressMode)(s.AddressModeW),                /*cb*/
		mipLodBias:              (float32)(s.MipLodBias),                             /*cb*/
		anisotropyEnable:        translateInternal_Bool32(s.AnisotropyEnable),        /*default*/
		maxAnisotropy:           (float32)(s.MaxAnisotropy),                          /*cb*/
		compareEnable:           translateInternal_Bool32(s.CompareEnable),           /*default*/
		compareOp:               (CompareOp)(s.CompareOp),                            /*cb*/
		minLod:                  (float32)(s.MinLod),                                 /*cb*/
		maxLod:                  (float32)(s.MaxLod),                                 /*cb*/
		borderColor:             (BorderColor)(s.BorderColor),                        /*cb*/
		unnormalizedCoordinates: translateInternal_Bool32(s.UnnormalizedCoordinates), /*default*/
	}
	return rval
}

// SamplerYcbcrConversionCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSamplerYcbcrConversionCreateInfo.html
type SamplerYcbcrConversionCreateInfo struct {
	// SType = STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO
	PNext                       *byte
	Format                      Format
	YcbcrModel                  SamplerYcbcrModelConversion
	YcbcrRange                  SamplerYcbcrRange
	Components                  ComponentMapping
	XChromaOffset               ChromaLocation
	YChromaOffset               ChromaLocation
	ChromaFilter                Filter
	ForceExplicitReconstruction bool
}

type _vkSamplerYcbcrConversionCreateInfo struct {
	sType                       StructureType
	pNext                       *byte
	format                      Format
	ycbcrModel                  SamplerYcbcrModelConversion
	ycbcrRange                  SamplerYcbcrRange
	components                  _vkComponentMapping
	xChromaOffset               ChromaLocation
	yChromaOffset               ChromaLocation
	chromaFilter                Filter
	forceExplicitReconstruction Bool32
}

func (s *SamplerYcbcrConversionCreateInfo) Vulkanize() *_vkSamplerYcbcrConversionCreateInfo {
	rval := &_vkSamplerYcbcrConversionCreateInfo{
		sType:                       STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO,     /*c1*/
		pNext:                       (*byte)(s.PNext),                                        /*cb*/
		format:                      (Format)(s.Format),                                      /*cb*/
		ycbcrModel:                  (SamplerYcbcrModelConversion)(s.YcbcrModel),             /*cb*/
		ycbcrRange:                  (SamplerYcbcrRange)(s.YcbcrRange),                       /*cb*/
		components:                  (_vkComponentMapping)(s.Components),                     /*cb*/
		xChromaOffset:               (ChromaLocation)(s.XChromaOffset),                       /*cb*/
		yChromaOffset:               (ChromaLocation)(s.YChromaOffset),                       /*cb*/
		chromaFilter:                (Filter)(s.ChromaFilter),                                /*cb*/
		forceExplicitReconstruction: translateInternal_Bool32(s.ForceExplicitReconstruction), /*default*/
	}
	return rval
}

// SamplerYcbcrConversionImageFormatProperties: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSamplerYcbcrConversionImageFormatProperties.html
type SamplerYcbcrConversionImageFormatProperties struct {
	// SType = STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES
	PNext                               *byte
	CombinedImageSamplerDescriptorCount uint32
}

// WARNING - struct SamplerYcbcrConversionImageFormatProperties is returned only, which is not yet handled in the binding
type _vkSamplerYcbcrConversionImageFormatProperties struct {
	sType                               StructureType
	pNext                               *byte
	combinedImageSamplerDescriptorCount uint32
}

func (s *_vkSamplerYcbcrConversionImageFormatProperties) Goify() *SamplerYcbcrConversionImageFormatProperties {
	rval := &SamplerYcbcrConversionImageFormatProperties{
		PNext:                               (*byte)(s.pNext),
		CombinedImageSamplerDescriptorCount: (uint32)(s.combinedImageSamplerDescriptorCount),
	}
	return rval
}

// SamplerYcbcrConversionInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSamplerYcbcrConversionInfo.html
type SamplerYcbcrConversionInfo struct {
	// SType = STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO
	PNext      *byte
	Conversion SamplerYcbcrConversion
}

type _vkSamplerYcbcrConversionInfo struct {
	sType      StructureType
	pNext      *byte
	conversion SamplerYcbcrConversion
}

func (s *SamplerYcbcrConversionInfo) Vulkanize() *_vkSamplerYcbcrConversionInfo {
	rval := &_vkSamplerYcbcrConversionInfo{
		sType:      STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO, /*c1*/
		pNext:      (*byte)(s.PNext),                             /*cb*/
		conversion: (SamplerYcbcrConversion)(s.Conversion),       /*cb*/
	}
	return rval
}

// SemaphoreCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSemaphoreCreateInfo.html
type SemaphoreCreateInfo struct {
	// SType = STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO
	PNext *byte
	Flags SemaphoreCreateFlags
}

type _vkSemaphoreCreateInfo struct {
	sType StructureType
	pNext *byte
	flags SemaphoreCreateFlags
}

func (s *SemaphoreCreateInfo) Vulkanize() *_vkSemaphoreCreateInfo {
	rval := &_vkSemaphoreCreateInfo{
		sType: STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO, /*c1*/
		pNext: (*byte)(s.PNext),                     /*cb*/
		flags: (SemaphoreCreateFlags)(s.Flags),      /*cb*/
	}
	return rval
}

// ShaderModuleCreateInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkShaderModuleCreateInfo.html
type ShaderModuleCreateInfo struct {
	// SType = STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO
	PNext    *byte
	Flags    ShaderModuleCreateFlags
	CodeSize uintptr
	PCode    *uint32
}

type _vkShaderModuleCreateInfo struct {
	sType    StructureType
	pNext    *byte
	flags    ShaderModuleCreateFlags
	codeSize uintptr
	pCode    *uint32
}

func (s *ShaderModuleCreateInfo) Vulkanize() *_vkShaderModuleCreateInfo {
	rval := &_vkShaderModuleCreateInfo{
		sType:    STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO, /*c1*/
		pNext:    (*byte)(s.PNext),                         /*cb*/
		flags:    (ShaderModuleCreateFlags)(s.Flags),       /*cb*/
		codeSize: (uintptr)(s.CodeSize),                    /*cb*/
		pCode:    (*uint32)(s.PCode),                       /*cb*/
	}
	return rval
}

// SparseBufferMemoryBindInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSparseBufferMemoryBindInfo.html
type SparseBufferMemoryBindInfo struct {
	Buffer Buffer
	// bindCount
	PBinds []SparseMemoryBind
}

type _vkSparseBufferMemoryBindInfo struct {
	buffer    Buffer
	bindCount uint32
	pBinds    *_vkSparseMemoryBind
}

func (s *SparseBufferMemoryBindInfo) Vulkanize() *_vkSparseBufferMemoryBindInfo {
	rval := &_vkSparseBufferMemoryBindInfo{
		buffer:    (Buffer)(s.Buffer),    /*cb*/
		bindCount: uint32(len(s.PBinds)), /*c6*/
		pBinds:    (&s.PBinds[0]),        /*c rem*/
	}
	return rval
}

// SparseImageFormatProperties: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSparseImageFormatProperties.html
type SparseImageFormatProperties struct {
	AspectMask       ImageAspectFlags
	ImageGranularity Extent3D
	Flags            SparseImageFormatFlags
}

// WARNING - struct SparseImageFormatProperties is returned only, which is not yet handled in the binding
type _vkSparseImageFormatProperties struct {
	aspectMask       ImageAspectFlags
	imageGranularity _vkExtent3D
	flags            SparseImageFormatFlags
}

func (s *_vkSparseImageFormatProperties) Goify() *SparseImageFormatProperties {
	rval := &SparseImageFormatProperties{
		AspectMask:       (ImageAspectFlags)(s.aspectMask),
		ImageGranularity: (Extent3D)(s.imageGranularity),
		Flags:            (SparseImageFormatFlags)(s.flags),
	}
	return rval
}

// SparseImageFormatProperties2: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSparseImageFormatProperties2.html
type SparseImageFormatProperties2 struct {
	// SType = STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2
	PNext      *byte
	Properties SparseImageFormatProperties
}

// WARNING - struct SparseImageFormatProperties2 is returned only, which is not yet handled in the binding
type _vkSparseImageFormatProperties2 struct {
	sType      StructureType
	pNext      *byte
	properties _vkSparseImageFormatProperties
}

func (s *_vkSparseImageFormatProperties2) Goify() *SparseImageFormatProperties2 {
	rval := &SparseImageFormatProperties2{
		PNext:      (*byte)(s.pNext),
		Properties: *(s.properties.Goify()),
	}
	return rval
}

// SparseImageMemoryBind: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSparseImageMemoryBind.html
type SparseImageMemoryBind struct {
	Subresource  ImageSubresource
	Offset       Offset3D
	Extent       Extent3D
	Memory       DeviceMemory
	MemoryOffset DeviceSize
	Flags        SparseMemoryBindFlags
}

type _vkSparseImageMemoryBind struct {
	subresource  _vkImageSubresource
	offset       _vkOffset3D
	extent       _vkExtent3D
	memory       DeviceMemory
	memoryOffset DeviceSize
	flags        SparseMemoryBindFlags
}

func (s *SparseImageMemoryBind) Vulkanize() *_vkSparseImageMemoryBind {
	rval := &_vkSparseImageMemoryBind{
		subresource:  (_vkImageSubresource)(s.Subresource), /*cb*/
		offset:       (_vkOffset3D)(s.Offset),              /*cb*/
		extent:       (_vkExtent3D)(s.Extent),              /*cb*/
		memory:       (DeviceMemory)(s.Memory),             /*cb*/
		memoryOffset: (DeviceSize)(s.MemoryOffset),         /*cb*/
		flags:        (SparseMemoryBindFlags)(s.Flags),     /*cb*/
	}
	return rval
}

// SparseImageMemoryBindInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSparseImageMemoryBindInfo.html
type SparseImageMemoryBindInfo struct {
	Image Image
	// bindCount
	PBinds []SparseImageMemoryBind
}

type _vkSparseImageMemoryBindInfo struct {
	image     Image
	bindCount uint32
	pBinds    *_vkSparseImageMemoryBind
}

func (s *SparseImageMemoryBindInfo) Vulkanize() *_vkSparseImageMemoryBindInfo {

	sl_pBinds := make([]_vkSparseImageMemoryBind, len(s.PBinds))
	for i, v := range s.PBinds {
		sl_pBinds[i] = *(v.Vulkanize())
	}
	rval := &_vkSparseImageMemoryBindInfo{
		image:     (Image)(s.Image),      /*cb*/
		bindCount: uint32(len(s.PBinds)), /*c6*/
		pBinds:    &(sl_pBinds[0]),       /*c rem*/
	}
	return rval
}

// SparseImageMemoryRequirements: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSparseImageMemoryRequirements.html
type SparseImageMemoryRequirements struct {
	FormatProperties     SparseImageFormatProperties
	ImageMipTailFirstLod uint32
	ImageMipTailSize     DeviceSize
	ImageMipTailOffset   DeviceSize
	ImageMipTailStride   DeviceSize
}

// WARNING - struct SparseImageMemoryRequirements is returned only, which is not yet handled in the binding
type _vkSparseImageMemoryRequirements struct {
	formatProperties     _vkSparseImageFormatProperties
	imageMipTailFirstLod uint32
	imageMipTailSize     DeviceSize
	imageMipTailOffset   DeviceSize
	imageMipTailStride   DeviceSize
}

func (s *_vkSparseImageMemoryRequirements) Goify() *SparseImageMemoryRequirements {
	rval := &SparseImageMemoryRequirements{
		FormatProperties:     *(s.formatProperties.Goify()),
		ImageMipTailFirstLod: (uint32)(s.imageMipTailFirstLod),
		ImageMipTailSize:     (DeviceSize)(s.imageMipTailSize),
		ImageMipTailOffset:   (DeviceSize)(s.imageMipTailOffset),
		ImageMipTailStride:   (DeviceSize)(s.imageMipTailStride),
	}
	return rval
}

// SparseImageMemoryRequirements2: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSparseImageMemoryRequirements2.html
type SparseImageMemoryRequirements2 struct {
	// SType = STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2
	PNext              *byte
	MemoryRequirements SparseImageMemoryRequirements
}

// WARNING - struct SparseImageMemoryRequirements2 is returned only, which is not yet handled in the binding
type _vkSparseImageMemoryRequirements2 struct {
	sType              StructureType
	pNext              *byte
	memoryRequirements _vkSparseImageMemoryRequirements
}

func (s *_vkSparseImageMemoryRequirements2) Goify() *SparseImageMemoryRequirements2 {
	rval := &SparseImageMemoryRequirements2{
		PNext:              (*byte)(s.pNext),
		MemoryRequirements: *(s.memoryRequirements.Goify()),
	}
	return rval
}

// SparseImageOpaqueMemoryBindInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSparseImageOpaqueMemoryBindInfo.html
type SparseImageOpaqueMemoryBindInfo struct {
	Image Image
	// bindCount
	PBinds []SparseMemoryBind
}

type _vkSparseImageOpaqueMemoryBindInfo struct {
	image     Image
	bindCount uint32
	pBinds    *_vkSparseMemoryBind
}

func (s *SparseImageOpaqueMemoryBindInfo) Vulkanize() *_vkSparseImageOpaqueMemoryBindInfo {
	rval := &_vkSparseImageOpaqueMemoryBindInfo{
		image:     (Image)(s.Image),      /*cb*/
		bindCount: uint32(len(s.PBinds)), /*c6*/
		pBinds:    (&s.PBinds[0]),        /*c rem*/
	}
	return rval
}

// SparseMemoryBind: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSparseMemoryBind.html
type SparseMemoryBind struct {
	ResourceOffset DeviceSize
	Size           DeviceSize
	Memory         DeviceMemory
	MemoryOffset   DeviceSize
	Flags          SparseMemoryBindFlags
}

type _vkSparseMemoryBind = SparseMemoryBind

func (s *SparseMemoryBind) Vulkanize() *_vkSparseMemoryBind {
	rval := (*_vkSparseMemoryBind)(s)
	return rval
}

// SpecializationInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSpecializationInfo.html
type SpecializationInfo struct {
	// mapEntryCount
	PMapEntries []SpecializationMapEntry
	// dataSize
	PData []byte
}

type _vkSpecializationInfo struct {
	mapEntryCount uint32
	pMapEntries   *_vkSpecializationMapEntry
	dataSize      uintptr
	pData         *byte
}

func (s *SpecializationInfo) Vulkanize() *_vkSpecializationInfo {
	rval := &_vkSpecializationInfo{
		mapEntryCount: uint32(len(s.PMapEntries)), /*c6*/
		pMapEntries:   (&s.PMapEntries[0]),        /*c rem*/
		dataSize:      uintptr(len(s.PData)),      /*c6*/
		pData:         (&s.PData[0]),              /*c rem*/
	}
	return rval
}

// SpecializationMapEntry: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSpecializationMapEntry.html
type SpecializationMapEntry struct {
	ConstantID uint32
	Offset     uint32
	Size       uintptr
}

type _vkSpecializationMapEntry = SpecializationMapEntry

func (s *SpecializationMapEntry) Vulkanize() *_vkSpecializationMapEntry {
	rval := (*_vkSpecializationMapEntry)(s)
	return rval
}

// StencilOpState: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkStencilOpState.html
type StencilOpState struct {
	FailOp      StencilOp
	PassOp      StencilOp
	DepthFailOp StencilOp
	CompareOp   CompareOp
	CompareMask uint32
	WriteMask   uint32
	Reference   uint32
}

type _vkStencilOpState = StencilOpState

func (s *StencilOpState) Vulkanize() *_vkStencilOpState {
	rval := (*_vkStencilOpState)(s)
	return rval
}

// SubmitInfo: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSubmitInfo.html
type SubmitInfo struct {
	// SType = STRUCTURE_TYPE_SUBMIT_INFO
	PNext *byte
	// waitSemaphoreCount
	PWaitSemaphores   []Semaphore
	PWaitDstStageMask []PipelineStageFlags
	// commandBufferCount
	PCommandBuffers []CommandBuffer
	// signalSemaphoreCount
	PSignalSemaphores []Semaphore
}

type _vkSubmitInfo struct {
	sType                StructureType
	pNext                *byte
	waitSemaphoreCount   uint32
	pWaitSemaphores      *Semaphore
	pWaitDstStageMask    *PipelineStageFlags
	commandBufferCount   uint32
	pCommandBuffers      *CommandBuffer
	signalSemaphoreCount uint32
	pSignalSemaphores    *Semaphore
}

func (s *SubmitInfo) Vulkanize() *_vkSubmitInfo {
	rval := &_vkSubmitInfo{
		sType:                STRUCTURE_TYPE_SUBMIT_INFO,       /*c1*/
		pNext:                (*byte)(s.PNext),                 /*cb*/
		waitSemaphoreCount:   uint32(len(s.PWaitSemaphores)),   /*c6*/
		pWaitSemaphores:      (&s.PWaitSemaphores[0]),          /*c rem*/
		pWaitDstStageMask:    (&s.PWaitDstStageMask[0]),        /*c rem*/
		commandBufferCount:   uint32(len(s.PCommandBuffers)),   /*c6*/
		pCommandBuffers:      (&s.PCommandBuffers[0]),          /*c rem*/
		signalSemaphoreCount: uint32(len(s.PSignalSemaphores)), /*c6*/
		pSignalSemaphores:    (&s.PSignalSemaphores[0]),        /*c rem*/
	}
	return rval
}

// SubpassDependency: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSubpassDependency.html
type SubpassDependency struct {
	SrcSubpass      uint32
	DstSubpass      uint32
	SrcStageMask    PipelineStageFlags
	DstStageMask    PipelineStageFlags
	SrcAccessMask   AccessFlags
	DstAccessMask   AccessFlags
	DependencyFlags DependencyFlags
}

type _vkSubpassDependency = SubpassDependency

func (s *SubpassDependency) Vulkanize() *_vkSubpassDependency {
	rval := (*_vkSubpassDependency)(s)
	return rval
}

// SubpassDescription: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSubpassDescription.html
type SubpassDescription struct {
	Flags             SubpassDescriptionFlags
	PipelineBindPoint PipelineBindPoint
	// inputAttachmentCount
	PInputAttachments []AttachmentReference
	// colorAttachmentCount
	PColorAttachments       []AttachmentReference
	PResolveAttachments     []AttachmentReference
	PDepthStencilAttachment *AttachmentReference
	// preserveAttachmentCount
	PPreserveAttachments []uint32
}

type _vkSubpassDescription struct {
	flags                   SubpassDescriptionFlags
	pipelineBindPoint       PipelineBindPoint
	inputAttachmentCount    uint32
	pInputAttachments       *_vkAttachmentReference
	colorAttachmentCount    uint32
	pColorAttachments       *_vkAttachmentReference
	pResolveAttachments     *_vkAttachmentReference
	pDepthStencilAttachment *_vkAttachmentReference
	preserveAttachmentCount uint32
	pPreserveAttachments    *uint32
}

func (s *SubpassDescription) Vulkanize() *_vkSubpassDescription {
	rval := &_vkSubpassDescription{
		flags:                   (SubpassDescriptionFlags)(s.Flags),                   /*cb*/
		pipelineBindPoint:       (PipelineBindPoint)(s.PipelineBindPoint),             /*cb*/
		inputAttachmentCount:    uint32(len(s.PInputAttachments)),                     /*c6*/
		pInputAttachments:       (&s.PInputAttachments[0]),                            /*c rem*/
		colorAttachmentCount:    uint32(len(s.PColorAttachments)),                     /*c6*/
		pColorAttachments:       (&s.PColorAttachments[0]),                            /*c rem*/
		pResolveAttachments:     (&s.PResolveAttachments[0]),                          /*c rem*/
		pDepthStencilAttachment: (*_vkAttachmentReference)(s.PDepthStencilAttachment), /*cb*/
		preserveAttachmentCount: uint32(len(s.PPreserveAttachments)),                  /*c6*/
		pPreserveAttachments:    (&s.PPreserveAttachments[0]),                         /*c rem*/
	}
	return rval
}

// SubresourceLayout: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSubresourceLayout.html
type SubresourceLayout struct {
	Offset     DeviceSize
	Size       DeviceSize
	RowPitch   DeviceSize
	ArrayPitch DeviceSize
	DepthPitch DeviceSize
}

type _vkSubresourceLayout = SubresourceLayout

func (s *_vkSubresourceLayout) Goify() *SubresourceLayout {
	rval := (*SubresourceLayout)(s)
	return rval
}

// SurfaceCapabilitiesKHR: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSurfaceCapabilitiesKHR.html
type SurfaceCapabilitiesKHR struct {
	MinImageCount           uint32
	MaxImageCount           uint32
	CurrentExtent           Extent2D
	MinImageExtent          Extent2D
	MaxImageExtent          Extent2D
	MaxImageArrayLayers     uint32
	SupportedTransforms     SurfaceTransformFlagsKHR
	CurrentTransform        SurfaceTransformFlagBitsKHR
	SupportedCompositeAlpha CompositeAlphaFlagsKHR
	SupportedUsageFlags     ImageUsageFlags
}

// WARNING - struct SurfaceCapabilitiesKHR is returned only, which is not yet handled in the binding
type _vkSurfaceCapabilitiesKHR struct {
	minImageCount           uint32
	maxImageCount           uint32
	currentExtent           _vkExtent2D
	minImageExtent          _vkExtent2D
	maxImageExtent          _vkExtent2D
	maxImageArrayLayers     uint32
	supportedTransforms     SurfaceTransformFlagsKHR
	currentTransform        SurfaceTransformFlagBitsKHR
	supportedCompositeAlpha CompositeAlphaFlagsKHR
	supportedUsageFlags     ImageUsageFlags
}

func (s *_vkSurfaceCapabilitiesKHR) Goify() *SurfaceCapabilitiesKHR {
	rval := &SurfaceCapabilitiesKHR{
		MinImageCount:           (uint32)(s.minImageCount),
		MaxImageCount:           (uint32)(s.maxImageCount),
		CurrentExtent:           (Extent2D)(s.currentExtent),
		MinImageExtent:          (Extent2D)(s.minImageExtent),
		MaxImageExtent:          (Extent2D)(s.maxImageExtent),
		MaxImageArrayLayers:     (uint32)(s.maxImageArrayLayers),
		SupportedTransforms:     (SurfaceTransformFlagsKHR)(s.supportedTransforms),
		CurrentTransform:        (SurfaceTransformFlagBitsKHR)(s.currentTransform),
		SupportedCompositeAlpha: (CompositeAlphaFlagsKHR)(s.supportedCompositeAlpha),
		SupportedUsageFlags:     (ImageUsageFlags)(s.supportedUsageFlags),
	}
	return rval
}

// SurfaceFormatKHR: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkSurfaceFormatKHR.html
type SurfaceFormatKHR struct {
	Format     Format
	ColorSpace ColorSpaceKHR
}

type _vkSurfaceFormatKHR = SurfaceFormatKHR

func (s *_vkSurfaceFormatKHR) Goify() *SurfaceFormatKHR {
	rval := (*SurfaceFormatKHR)(s)
	return rval
}

// VertexInputAttributeDescription: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkVertexInputAttributeDescription.html
type VertexInputAttributeDescription struct {
	Location uint32
	Binding  uint32
	Format   Format
	Offset   uint32
}

type _vkVertexInputAttributeDescription = VertexInputAttributeDescription

func (s *VertexInputAttributeDescription) Vulkanize() *_vkVertexInputAttributeDescription {
	rval := (*_vkVertexInputAttributeDescription)(s)
	return rval
}

// VertexInputBindingDescription: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkVertexInputBindingDescription.html
type VertexInputBindingDescription struct {
	Binding   uint32
	Stride    uint32
	InputRate VertexInputRate
}

type _vkVertexInputBindingDescription = VertexInputBindingDescription

func (s *VertexInputBindingDescription) Vulkanize() *_vkVertexInputBindingDescription {
	rval := (*_vkVertexInputBindingDescription)(s)
	return rval
}

// Viewport: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkViewport.html
type Viewport struct {
	X        float32
	Y        float32
	Width    float32
	Height   float32
	MinDepth float32
	MaxDepth float32
}

type _vkViewport = Viewport

func (s *Viewport) Vulkanize() *_vkViewport {
	rval := (*_vkViewport)(s)
	return rval
}

// WriteDescriptorSet: See https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkWriteDescriptorSet.html
type WriteDescriptorSet struct {
	// SType = STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET
	PNext           *byte
	DstSet          DescriptorSet
	DstBinding      uint32
	DstArrayElement uint32
	// descriptorCount
	DescriptorType   DescriptorType
	PImageInfo       []DescriptorImageInfo
	PBufferInfo      []DescriptorBufferInfo
	PTexelBufferView []BufferView
}

type _vkWriteDescriptorSet struct {
	sType            StructureType
	pNext            *byte
	dstSet           DescriptorSet
	dstBinding       uint32
	dstArrayElement  uint32
	descriptorCount  uint32
	descriptorType   DescriptorType
	pImageInfo       *_vkDescriptorImageInfo
	pBufferInfo      *_vkDescriptorBufferInfo
	pTexelBufferView *BufferView
}

func (s *WriteDescriptorSet) Vulkanize() *_vkWriteDescriptorSet {
	rval := &_vkWriteDescriptorSet{
		sType:            STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET, /*c1*/
		pNext:            (*byte)(s.PNext),                    /*cb*/
		dstSet:           (DescriptorSet)(s.DstSet),           /*cb*/
		dstBinding:       (uint32)(s.DstBinding),              /*cb*/
		dstArrayElement:  (uint32)(s.DstArrayElement),         /*cb*/
		descriptorCount:  uint32(len(s.PImageInfo)),           /*c6*/
		descriptorType:   (DescriptorType)(s.DescriptorType),  /*cb*/
		pImageInfo:       (&s.PImageInfo[0]),                  /*c rem*/
		pBufferInfo:      (&s.PBufferInfo[0]),                 /*c rem*/
		pTexelBufferView: (&s.PTexelBufferView[0]),            /*c rem*/
	}
	return rval
}
